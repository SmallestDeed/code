import { basePath } from './config.js'
const utils = {
  myForEach: (arr, callback) => { // forEach封装
    if (arr instanceof Array) {
      arr.forEach(callback)
    } else {
      return
    }
  },
  mySplitUrl: (url) => { // 字符串裁切
    if (url.indexOf('?') === -1) {
      return
    } else {
      let index = url.indexOf('?')
      let newUrl = url.slice(index + 1).split('&')
      let urlObj = {}
      utils.myForEach(newUrl, (value) => {
        let index = value.indexOf('=')
        urlObj[value.slice(0, index)] = value.slice(index + 1)
      })
      urlObj.url = url.slice(0,index)
      return urlObj
    }
  },
  myCompoundUrl: (obj) => { // 把地址对象变为地址字符串
    if (!obj.url) {
      return ''
    } else {
      let url = obj.url + '?'
      for (var key in obj) {
        if (key !== 'url') {
         url += key + '=' + obj[key] + '&' 
        }
      }
      return url = url.slice(0,url.length - 1)   
    }
  },
    requestFn(params) {
        wx.showLoading({ title: '加载中' })
        return new Promise((resolve, reject) => {
            wx.request({
                url: basePath[params.base] + params.url,
                data: params.params,
                method: params.type,
                header: {
                    "Content-Type": params.contentType,
                    'Authorization': wx.getStorageSync('token') || '',
                    'Platform-Code': params.platformCode
                },
                success(res) {
                    resolve(res.data)
                    wx.hideLoading()
                },
                fail(err) {
                    reject(err)
                    wx.hideLoading()
                    wx.showToast({ title: '加载失败', icon: 'none', duration: 2000 })
                }
            })
        })
    },
  myFindIndex: (arr, callback) => { // 寻找对应的index
    let flag = -1
    utils.myForEach(arr, (value, index) => {
      if (callback(value)) {
        flag = index
        return
      }
    })
    return flag
  },
  myFind: (arr, callback) => { // 寻找对应的item
    let flag = false
    utils.myForEach(arr, (value) => {
      if (callback(value)) {
        flag = value
        return
      }
    })
    return flag
  }
}

module.exports = utils