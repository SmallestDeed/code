//app.js
import fetch from './utils/fetch.js'
import utils from './utils/utils.js'
import API from '/api/api.js'
const moment = require('./lib/moment/moment.min.js')
import {
  resourcePath,
  staticImageUrl,
  sevenUrl,
  appid,
  basePath,
  shareTitle,
  wholeHouseUrl,
  grassSevenUrl
} from './utils/config.js'
import {
    quickNavigation
} from './component/quick-navigation/quick-navigation'
import {
    newNav
} from './component/newNav/newNav'
import {
    bindingPhone
} from './component/binding-phone/binding-phone'
App({
    quickNavigation,
    newNav,
    API: API,
    wholeHouseUrl,
    bindingPhone,
    data: {
        fetch: fetch,
        hidden: false,
        webUrl: '',
        cityData: [], // 城市数组
        carCount: 0, // 购物车数量
        isBindingMobile: false,
        cutpriceUrl: '',
    },
    basePath: basePath,
    baseUrl: basePath.baseUrl,
    fetch: fetch,
    wxUrl: 'https://servicewechat.com/' + appid + '/devtools/page-frame.html',
    myForEach: utils.myForEach,
    myFindIndex: utils.myFindIndex,
    myFind: utils.myFind,
    resourcePath: resourcePath,
    staticImageUrl: staticImageUrl,
    sevenUrl: sevenUrl,
    grassSevenUrl,
    mySplitUrl: utils.mySplitUrl,
    myCompoundUrl: utils.myCompoundUrl,
    moment: moment(),
    shareAppMessageObj: {
        title: shareTitle,
        path: `/pages/index/index`,
        success(res) {},
        fail(err) {}
    },
    shareAppMessageFn(bool, params) {
        // return {
        //   title: shareTitle,
        //   path: `/pages/index/index`,
        //   success(res) {
        //   },
        //   fail(err) {
        //   }
        // }
        let isBool = bool || false;
        let pages = getCurrentPages(),
            isIndex = false,
            opt = params ? params : '',
            url = '/' + pages[pages.length - 1].route + opt,
            str = [
                'pages/index/index',
                'pages/house-case/house-case',
                'pages/house-goods/house-goods',
                'pages/house-type/house-type',
                'pages/personal-center/personal-center'
            ];
        for (let i = 0; i < str.length; i++) {
            if (pages[pages.length - 1].route == str[i] || !isBool) {
                isIndex = true;
                break;
            }
        }
        url = !bool ? str[0] : url;
        console.log(encodeURI(url), 'wqwq')
        let path = isIndex ? url : (str[0] + '?navToUrl=' + encodeURIComponent(url));
        console.log(path);
        return {
            title: shareTitle,
            path: path,
            success(res) {},
            fail(err) {}
        }
    },


    onLaunch: function() {
        let that = this
        this.forcedUpdating() // 强制更新
        this.userLoginStatus = this.userLogin() // 登录 
       
        var logs = wx.getStorageSync('logs') || []
        logs.unshift(Date.now())
        wx.setStorageSync('logs', logs)
        this.getUserMessage()   //获取用户信息
        // 获取省市区
        let url = `/base/basearea/getAllArea`
        fetch(url, 'get')
            .then((res) => {
                wx.setStorageSync('cityData', res.status ? res.obj : [])
            })
            .catch(() => {
                wx.setStorageSync('cityData', [])
            })
    },
    getUserMessage() {
      let that = this
      wx.getUserInfo({
        success(res) {
          that.globalData.userInfo = res.userInfo
        },
        // fail(){
        //   that.globalData.userInfo = null
        // }
      })
    },
    userLoginStatus: null,
    userLogin() {
      return new Promise((reject, resolve) => {
        let that = this;
        wx.login({
          success: res => {
            let url = `/user/getOpenid`
            fetch(url, 'formData', {
              code: res.code,
              appid: appid
            }, 'login')
              .then(res => {
                if (res.success) {
                  // 存储openId
                  wx.setStorageSync('openId', res.obj)
                  // 获取用户信息
                  // wx.getSetting({
                  //   success(res) {
                  //     if (!res.authSetting['scope.userInfo']) {
                  //       wx.authorize({
                  //         scope: 'scope.userInfo',
                  //         success() {
                  //           // 已经授权，可以直接调用 getUserInfo 获取头像昵称，不会弹框
                  //           wx.getUserInfo({
                  //             success: res => {
                  //               // 可以将 res 发送给后台解码出 unionId
                  //               that.globalData.userInfo = res.userInfo
                  //               // 由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回
                  //               // 所以此处加入 callback 以防止这种情况
                  //               if (that.userInfoReadyCallback) {
                  //                 that.userInfoReadyCallback(res)
                  //               }
                  //               // 上传用户昵称
                  //               // let url = '/user/saveMinProNickName'
                  //               // fetch(url, 'formData', {
                  //               //     openId: wx.getStorageSync('openId'),
                  //               //     nickName: res.userInfo.nickName
                  //               // }, 'login')
                  //               //     .then((res) => { })
                  //               let url = '/v2/user/center/modifyUserInfo'
                  //               fetch(url, 'formData', {
                  //                 nickName: res.userInfo.nickName,
                  //                 headPic: res.userInfo.avatarUrl
                  //               }, 'user').then((res) => {
                  //                 console.log(res);
                  //               })
                  //             }
                  //           })
                  //         }
                  //       })
                  //     } else {
                  //       // 已经授权，可以直接调用 getUserInfo 获取头像昵称，不会弹框
                  //       wx.getUserInfo({
                  //         success: res => {
                  //           // 可以将 res 发送给后台解码出 unionId
                  //           that.globalData.userInfo = res.userInfo
                  //           // 由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回
                  //           // 所以此处加入 callback 以防止这种情况
                  //           if (that.userInfoReadyCallback) {
                  //             that.userInfoReadyCallback(res)
                  //           }
                  //           // 上传用户昵称
                  //           // let url = '/user/saveMinProNickName'
                  //           // fetch(url, 'formData', {
                  //           //     openId: wx.getStorageSync('openId'),
                  //           //     nickName: res.userInfo.nickName
                  //           // }, 'login')
                  //           //     .then((res) => { })
                  //           let url = '/v2/user/center/modifyUserInfo'
                  //           fetch(url, 'formData', {
                  //             nickName: res.userInfo.nickName,
                  //             headPic: res.userInfo.avatarUrl
                  //           }, 'user').then((res) => {
                  //             console.log(res);
                  //           })
                  //         }
                  //       })
                  //     }
                  //   },
                  //   fail(err) { }
                  // })
                  // 登录
                  let url = `/user/login`
                  return fetch(url, 'formData', {
                    openid: res.obj,
                    appid: appid
                  }, 'login')
                }
              })
              .then(res => {
                if (res.success) {
                  wx.setStorageSync('token', res.obj.token)
                  wx.setStorageSync('userId', res.obj.id)
                  wx.setStorageSync('companyId', res.obj.miniProgramCompanyId)
                  res.obj.headPic ? this.globalData.indexLoginStatus = true : this.globalData.indexLoginStatus=false
                getApp().demo(res)
                  console.log(res.obj.headPic)
                  console.log(this.globalData.indexLoginStatus)
                  // this.globalData.indexLoginStatus = res.obj.headPic != "";  //true已授权 or false弹出授权弹窗
                  if(this.accreditStatusCallBack){
                    this.accreditStatusCallBack()
                  }
                  reject(true)
                  if (that.openidCallback) {
                    that.openidCallback(res.obj.token);
                  }
                } else {
                  reject(false)
                }
              })
          },
          fail: (err) => {
            wx.showToast({
              title: '网络错误',
              icon: 'none'
            })
            reject(false)
          }
        })
      })
    },
    cityDataFilter(cityData) { // 城市数据处理
        this.myForEach(cityData, (valOne) => {
            this.myForEach(valOne.baseAreaVos, (valTwo) => {
                valTwo.baseAreaVos.unshift({
                    areaCode: '',
                    areaName: '全市',
                    baseAreaVos: null,
                    id: null,
                    levelId: 0,
                    pid: valTwo.areaCode
                })
            })
        })
        return cityData
    },
    myNavigateBack(url, options) {
        let pages = getCurrentPages(),
            optionUrl = '?'
        let flag = this.myFindIndex(pages, (page) => {
            return page.route === url
        })
        if (typeof options === 'object') {
            for (let key in options) {
                optionUrl += key + '=' + options[key] + '&'
            }
            optionUrl.slice(0, optionUrl.length - 1)
        } else {
            optionUrl = ''
        }
        if (flag !== -1) {
            return getCurrentPages()[flag]
        } else {
            wx.navigateTo({
                url: '/' + url + optionUrl,
            })
            return false
        }
    },
    globalData: {
      userInfo: null,
      indexLoginStatus:''
    },
    isEmojiCharacter(substring) {
        for (var i = 0; i < substring.length; i++) {
            var hs = substring.charCodeAt(i);
            if (0xd800 <= hs && hs <= 0xdbff) {
                if (substring.length > 1) {
                    var ls = substring.charCodeAt(i + 1);
                    var uc = ((hs - 0xd800) * 0x400) + (ls - 0xdc00) + 0x10000;
                    if (0x1d000 <= uc && uc <= 0x1f77f) {
                        return true;
                    }
                }
            } else if (substring.length > 1) {
                var ls = substring.charCodeAt(i + 1);
                if (ls == 0x20e3) {
                    return true;
                }
            } else {
                if (0x2100 <= hs && hs <= 0x27ff) {
                    return true;
                } else if (0x2B05 <= hs && hs <= 0x2b07) {
                    return true;
                } else if (0x2934 <= hs && hs <= 0x2935) {
                    return true;
                } else if (0x3297 <= hs && hs <= 0x3299) {
                    return true;
                } else if (hs == 0xa9 || hs == 0xae || hs == 0x303d || hs == 0x3030
                    || hs == 0x2b55 || hs == 0x2b1c || hs == 0x2b1b
                    || hs == 0x2b50) {
                    return true;
                }
            }
        }
    },
    forcedUpdating() {
        if (wx.canIUse('getUpdateManager')) {
            const updateManager = wx.getUpdateManager()
            updateManager.onCheckForUpdate((res) => {
                if (res.hasUpdate) {
                    updateManager.onUpdateReady(function () {
                        wx.showModal({
                            title: '更新提示',
                            content: '新版本已经准备好，是否重启应用？',
                            success: function (res) { res.confirm && updateManager.applyUpdate() }
                        })
                    })
                    updateManager.onUpdateFailed(() => { wx.showModal({ title: '更新提示', content: '新版本下载失败', showCancel: false }) })
                }
            })
        }
    },
})