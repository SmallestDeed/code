<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.nork.product.dao.ProductCategoryRelMapper">
<!--<cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>-->
	<!-- **插入定义** -->
	<insert id="insertSelective" parameterType="com.nork.product.model.ProductCategoryRel"  useGeneratedKeys="true" keyProperty="id">
		insert into product_category_rel
		<trim prefix="(" suffix=")" suffixOverrides=",">
		<if test="sysCode!= null">sys_code, </if>
		<if test="creator!= null">creator, </if>
		<if test="gmtCreate!= null">gmt_create, </if>
		<if test="modifier!= null">modifier, </if>
		<if test="gmtModified!= null">gmt_modified, </if>
		<if test="isDeleted!= null">is_deleted, </if>
		<if test="productId!= null">product_id, </if>
		<if test="categoryId!= null">category_id, </if>
		<if test="att1!= null">att1, </if>
		<if test="att2!= null">att2, </if>
		<if test="att3!= null">att3, </if>
		<if test="att4!= null">att4, </if>
		<if test="att5!= null">att5, </if>
		<if test="att6!= null">att6, </if>
		<if test="dateAtt1!= null">date_att1, </if>
		<if test="dateAtt2!= null">date_att2, </if>
		<if test="numAtt1!= null">num_att1, </if>
		<if test="numAtt2!= null">num_att2, </if>
		<if test="numAtt3!= null">num_att3, </if>
		<if test="numAtt4!= null">num_att4, </if>
		<if test="remark!= null">remark, </if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
		<if test="sysCode!= null">  #{sysCode,jdbcType=VARCHAR}, </if>
		<if test="creator!= null">  #{creator,jdbcType=VARCHAR}, </if>
		<if test="gmtCreate!= null">  #{gmtCreate,jdbcType=TIMESTAMP}, </if>
		<if test="modifier!= null">  #{modifier,jdbcType=VARCHAR}, </if>
		<if test="gmtModified!= null">  #{gmtModified,jdbcType=TIMESTAMP}, </if>
		<if test="isDeleted!= null">  #{isDeleted,jdbcType=INTEGER}, </if>
		<if test="productId!= null">  #{productId,jdbcType=INTEGER}, </if>
		<if test="categoryId!= null">  #{categoryId,jdbcType=INTEGER}, </if>
		<if test="att1!= null">  #{att1,jdbcType=VARCHAR}, </if>
		<if test="att2!= null">  #{att2,jdbcType=VARCHAR}, </if>
		<if test="att3!= null">  #{att3,jdbcType=VARCHAR}, </if>
		<if test="att4!= null">  #{att4,jdbcType=VARCHAR}, </if>
		<if test="att5!= null">  #{att5,jdbcType=VARCHAR}, </if>
		<if test="att6!= null">  #{att6,jdbcType=VARCHAR}, </if>
		<if test="dateAtt1!= null">  #{dateAtt1,jdbcType=TIMESTAMP}, </if>
		<if test="dateAtt2!= null">  #{dateAtt2,jdbcType=TIMESTAMP}, </if>
		<if test="numAtt1!= null">  #{numAtt1,jdbcType=INTEGER}, </if>
		<if test="numAtt2!= null">  #{numAtt2,jdbcType=INTEGER}, </if>
		<if test="numAtt3!= null">  #{numAtt3,jdbcType=DOUBLE}, </if>
		<if test="numAtt4!= null">  #{numAtt4,jdbcType=DOUBLE}, </if>
		<if test="remark!= null">  #{remark,jdbcType=VARCHAR}, </if>	
		</trim>
	</insert>

	<!-- **更新定义** -->
	<update id="updateByPrimaryKeySelective" parameterType="com.nork.product.model.ProductCategoryRel">
		update product_category_rel
		<set>
		<if test="sysCode!= null">  sys_code = #{sysCode,jdbcType=VARCHAR}, </if>
		<if test="creator!= null">  creator = #{creator,jdbcType=VARCHAR}, </if>
		<if test="gmtCreate!= null">  gmt_create = #{gmtCreate,jdbcType=TIMESTAMP}, </if>
		<if test="modifier!= null">  modifier = #{modifier,jdbcType=VARCHAR}, </if>
		<if test="gmtModified!= null">  gmt_modified = #{gmtModified,jdbcType=TIMESTAMP}, </if>
		<if test="isDeleted!= null">  is_deleted = #{isDeleted,jdbcType=INTEGER}, </if>
		<if test="productId!= null">  product_id = #{productId,jdbcType=INTEGER}, </if>
		<if test="categoryId!= null">  category_id = #{categoryId,jdbcType=INTEGER}, </if>
		<if test="att1!= null">  att1 = #{att1,jdbcType=VARCHAR}, </if>
		<if test="att2!= null">  att2 = #{att2,jdbcType=VARCHAR}, </if>
		<if test="att3!= null">  att3 = #{att3,jdbcType=VARCHAR}, </if>
		<if test="att4!= null">  att4 = #{att4,jdbcType=VARCHAR}, </if>
		<if test="att5!= null">  att5 = #{att5,jdbcType=VARCHAR}, </if>
		<if test="att6!= null">  att6 = #{att6,jdbcType=VARCHAR}, </if>
		<if test="dateAtt1!= null">  date_att1 = #{dateAtt1,jdbcType=TIMESTAMP}, </if>
		<if test="dateAtt2!= null">  date_att2 = #{dateAtt2,jdbcType=TIMESTAMP}, </if>
		<if test="numAtt1!= null">  num_att1 = #{numAtt1,jdbcType=INTEGER}, </if>
		<if test="numAtt2!= null">  num_att2 = #{numAtt2,jdbcType=INTEGER}, </if>
		<if test="numAtt3!= null">  num_att3 = #{numAtt3,jdbcType=DOUBLE}, </if>
		<if test="numAtt4!= null">  num_att4 = #{numAtt4,jdbcType=DOUBLE}, </if>
		<if test="remark!= null">  remark = #{remark,jdbcType=VARCHAR}, </if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>

	<!-- **删除定义** -->
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from product_category_rel
		where id = #{id,jdbcType=INTEGER}
	</delete>
	
	<!-- **常量定义** -->
	<sql id="All_Column_List">
		id,sys_code,creator,gmt_create,modifier,gmt_modified,is_deleted,product_id,category_id,att1,att2,att3,att4,att5,att6,date_att1,date_att2,num_att1,num_att2,num_att3,num_att4,remark
	</sql>
	
	<!-- **结果定义** -->
	<resultMap id="AllResultMap" type="com.nork.product.model.ProductCategoryRel">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result  column="sys_code" property="sysCode" jdbcType="VARCHAR" />
		<result  column="creator" property="creator" jdbcType="VARCHAR" />
		<result  column="gmt_create" property="gmtCreate" jdbcType="TIMESTAMP" />
		<result  column="modifier" property="modifier" jdbcType="VARCHAR" />
		<result  column="gmt_modified" property="gmtModified" jdbcType="TIMESTAMP" />
		<result  column="is_deleted" property="isDeleted" jdbcType="INTEGER" />
		<result  column="product_id" property="productId" jdbcType="INTEGER" />
		<result  column="category_id" property="categoryId" jdbcType="INTEGER" />
		<result  column="att1" property="att1" jdbcType="VARCHAR" />
		<result  column="att2" property="att2" jdbcType="VARCHAR" />
		<result  column="att3" property="att3" jdbcType="VARCHAR" />
		<result  column="att4" property="att4" jdbcType="VARCHAR" />
		<result  column="att5" property="att5" jdbcType="VARCHAR" />
		<result  column="att6" property="att6" jdbcType="VARCHAR" />
		<result  column="date_att1" property="dateAtt1" jdbcType="TIMESTAMP" />
		<result  column="date_att2" property="dateAtt2" jdbcType="TIMESTAMP" />
		<result  column="num_att1" property="numAtt1" jdbcType="INTEGER" />
		<result  column="num_att2" property="numAtt2" jdbcType="INTEGER" />
		<result  column="num_att3" property="numAtt3" jdbcType="DOUBLE" />
		<result  column="num_att4" property="numAtt4" jdbcType="DOUBLE" />
		<result  column="remark" property="remark" jdbcType="VARCHAR" />
	</resultMap>
	
	<!-- **查询定义** -->
	<!-- 按主键查询 -->
	<select id="selectByPrimaryKey" resultMap="AllResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="All_Column_List" />
		from product_category_rel
		where id = #{id,jdbcType=INTEGER}
	</select>
	
	<!-- 查询所有，可排序 -->
    <select id="selectList" resultMap="AllResultMap"
		parameterType="com.nork.product.model.ProductCategoryRel">
		select
		<include refid="All_Column_List" />
		from product_category_rel
        where 1=1
		<if test="sysCode!= null">  and sys_code = #{sysCode,jdbcType=VARCHAR} </if>
		<if test="creator!= null">  and creator = #{creator,jdbcType=VARCHAR} </if>
		<if test="gmtCreate!= null">  and gmt_create = #{gmtCreate,jdbcType=TIMESTAMP} </if>
		<if test="modifier!= null">  and modifier = #{modifier,jdbcType=VARCHAR} </if>
		<if test="gmtModified!= null">  and gmt_modified = #{gmtModified,jdbcType=TIMESTAMP} </if>
		<if test="isDeleted!= null">  and is_deleted = #{isDeleted,jdbcType=INTEGER} </if>
		<if test="productId!= null">  and product_id = #{productId,jdbcType=INTEGER} </if>
		<if test="categoryId!= null">  and category_id = #{categoryId,jdbcType=INTEGER} </if>
		<if test="att1!= null">  and att1 = #{att1,jdbcType=VARCHAR} </if>
		<if test="att2!= null">  and att2 = #{att2,jdbcType=VARCHAR} </if>
		<if test="att3!= null">  and att3 = #{att3,jdbcType=VARCHAR} </if>
		<if test="att4!= null">  and att4 = #{att4,jdbcType=VARCHAR} </if>
		<if test="att5!= null">  and att5 = #{att5,jdbcType=VARCHAR} </if>
		<if test="att6!= null">  and att6 = #{att6,jdbcType=VARCHAR} </if>
		<if test="dateAtt1!= null">  and date_att1 = #{dateAtt1,jdbcType=TIMESTAMP} </if>
		<if test="dateAtt2!= null">  and date_att2 = #{dateAtt2,jdbcType=TIMESTAMP} </if>
		<if test="numAtt1!= null">  and num_att1 = #{numAtt1,jdbcType=INTEGER} </if>
		<if test="numAtt2!= null">  and num_att2 = #{numAtt2,jdbcType=INTEGER} </if>
		<if test="numAtt3!= null">  and num_att3 = #{numAtt3,jdbcType=DOUBLE} </if>
		<if test="numAtt4!= null">  and num_att4 = #{numAtt4,jdbcType=DOUBLE} </if>
		<if test="remark!= null">  and remark = #{remark,jdbcType=VARCHAR} </if>
		<if test="order != null and  order !=''  ">
			order by ${order}
			<if test="orderNum != null and  orderNum !='' ">
				${orderNum}
			</if>
		</if>
		<if test="orders != null and  orders !=''  ">
		   order by ${orders}
		</if>
	</select>
	
	<!-- 分页汇总 -->
	<select id="selectCount" resultType="int"
		parameterType="com.nork.product.model.search.ProductCategoryRelSearch">
		select count(*)
		from product_category_rel
		where 1=1
		<if test="sysCode !=  null and sysCode !=  ''   "> and sys_code  = #{sysCode,jdbcType=VARCHAR} </if>
		<if test="sch_SysCode_ !=  null and sch_SysCode_ !=  ''   ">
			and sys_code  like CONCAT(CONCAT('%',#{sch_SysCode_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_SysCode !=  null and sch_SysCode !=  ''   ">
			and sys_code  like CONCAT('%',#{sch_SysCode,jdbcType=VARCHAR})
		 </if>
		<if test="schSysCode_ !=  null and schSysCode_ !=  ''   ">
			and sys_code  like CONCAT(#{schSysCode_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="sysCodeStart !=  null and sysCodeEnd!= null  ">
			and sys_code between #{sysCodeStart,jdbcType=VARCHAR} and #{sysCodeEnd,jdbcType=VARCHAR}
		 </if>
		<if test="creator !=  null and creator !=  ''   "> and creator  = #{creator,jdbcType=VARCHAR} </if>
		<if test="sch_Creator_ !=  null and sch_Creator_ !=  ''   ">
			and creator  like CONCAT(CONCAT('%',#{sch_Creator_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_Creator !=  null and sch_Creator !=  ''   ">
			and creator  like CONCAT('%',#{sch_Creator,jdbcType=VARCHAR})
		 </if>
		<if test="schCreator_ !=  null and schCreator_ !=  ''   ">
			and creator  like CONCAT(#{schCreator_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="creatorStart !=  null and creatorEnd!= null  ">
			and creator between #{creatorStart,jdbcType=VARCHAR} and #{creatorEnd,jdbcType=VARCHAR}
		 </if>
		<if test="gmtCreate !=  null  ">
			and gmt_create  = #{gmtCreate,jdbcType=TIMESTAMP}
		 </if>
		<if test="gmtCreateStart !=  null and gmtCreateEnd!= null  ">
			and gmt_create between #{gmtCreateStart,jdbcType=TIMESTAMP} and #{gmtCreateEnd,jdbcType=TIMESTAMP}
		 </if>
		<if test="modifier !=  null and modifier !=  ''   "> and modifier  = #{modifier,jdbcType=VARCHAR} </if>
		<if test="sch_Modifier_ !=  null and sch_Modifier_ !=  ''   ">
			and modifier  like CONCAT(CONCAT('%',#{sch_Modifier_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_Modifier !=  null and sch_Modifier !=  ''   ">
			and modifier  like CONCAT('%',#{sch_Modifier,jdbcType=VARCHAR})
		 </if>
		<if test="schModifier_ !=  null and schModifier_ !=  ''   ">
			and modifier  like CONCAT(#{schModifier_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="modifierStart !=  null and modifierEnd!= null  ">
			and modifier between #{modifierStart,jdbcType=VARCHAR} and #{modifierEnd,jdbcType=VARCHAR}
		 </if>
		<if test="gmtModified !=  null  ">
			and gmt_modified  = #{gmtModified,jdbcType=TIMESTAMP}
		 </if>
		<if test="gmtModifiedStart !=  null and gmtModifiedEnd!= null  ">
			and gmt_modified between #{gmtModifiedStart,jdbcType=TIMESTAMP} and #{gmtModifiedEnd,jdbcType=TIMESTAMP}
		 </if>
		<if test="isDeleted !=  null  ">			and is_deleted  = #{isDeleted,jdbcType=INTEGER} </if>
		<if test="productId !=  null  ">			and product_id  = #{productId,jdbcType=INTEGER} </if>
		<if test="categoryId !=  null  ">			and category_id  = #{categoryId,jdbcType=INTEGER} </if>
		<if test="att1 !=  null and att1 !=  ''   "> and att1  = #{att1,jdbcType=VARCHAR} </if>
		<if test="sch_Att1_ !=  null and sch_Att1_ !=  ''   ">
			and att1  like CONCAT(CONCAT('%',#{sch_Att1_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_Att1 !=  null and sch_Att1 !=  ''   ">
			and att1  like CONCAT('%',#{sch_Att1,jdbcType=VARCHAR})
		 </if>
		<if test="schAtt1_ !=  null and schAtt1_ !=  ''   ">
			and att1  like CONCAT(#{schAtt1_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="att1Start !=  null and att1End!= null  ">
			and att1 between #{att1Start,jdbcType=VARCHAR} and #{att1End,jdbcType=VARCHAR}
		 </if>
		<if test="att2 !=  null and att2 !=  ''   "> and att2  = #{att2,jdbcType=VARCHAR} </if>
		<if test="sch_Att2_ !=  null and sch_Att2_ !=  ''   ">
			and att2  like CONCAT(CONCAT('%',#{sch_Att2_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_Att2 !=  null and sch_Att2 !=  ''   ">
			and att2  like CONCAT('%',#{sch_Att2,jdbcType=VARCHAR})
		 </if>
		<if test="schAtt2_ !=  null and schAtt2_ !=  ''   ">
			and att2  like CONCAT(#{schAtt2_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="att2Start !=  null and att2End!= null  ">
			and att2 between #{att2Start,jdbcType=VARCHAR} and #{att2End,jdbcType=VARCHAR}
		 </if>
		<if test="att3 !=  null and att3 !=  ''   "> and att3  = #{att3,jdbcType=VARCHAR} </if>
		<if test="sch_Att3_ !=  null and sch_Att3_ !=  ''   ">
			and att3  like CONCAT(CONCAT('%',#{sch_Att3_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_Att3 !=  null and sch_Att3 !=  ''   ">
			and att3  like CONCAT('%',#{sch_Att3,jdbcType=VARCHAR})
		 </if>
		<if test="schAtt3_ !=  null and schAtt3_ !=  ''   ">
			and att3  like CONCAT(#{schAtt3_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="att3Start !=  null and att3End!= null  ">
			and att3 between #{att3Start,jdbcType=VARCHAR} and #{att3End,jdbcType=VARCHAR}
		 </if>
		<if test="att4 !=  null and att4 !=  ''   "> and att4  = #{att4,jdbcType=VARCHAR} </if>
		<if test="sch_Att4_ !=  null and sch_Att4_ !=  ''   ">
			and att4  like CONCAT(CONCAT('%',#{sch_Att4_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_Att4 !=  null and sch_Att4 !=  ''   ">
			and att4  like CONCAT('%',#{sch_Att4,jdbcType=VARCHAR})
		 </if>
		<if test="schAtt4_ !=  null and schAtt4_ !=  ''   ">
			and att4  like CONCAT(#{schAtt4_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="att4Start !=  null and att4End!= null  ">
			and att4 between #{att4Start,jdbcType=VARCHAR} and #{att4End,jdbcType=VARCHAR}
		 </if>
		<if test="att5 !=  null and att5 !=  ''   "> and att5  = #{att5,jdbcType=VARCHAR} </if>
		<if test="sch_Att5_ !=  null and sch_Att5_ !=  ''   ">
			and att5  like CONCAT(CONCAT('%',#{sch_Att5_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_Att5 !=  null and sch_Att5 !=  ''   ">
			and att5  like CONCAT('%',#{sch_Att5,jdbcType=VARCHAR})
		 </if>
		<if test="schAtt5_ !=  null and schAtt5_ !=  ''   ">
			and att5  like CONCAT(#{schAtt5_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="att5Start !=  null and att5End!= null  ">
			and att5 between #{att5Start,jdbcType=VARCHAR} and #{att5End,jdbcType=VARCHAR}
		 </if>
		<if test="att6 !=  null and att6 !=  ''   "> and att6  = #{att6,jdbcType=VARCHAR} </if>
		<if test="sch_Att6_ !=  null and sch_Att6_ !=  ''   ">
			and att6  like CONCAT(CONCAT('%',#{sch_Att6_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_Att6 !=  null and sch_Att6 !=  ''   ">
			and att6  like CONCAT('%',#{sch_Att6,jdbcType=VARCHAR})
		 </if>
		<if test="schAtt6_ !=  null and schAtt6_ !=  ''   ">
			and att6  like CONCAT(#{schAtt6_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="att6Start !=  null and att6End!= null  ">
			and att6 between #{att6Start,jdbcType=VARCHAR} and #{att6End,jdbcType=VARCHAR}
		 </if>
		<if test="dateAtt1 !=  null  ">
			and date_att1  = #{dateAtt1,jdbcType=TIMESTAMP}
		 </if>
		<if test="dateAtt1Start !=  null and dateAtt1End!= null  ">
			and date_att1 between #{dateAtt1Start,jdbcType=TIMESTAMP} and #{dateAtt1End,jdbcType=TIMESTAMP}
		 </if>
		<if test="dateAtt2 !=  null  ">
			and date_att2  = #{dateAtt2,jdbcType=TIMESTAMP}
		 </if>
		<if test="dateAtt2Start !=  null and dateAtt2End!= null  ">
			and date_att2 between #{dateAtt2Start,jdbcType=TIMESTAMP} and #{dateAtt2End,jdbcType=TIMESTAMP}
		 </if>
		<if test="numAtt1 !=  null  ">			and num_att1  = #{numAtt1,jdbcType=INTEGER} </if>
		<if test="numAtt2 !=  null  ">			and num_att2  = #{numAtt2,jdbcType=INTEGER} </if>
		<if test="numAtt3 !=  null  ">			and num_att3  = #{numAtt3,jdbcType=DOUBLE} </if>
		<if test="numAtt4 !=  null  ">			and num_att4  = #{numAtt4,jdbcType=DOUBLE} </if>
		<if test="remark !=  null and remark !=  ''   "> and remark  = #{remark,jdbcType=VARCHAR} </if>		
		<if test="sch_Remark_ !=  null and sch_Remark_ !=  ''   ">
			and remark  like CONCAT(CONCAT('%',#{sch_Remark_,jdbcType=VARCHAR}),'%')
		 </if>		<if test="sch_Remark !=  null and sch_Remark !=  ''   ">
			and remark  like CONCAT('%',#{sch_Remark,jdbcType=VARCHAR})
		 </if>		<if test="schRemark_ !=  null and schRemark_ !=  ''   ">
			and remark  like CONCAT(#{schRemark_,jdbcType=VARCHAR},'%')
		 </if>		<if test="remarkStart !=  null and remarkEnd!= null  ">
			and remark between #{remarkStart,jdbcType=VARCHAR} and #{remarkEnd,jdbcType=VARCHAR}
		 </if>
	</select>
	
	<!-- 分页查询 ,可在ProductCategoryRelSearch中自定义查询条件-->
	<select id="selectPaginatedList" resultMap="AllResultMap"
		parameterType="com.nork.product.model.search.ProductCategoryRelSearch" >
		select
		<include refid="All_Column_List" />
	    from product_category_rel
		where 1=1	
		<if test="sysCode !=  null and sysCode !=  ''   "> and sys_code  = #{sysCode,jdbcType=VARCHAR} </if>
		<if test="sch_SysCode_ !=  null and sch_SysCode_ !=  ''   ">
			and sys_code  like CONCAT(CONCAT('%',#{sch_SysCode_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_SysCode !=  null and sch_SysCode !=  ''   ">
			and sys_code  like CONCAT('%',#{sch_SysCode,jdbcType=VARCHAR})
		 </if>
		<if test="schSysCode_ !=  null and schSysCode_ !=  ''   ">
			and sys_code  like CONCAT(#{schSysCode_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="sysCodeStart !=  null and sysCodeEnd!= null  ">
			and sys_code between #{sysCodeStart,jdbcType=VARCHAR} and #{sysCodeEnd,jdbcType=VARCHAR}
		 </if>
		<if test="creator !=  null and creator !=  ''   "> and creator  = #{creator,jdbcType=VARCHAR} </if>
		<if test="sch_Creator_ !=  null and sch_Creator_ !=  ''   ">
			and creator  like CONCAT(CONCAT('%',#{sch_Creator_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_Creator !=  null and sch_Creator !=  ''   ">
			and creator  like CONCAT('%',#{sch_Creator,jdbcType=VARCHAR})
		 </if>
		<if test="schCreator_ !=  null and schCreator_ !=  ''   ">
			and creator  like CONCAT(#{schCreator_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="creatorStart !=  null and creatorEnd!= null  ">
			and creator between #{creatorStart,jdbcType=VARCHAR} and #{creatorEnd,jdbcType=VARCHAR}
		 </if>
		<if test="gmtCreate !=  null  ">
			and gmt_create  = #{gmtCreate,jdbcType=TIMESTAMP}
		 </if>
		<if test="gmtCreateStart !=  null and gmtCreateEnd!= null  ">
			and gmt_create between #{gmtCreateStart,jdbcType=TIMESTAMP} and #{gmtCreateEnd,jdbcType=TIMESTAMP}
		 </if>
		<if test="modifier !=  null and modifier !=  ''   "> and modifier  = #{modifier,jdbcType=VARCHAR} </if>
		<if test="sch_Modifier_ !=  null and sch_Modifier_ !=  ''   ">
			and modifier  like CONCAT(CONCAT('%',#{sch_Modifier_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_Modifier !=  null and sch_Modifier !=  ''   ">
			and modifier  like CONCAT('%',#{sch_Modifier,jdbcType=VARCHAR})
		 </if>
		<if test="schModifier_ !=  null and schModifier_ !=  ''   ">
			and modifier  like CONCAT(#{schModifier_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="modifierStart !=  null and modifierEnd!= null  ">
			and modifier between #{modifierStart,jdbcType=VARCHAR} and #{modifierEnd,jdbcType=VARCHAR}
		 </if>
		<if test="gmtModified !=  null  ">
			and gmt_modified  = #{gmtModified,jdbcType=TIMESTAMP}
		 </if>
		<if test="gmtModifiedStart !=  null and gmtModifiedEnd!= null  ">
			and gmt_modified between #{gmtModifiedStart,jdbcType=TIMESTAMP} and #{gmtModifiedEnd,jdbcType=TIMESTAMP}
		 </if>
		<if test="isDeleted !=  null  ">			and is_deleted  = #{isDeleted,jdbcType=INTEGER} </if>
		<if test="productId !=  null  ">			and product_id  = #{productId,jdbcType=INTEGER} </if>
		<if test="categoryId !=  null  ">			and category_id  = #{categoryId,jdbcType=INTEGER} </if>
		<if test="att1 !=  null and att1 !=  ''   "> and att1  = #{att1,jdbcType=VARCHAR} </if>
		<if test="sch_Att1_ !=  null and sch_Att1_ !=  ''   ">
			and att1  like CONCAT(CONCAT('%',#{sch_Att1_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_Att1 !=  null and sch_Att1 !=  ''   ">
			and att1  like CONCAT('%',#{sch_Att1,jdbcType=VARCHAR})
		 </if>
		<if test="schAtt1_ !=  null and schAtt1_ !=  ''   ">
			and att1  like CONCAT(#{schAtt1_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="att1Start !=  null and att1End!= null  ">
			and att1 between #{att1Start,jdbcType=VARCHAR} and #{att1End,jdbcType=VARCHAR}
		 </if>
		<if test="att2 !=  null and att2 !=  ''   "> and att2  = #{att2,jdbcType=VARCHAR} </if>
		<if test="sch_Att2_ !=  null and sch_Att2_ !=  ''   ">
			and att2  like CONCAT(CONCAT('%',#{sch_Att2_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_Att2 !=  null and sch_Att2 !=  ''   ">
			and att2  like CONCAT('%',#{sch_Att2,jdbcType=VARCHAR})
		 </if>
		<if test="schAtt2_ !=  null and schAtt2_ !=  ''   ">
			and att2  like CONCAT(#{schAtt2_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="att2Start !=  null and att2End!= null  ">
			and att2 between #{att2Start,jdbcType=VARCHAR} and #{att2End,jdbcType=VARCHAR}
		 </if>
		<if test="att3 !=  null and att3 !=  ''   "> and att3  = #{att3,jdbcType=VARCHAR} </if>
		<if test="sch_Att3_ !=  null and sch_Att3_ !=  ''   ">
			and att3  like CONCAT(CONCAT('%',#{sch_Att3_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_Att3 !=  null and sch_Att3 !=  ''   ">
			and att3  like CONCAT('%',#{sch_Att3,jdbcType=VARCHAR})
		 </if>
		<if test="schAtt3_ !=  null and schAtt3_ !=  ''   ">
			and att3  like CONCAT(#{schAtt3_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="att3Start !=  null and att3End!= null  ">
			and att3 between #{att3Start,jdbcType=VARCHAR} and #{att3End,jdbcType=VARCHAR}
		 </if>
		<if test="att4 !=  null and att4 !=  ''   "> and att4  = #{att4,jdbcType=VARCHAR} </if>
		<if test="sch_Att4_ !=  null and sch_Att4_ !=  ''   ">
			and att4  like CONCAT(CONCAT('%',#{sch_Att4_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_Att4 !=  null and sch_Att4 !=  ''   ">
			and att4  like CONCAT('%',#{sch_Att4,jdbcType=VARCHAR})
		 </if>
		<if test="schAtt4_ !=  null and schAtt4_ !=  ''   ">
			and att4  like CONCAT(#{schAtt4_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="att4Start !=  null and att4End!= null  ">
			and att4 between #{att4Start,jdbcType=VARCHAR} and #{att4End,jdbcType=VARCHAR}
		 </if>
		<if test="att5 !=  null and att5 !=  ''   "> and att5  = #{att5,jdbcType=VARCHAR} </if>
		<if test="sch_Att5_ !=  null and sch_Att5_ !=  ''   ">
			and att5  like CONCAT(CONCAT('%',#{sch_Att5_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_Att5 !=  null and sch_Att5 !=  ''   ">
			and att5  like CONCAT('%',#{sch_Att5,jdbcType=VARCHAR})
		 </if>
		<if test="schAtt5_ !=  null and schAtt5_ !=  ''   ">
			and att5  like CONCAT(#{schAtt5_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="att5Start !=  null and att5End!= null  ">
			and att5 between #{att5Start,jdbcType=VARCHAR} and #{att5End,jdbcType=VARCHAR}
		 </if>
		<if test="att6 !=  null and att6 !=  ''   "> and att6  = #{att6,jdbcType=VARCHAR} </if>
		<if test="sch_Att6_ !=  null and sch_Att6_ !=  ''   ">
			and att6  like CONCAT(CONCAT('%',#{sch_Att6_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_Att6 !=  null and sch_Att6 !=  ''   ">
			and att6  like CONCAT('%',#{sch_Att6,jdbcType=VARCHAR})
		 </if>
		<if test="schAtt6_ !=  null and schAtt6_ !=  ''   ">
			and att6  like CONCAT(#{schAtt6_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="att6Start !=  null and att6End!= null  ">
			and att6 between #{att6Start,jdbcType=VARCHAR} and #{att6End,jdbcType=VARCHAR}
		 </if>
		<if test="dateAtt1 !=  null  ">
			and date_att1  = #{dateAtt1,jdbcType=TIMESTAMP}
		 </if>
		<if test="dateAtt1Start !=  null and dateAtt1End!= null  ">
			and date_att1 between #{dateAtt1Start,jdbcType=TIMESTAMP} and #{dateAtt1End,jdbcType=TIMESTAMP}
		 </if>
		<if test="dateAtt2 !=  null  ">
			and date_att2  = #{dateAtt2,jdbcType=TIMESTAMP}
		 </if>
		<if test="dateAtt2Start !=  null and dateAtt2End!= null  ">
			and date_att2 between #{dateAtt2Start,jdbcType=TIMESTAMP} and #{dateAtt2End,jdbcType=TIMESTAMP}
		 </if>
		<if test="numAtt1 !=  null  ">			and num_att1  = #{numAtt1,jdbcType=INTEGER} </if>
		<if test="numAtt2 !=  null  ">			and num_att2  = #{numAtt2,jdbcType=INTEGER} </if>
		<if test="numAtt3 !=  null  ">			and num_att3  = #{numAtt3,jdbcType=DOUBLE} </if>
		<if test="numAtt4 !=  null  ">			and num_att4  = #{numAtt4,jdbcType=DOUBLE} </if>
		<if test="remark !=  null and remark !=  ''   "> and remark  = #{remark,jdbcType=VARCHAR} </if>		
		<if test="sch_Remark_ !=  null and sch_Remark_ !=  ''   ">
			and remark  like CONCAT(CONCAT('%',#{sch_Remark_,jdbcType=VARCHAR}),'%')
		 </if>		<if test="sch_Remark !=  null and sch_Remark !=  ''   ">
			and remark  like CONCAT('%',#{sch_Remark,jdbcType=VARCHAR})
		 </if>		<if test="schRemark_ !=  null and schRemark_ !=  ''   ">
			and remark  like CONCAT(#{schRemark_,jdbcType=VARCHAR},'%')
		 </if>		<if test="remarkStart !=  null and remarkEnd!= null  ">
			and remark between #{remarkStart,jdbcType=VARCHAR} and #{remarkEnd,jdbcType=VARCHAR}
		 </if>
		<if test="order != null and  order !=''  ">
			order by ${order} <if test="orderNum != null and  orderNum !='' ">${orderNum}</if>
		</if>
		<if test="orders != null and  orders !=''  ">  order by #{orders}</if>
		<if test="order == null and  orders == null ">  order by id desc</if>
		<if test="start !=-1 and limit !=-1"> LIMIT #{start}, #{limit}</if>
	</select>

    
	
    <!-- 根据产品编号和类目编号查询 -->
    <select id="findByPidAndCid" resultMap="AllResultMap"
		parameterType="java.util.Map">
		select 
		<include refid="All_Column_List" />
		from product_category_rel
		where 1=1
		and product_id = #{productId,jdbcType=INTEGER}
		and category_id = #{categoryId,jdbcType=INTEGER}
	</select>
	
	<!-- 根据产品ID删除关联信息 -->
	<delete id="deletedByProductId" parameterType="java.lang.Integer">
		delete from product_category_rel
		where product_id = #{productId,jdbcType=INTEGER}
	</delete>
	
	<!-- 根据分类编号查询产品 -->
    <select id="findCategoryProductIds" resultMap="AllResultMap"
		parameterType="java.lang.String">
		select 
		<include refid="All_Column_List" />
		from product_category_rel
		where category_id in (
		select pc.id FROM pro_category pc 
		where pc.long_code LIKE
		 CONCAT(CONCAT('%',#{longCode,jdbcType=VARCHAR}),'%'))
	</select>


	
	<!-- 分类关联产品搜索结果 -->
	<resultMap id="categoryProductSearchResultMap" type="com.nork.product.model.CategoryProductResult">
		<id column="product_id" property="productId" jdbcType="INTEGER"/>
		<result column="product_code" property="productCode" jdbcType="VARCHAR"/>
		<result column="product_name" property="productName" jdbcType="VARCHAR"/>
		<result column="category_id" property="categoryId" jdbcType="VARCHAR"/>
		<result column="category_name" property="categoryName" jdbcType="VARCHAR"/>
		<result column="pro_style_id" property="proStyleId" jdbcType="VARCHAR"/>
		<result column="color_id" property="colorId" jdbcType="VARCHAR"/>
		<result column="product_spec" property="productSpec" jdbcType="VARCHAR"/>
		<result column="product_width" property="productWidth" jdbcType="VARCHAR"/>
		<result column="product_height" property="productHeight" jdbcType="VARCHAR"/>
		<result column="sale_price" property="salePrice" jdbcType="VARCHAR"/>
		<result column="brand_id" property="brandId" jdbcType="INTEGER"/>
		<result column="brand_name" property="brandName" jdbcType="VARCHAR"/>
		<result column="pic_path" property="picPath" jdbcType="VARCHAR"/>
        <result column="collect_state" property="collectState" jdbcType="INTEGER"/>
		<result column="product_model_path" property="productModelPath" jdbcType="VARCHAR"/>
		<result column="material_pic_ids" property="materialPicId" jdbcType="VARCHAR"/>
		<result column="parent_id" property="parentId" jdbcType="INTEGER"/>
		<result column="product_count" property="productCount" jdbcType="INTEGER"/>
		<result column="order_type" property="orderType" jdbcType="INTEGER"/>
		<result column="product_small_type_value" property="productSmallTypeValue" jdbcType="INTEGER"/>
		<result column="colors_long_code" property="colorsLongCode" jdbcType="VARCHAR"/>
	</resultMap>

	<!-- 分类code和商品名称查询商品汇总 -->
	<select id="findProductByCategoryCodeCount" resultType="int" parameterType="com.nork.product.model.ProductCategoryRel">
	    SELECT count(DISTINCT(r.product_id))
	    FROM 
	    (

	    <if test="exceptRecommend == false">
				(SELECT t1.product_id
				FROM
				(SELECT prc.product_id,GROUP_CONCAT(pc.code) groupCode 
				FROM product_category_rel prc 
				LEFT JOIN pro_category pc ON pc.id = prc.category_id and prc.is_deleted = 0 
				GROUP BY prc.product_id) t1
				LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
				LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
				LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
<!-- 				<if test="designTempletId != null and designProductId != null ">
					RIGHT JOIN product_recommendation pr ON pr.product_id = bp.id
					AND pr.id IS NOT NULL
					AND pr.is_deleted = 0
					AND pr.templetProduct_id = #{designProductId,jdbcType=INTEGER}
					AND pr.design_templet_id = #{designTempletId,jdbcType=INTEGER}
				</if> -->
				WHERE bp.id IS NOT NULL
				AND   bp.is_deleted = 0
				<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
				<if test="isInternalUser != null and isInternalUser == 'yes'">
					<!-- AND   (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
					and bp.putaway_state in (1, 2, 3, 5)
				</if>
				<if test="isInternalUser == null or isInternalUser == ''">
<!-- 				以前已经上架显示，现在是已发布的显示 -->
<!-- 					AND  bp.putaway_state = 1 -->
						AND  bp.putaway_state in (1, 3, 5)
				</if>
				<if test="productName != null and productName != ''">
					AND bp.product_name LIKE CONCAT(CONCAT('%',#{productName,jdbcType=VARCHAR}),'%')
				</if>
				<if test="houseTypeValues != null and houseTypeValues != ''">
					and CONCAT(',', bp.house_type_values, ',') like CONCAT(CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR}),',%')
				</if>
				<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
					<foreach collection="categoryIdList" index="index" item="item">
						and FIND_IN_SET(#{item},t1.groupCode) > 0
					</foreach>
				</if>
				<if test="brandIds !=  null and  brandIds.size > 0  ">
					and bb.id in
					<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
						#{item}
					</foreach>
				</if>
				)

		</if>
		<if test="onlyShowRecommend == false and exceptRecommend == false">
			 union 
	    </if>
	     <if test="onlyShowRecommend == false ">
				(SELECT t1.product_id 
				 FROM
				 (SELECT prc.product_id,GROUP_CONCAT(pc.code) groupCode 
				FROM product_category_rel prc 
				LEFT JOIN pro_category pc ON pc.id = prc.category_id and prc.is_deleted = 0 
				GROUP BY prc.product_id) t1
				LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
				LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
				LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
				WHERE bp.id IS NOT NULL
				AND   bp.is_deleted = 0
				<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
				<if test="isInternalUser != null and isInternalUser == 'yes'">
					<!-- AND   (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
					and bp.putaway_state in (1, 2, 3, 5)
				</if>
				<if test="isInternalUser == null or isInternalUser == ''">
<!-- 				以前已经上架显示，现在是已发布的显示  -->
<!-- 					AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
				</if>
				<if test="productTypeValue != null and productTypeValue != '' and productSmallTypeValue != null"> 
				AND (
			    (   
			              
			               bp.spaceComon_id IS NOT NULL 
				  	 AND   bp.spaceComon_id = #{spaceCommonId,jdbcType=INTEGER}
					 AND   bp.bm_ids IS NOT NULL
					 AND   CONCAT(CONCAT(',',bp.bm_ids),',') like CONCAT(CONCAT(',',#{templateProductId,jdbcType=VARCHAR}),',')
					 AND   EXISTS(SELECT  1 FROM sys_dictionary a ,sys_dictionary b 
			         WHERE a.type ='productType' 
			         AND   a.value = #{productTypeValue,jdbcType=VARCHAR} 
			         AND   b.type = a.valuekey 
                     AND   b.value =#{productSmallTypeValue,jdbcType=INTEGER}
                     AND   b.att4= '1') 
				) or (
				
			         bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
			         AND EXISTS 
			         (SELECT  1 
			          FROM sys_dictionary a ,sys_dictionary b 
			          WHERE a.type ='productType' 
			          AND   a.value = #{productTypeValue,jdbcType=VARCHAR} 
			          AND   b.type =a.valuekey  
			          AND   b.value =  #{productSmallTypeValue,jdbcType=INTEGER}
			          AND   b.att4 = '2')      
				  )
				)
				 </if>
				<if test="productName != null and productName != ''">
					AND bp.product_name LIKE CONCAT(CONCAT('%',#{productName,jdbcType=VARCHAR}),'%')
				</if>
				<if test="houseTypeValues != null and houseTypeValues != ''">
					and CONCAT(',', bp.house_type_values, ',') like CONCAT(CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR}),',%')
				</if>
				<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
					<foreach collection="categoryIdList" index="index" item="item">
						and FIND_IN_SET(#{item},t1.groupCode) > 0
					</foreach>
				</if>
				<if test="brandIds !=  null and  brandIds.size > 0  ">
					and bb.id in
					<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
						#{item}
					</foreach>
				</if>
				)
		</if>
		) as r
		WHERE 1=1
<!-- 		<if test="productId != null and productId != ''"> -->
<!-- 			and r.product_id != #{productId,jdbcType=INTEGER} -->
<!-- 		</if> -->
		<!-- 如果该产品的大类在过滤范围内->则过滤品牌,产品id,小类 -->
		<!-- <if test="configTypeValueList !=  null and  configTypeValueList.size > 0  ">
			and if(
				((select huangsd.valuekey from sys_dictionary huangsd where huangsd.type="productType" and huangsd.value=(select huangbp.product_type_value from base_product huangbp where huangbp.id=product_id))
			in
			<foreach collection="configTypeValueList" index="index" item="item" open="(" separator="," close=")">
				#{item}
			</foreach>
			),(
				品牌
				<if test="configBrandIdList !=  null and  configBrandIdList.size > 0  ">
					(select huangbp2.brand_id from base_product huangbp2 where huangbp2.id=product_id) in
					<foreach collection="configBrandIdList" index="index" item="item" open="(" separator="," close=")">
						#{item}
					</foreach>
				</if>
				小类
				<if test="configSmallTypeIdList !=  null and  configSmallTypeIdList.size > 0  ">
					and (select huangsd2.id from sys_dictionary huangsd2 where huangsd2.type=(select huangsd.valuekey from sys_dictionary huangsd where huangsd.type="productType" and 
					huangsd.value=(select huangbp.product_type_value from base_product huangbp where huangbp.id=product_id)) and huangsd2.value=
					(select huangbp.product_small_type_value from base_product huangbp where huangbp.id=product_id)) in
					<foreach collection="configSmallTypeIdList" index="index" item="item" open="(" separator="," close=")">
						#{item}
					</foreach>
				</if>
				产品id
				<if test="configProductIdList !=  null and  configProductIdList.size > 0  ">
					 and product_id in
					<foreach collection="configProductIdList" index="index" item="item" open="(" separator="," close=")">
						#{item}
					</foreach>
				</if>
			),(1=1))
		</if> -->
	</select>
	
	<!-- ** 删除所有productId为:id的productCategoryRel** -->
	<delete id="deleteAllByProductId" parameterType="java.lang.Integer">
		delete from product_category_rel
		where product_id = #{id,jdbcType=INTEGER}
	</delete>
	
	<select id="findCategoryProductResultByLongCode" resultMap="categoryProductSearchResultMap"
			parameterType="com.nork.product.model.ProductCategoryRel">
	   SELECT DISTINCT
			 T.product_id,
			 T.product_code,
			 T.product_name,
			 T.brand_name,
			 T.sale_price,
			 T.pro_style_id,
			 T.color_id,
			 T.product_spec,
			 T.pic_path,
			 T.collectState,
			 T.material_pic_ids,
			 T.parent_id,
			 T.brand_id
		FROM (
		SELECT 
		r.product_id,r.product_code,r.product_name,r.brand_name,r.brand_id,r.sale_price,r.pro_style_id,r.color_id,r.product_spec,r.pic_path,r.collectState,r.material_pic_ids,
    r.parent_id
		FROM (
		<if test="exceptRecommend == false">
			(SELECT bb.id as brand_id,bp.id as product_id,bp.product_code,bp.product_name,bb.brand_name,bp.sale_price,bp.pro_style_id,bp.color_id,bp.product_spec,bp.material_pic_ids,
        bp.parent_id,rp.pic_path,
			CASE WHEN t2.id IS NOT NULL THEN 1 ELSE 0 END AS collectState , 1 as type
			FROM (select product_id from product_category_rel 
			where category_id in (select pc.id FROM pro_category pc where pc.is_deleted = 0 
			and pc.long_code LIKE CONCAT(CONCAT('%',#{categoryCode,jdbcType=VARCHAR}),'%'))) t1
			LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
			LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
			LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
			LEFT JOIN (SELECT upc.id,upc.product_id FROM user_product_collect upc WHERE  upc.is_deleted = 0
			<if test="userId != null and userId != ''">
				and upc.user_id = #{userId,jdbcType=INTEGER}
			</if>
			) t2 ON t2.product_id = bp.id
		<!-- 	<if test="designTempletId != null and designProductId != null and designProductId > 0">
				RIGHT JOIN product_recommendation pr ON pr.product_id = bp.id
				AND pr.id IS NOT NULL
				AND pr.is_deleted = 0
				AND pr.templetProduct_id = #{designProductId,jdbcType=INTEGER} -->
	<!-- 			  IN ( -->
	<!-- 			SELECT  dtp.id FROM design_templet_product dtp WHERE dtp.product_id =#{productId,jdbcType=INTEGER}  -->
	<!-- 			 AND dtp.design_templet_id = #{designTempletId,jdbcType=INTEGER} -->
	<!-- 			) -->
	<!-- 			AND pr.design_templet_id = #{designTempletId,jdbcType=INTEGER}
			</if> -->
			WHERE bp.id IS NOT NULL
			AND   bp.is_deleted = 0
			<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
			<if test="isInternalUser != null and isInternalUser == 'yes'">
				<!-- AND   (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
				and bp.putaway_state in (1, 2, 3, 5)
			</if>
			<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
			</if>
			<if test="houseTypeValues != null and houseTypeValues != ''">
				and CONCAT(',', bp.house_type_values, ',') like CONCAT(CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR}),',%')
			</if>
			<if test="brandIds !=  null and  brandIds.size > 0  ">
				and bb.id in
				<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<if test="designTempletId != null  and designProductId != null and designProductId > 0">
				ORDER BY CONVERT(pr.matching_degree,SIGNED) DESC
			</if>
			)

		</if>
		<!-- 同大类通过产品走，更精确通过产品白摸走，不同大类通过推荐走 -->
		<if test="onlyShowRecommend == false and exceptRecommend == false">
			 union 
	    </if>
	    <if test="onlyShowRecommend == false ">
			 (SELECT bb.id as brand_id,bp.id as product_id,bp.product_code,bp.product_name,bb.brand_name,
			 bp.sale_price,bp.pro_style_id,bp.color_id,bp.product_spec,bp.material_pic_ids,bp.parent_id,rp.pic_path,
			 CASE WHEN t2.id IS NOT NULL THEN 1 ELSE 0 END AS collectState 
			 <if test="productTypeValue != null and productTypeValue != '' and productSmallTypeValue != null"> 
			 , case 
				 when
				  (bp.spaceComon_id is not null or bp.designTemplet_id IS NOT NULL)
				 AND EXISTS
				 (SELECT 1  
				  FROM sys_dictionary a ,sys_dictionary b 
				  WHERE a.type='productType' 
				  AND a.value = #{productTypeValue,jdbcType=VARCHAR} 
				  AND a.valuekey = b.type 
				  AND b.value = #{productSmallTypeValue,jdbcType=INTEGER} 
				  AND b.att4 = '1')  
			     and  bp.bm_ids is not null
				 and  CONCAT(CONCAT(',',bp.bm_ids),',') like CONCAT(CONCAT(',',#{templateProductId,jdbcType=VARCHAR}),',')
				 then 21
				 when 
				 bp.bm_ids is not null
				 AND EXISTS 
				 (SELECT  1 
				 FROM sys_dictionary a ,sys_dictionary b 
				 WHERE a.type='productType' 
				 AND a.value = #{productTypeValue,jdbcType=VARCHAR} 
				 AND a.valuekey = b.type 
				 AND b.value = #{productSmallTypeValue,jdbcType=INTEGER} 
				 and b.att4 = '2')  
				 and CONCAT(CONCAT(',',bp.bm_ids),',') like CONCAT(CONCAT(',',#{templateProductId,jdbcType=VARCHAR}),',') 
				 then 22
				 when bp.product_small_type_value is not null and bp.product_small_type_value = #{productSmallTypeValue,jdbcType=INTEGER}
				 then 23
				 else 24 end as type
			</if>
			  <if test="productTypeValue == null or productTypeValue == '' or productSmallTypeValue == null"> 
			  ,2 as type
			  </if>	 
			 FROM (select product_id from product_category_rel 
			 where category_id in (select pc.id FROM pro_category pc where pc.is_deleted = 0 
			 and pc.long_code LIKE CONCAT(CONCAT('%',#{categoryCode,jdbcType=VARCHAR}),'%'))) t1
			LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
			LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
			LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
			LEFT JOIN (SELECT upc.id,upc.product_id FROM user_product_collect upc WHERE  upc.is_deleted = 0
			<if test="userId != null and userId != ''">
				and upc.user_id = #{userId,jdbcType=INTEGER}
			</if>
			) t2 ON t2.product_id = bp.id
			WHERE bp.id IS NOT NULL
			AND   bp.is_deleted = 0
			<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
			<if test="isInternalUser != null and isInternalUser == 'yes'">
				<!-- AND   (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
				and bp.putaway_state in (1, 2, 3, 5)
			</if>
			<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
			</if>
			<if test="productTypeValue != null and productTypeValue != '' and productSmallTypeValue != null"> 
			AND (
		    	(
			               (bp.spaceComon_id IS NOT NULL OR bp.designTemplet_id IS NOT NULL )
				  	 AND   (bp.spaceComon_id = #{spaceCommonId,jdbcType=INTEGER} or bp.designTemplet_id = #{designTempletId,jdbcType=INTEGER})
					 AND   bp.bm_ids IS NOT NULL
					 AND   CONCAT(CONCAT(',',bp.bm_ids),',') like CONCAT(CONCAT(',',#{templateProductId,jdbcType=VARCHAR}),',')
					 AND   EXISTS(SELECT  1 FROM sys_dictionary a ,sys_dictionary b 
			         WHERE a.type ='productType' 
			         AND   a.value = #{productTypeValue,jdbcType=VARCHAR} 
			         AND   b.type = a.valuekey 
                     AND   b.value =#{productSmallTypeValue,jdbcType=INTEGER}
                     AND   b.att4= '1') 
				) or (
					<if test="designTempletId != null and designTempletId > 0">
					 bp.designTemplet_id = #{designTempletId,jdbcType=INTEGER} AND	
					 </if>
			         bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
			         AND EXISTS 
			         (SELECT  1 
			          FROM sys_dictionary a ,sys_dictionary b 
			          WHERE a.type ='productType' 
			          AND   a.value = #{productTypeValue,jdbcType=VARCHAR} 
			          AND   b.type =a.valuekey  
			          AND   b.value =  #{productSmallTypeValue,jdbcType=INTEGER}
			          AND   b.att4 = '2')      
				  ) or(
				  	bp.bm_ids IS  NULL or bp.bm_ids = '0' 
				  	AND EXISTS 
			         (SELECT  1 
			          FROM sys_dictionary a ,sys_dictionary b 
			          WHERE a.type ='productType' 
			          AND   a.value = #{productTypeValue,jdbcType=VARCHAR} 
			          AND   b.type =a.valuekey  
			          AND   b.value =  #{productSmallTypeValue,jdbcType=INTEGER}
			          AND   b.att4 = '1') 
				  )
			)
			</if>
			<if test="houseTypeValues != null and houseTypeValues != ''">
				and CONCAT(',', bp.house_type_values, ',') like CONCAT(CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR}),',%')
			</if>
			<if test="brandIds !=  null and  brandIds.size > 0  ">
				and bb.id in
				<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			ORDER BY bp.product_type_value,bp.product_small_type_value)
		</if>
		) as r
		order by  r.type,r.product_id 
		) AS T
		LEFT JOIN base_product pro  ON T.product_id = pro.id and pro.is_deleted = 0
		WHERE 1=1
<!-- 		<if test="productId != null and productId != ''"> -->
<!-- 			and T.product_id != #{productId,jdbcType=INTEGER} -->
<!-- 		</if> -->
		<!-- 特殊分类处理，如果是特殊分类只显示它本身分类，不是则不显示该大类下所配置的所有分类 -->
		<if test="specialProductType != null and specialProductType != '' ">
			<if test="productSmallTypeKey != null and productSmallTypeKey != ''">
				AND FIND_IN_SET(pro.product_small_type_mark, #{productSmallTypeKey,jdbcType=VARCHAR})
			</if>
			<if test="productSmallTypeKey == null or productSmallTypeKey == ''">
				AND !FIND_IN_SET(pro.product_small_type_mark, #{specialProductType,jdbcType=VARCHAR})
			</if>
		</if>
		
		<if test="start !=-1 and limit !=-1"> LIMIT #{start}, #{limit}</if>
	</select>
	
	<select id="findBuildingHomeProductResult" resultMap="categoryProductSearchResultMap"
			parameterType="com.nork.product.model.ProductCategoryRel"> 
	    SELECT DISTINCT bp.brand_id,bp.id as product_id,bp.product_code,bp.product_name,bb.brand_name,bp.sale_price,
	    bp.pro_style_id,bp.color_id,bp.product_spec,bp.material_pic_ids,bp.parent_id,rp.pic_path,
			CASE WHEN t2.id IS NOT NULL THEN 1 ELSE 0 END AS collectState 
			FROM 
			<if test="categoryIdList ==  null or  categoryIdList.size == 0  ">
				(select product_id from product_category_rel 
				where category_id in (select pc.id FROM pro_category pc where pc.is_deleted = 0
				<choose>
					<when test="firstStageCode != null and firstStageCode != ''">
						and pc.first_stage_code = #{firstStageCode,jdbcType=VARCHAR}
					</when>
					<otherwise>
						<choose>
							<when test="secondStageCode != null and secondStageCode != ''">
								and pc.second_stage_code = #{secondStageCode,jdbcType=VARCHAR}
							</when>
							<otherwise>
								<choose>
									<when test="thirdStageCode != null and thirdStageCode != ''">
										and pc.third_stage_code = #{thirdStageCode,jdbcType=VARCHAR}
									</when>
									<otherwise>
										<choose>
											<when test="fourthStageCode != null and fourthStageCode != ''">
												and pc.fourth_stage_code = #{fourthStageCode,jdbcType=VARCHAR}
											</when>
											<otherwise>
												<choose>
													<when test="fifthStageCode != null and fifthStageCode != ''">
														and pc.fifth_stage_code = #{fifthStageCode,jdbcType=VARCHAR}
													</when>
													<otherwise>
														and pc.long_code LIKE CONCAT('%',#{categoryCode,jdbcType=VARCHAR},'%')
													</otherwise>
												</choose>
											</otherwise>
										</choose>
									</otherwise>
								</choose>
							</otherwise>
						</choose>
					</otherwise>
				</choose>
				)) t1
			</if>
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				(SELECT prc.product_id,GROUP_CONCAT(pc.code) groupCode FROM product_category_rel prc 
				LEFT JOIN pro_category pc ON pc.id = prc.category_id and prc.is_deleted =0 GROUP BY prc.product_id) t1
			</if>
			LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
			<if test="brandId != null  and brandId != ''">
				LEFT JOIN(
					SELECT
						bs.type,
						bs.valuekey,
						bs.VALUE,
						bs. NAME,
						bs.ordering
					FROM
						sys_dictionary bs
					WHERE
						bs.type = 'productType'
					ORDER BY
						bs.ordering
				) s1 ON bp.product_type_value = s1.VALUE
				LEFT JOIN sys_dictionary s2 ON s2.
				VALUE
					= bp.product_small_type_value
				AND s2.type = s1.valuekey
			</if>
			LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
			LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
			LEFT JOIN (SELECT upc.id,upc.product_id FROM user_product_collect upc WHERE  upc.is_deleted = 0
			<if test="userId != null and userId != ''">
				and upc.user_id = #{userId,jdbcType=INTEGER}
			</if>
			) t2 ON t2.product_id = bp.id
			WHERE bp.id IS NOT NULL
			AND   bp.is_deleted = 0
			AND  LOCATE('baimo',bp.product_code)=0
			<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
			<if test="isInternalUser != null and isInternalUser == 'yes'">
				<!-- AND   (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
				and bp.putaway_state in (1, 2, 3, 5)
			</if>
			<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1,3)
			</if>
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				<foreach collection="categoryIdList" index="index" item="item">
					and FIND_IN_SET(#{item},t1.groupCode) > 0
				</foreach>
			</if>
			<!-- <if test="brandIds !=  null and  brandIds.size > 0  ">
				and bb.id in
				<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if> -->
			<!-- 新过滤逻辑(品牌,大类,小类,产品idList) -->
			<if test="baseProduct !=  null and  baseProduct.size > 0  ">
				and (
				<foreach collection="baseProduct" index="index" item="item">
					<choose>
						<when test="index== 0">
							<choose>
								<when test="item.productIdList!=null and item.productIdList.size>0">
									(bp.id in
										 <foreach collection="item.productIdList" index="indexProductId" item="itemProductId" open="(" separator="," close=")">
										 	#{itemProductId}
										 </foreach>
									)
								</when>
								<otherwise>
									<!-- 品牌&&大小类 -->
									(<!-- 1=1  -->
									<if test="item.brandId != null and item.brandId != 0 ">
										<!-- and  -->bp.brand_id=#{item.brandId}
									</if>
									<if test="item.productTypeValue != null and item.productTypeValue != '' ">
										and bp.product_type_value=#{item.productTypeValue}
									</if>
									<if test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
										and bp.product_small_type_value=#{item.productSmallTypeValue}
									</if>
									)
									<!-- 品牌||大小类 -->
								</otherwise>
							</choose>
						</when>
						<otherwise>
							or 
							<choose>
								<when test="item.productIdList!=null and item.productIdList.size>0">
									(bp.id in
										 <foreach collection="item.productIdList" index="indexProductId" item="itemProductId" open="(" separator="," close=")">
										 	#{itemProductId}
										 </foreach>
									)
								</when>
								<otherwise>
									<!-- 品牌&&大小类 -->
									(<!-- 1=1  -->
									<if test="item.brandId != null and item.brandId != 0 ">
										<!-- and  -->bp.brand_id=#{item.brandId}
									</if>
									<if test="item.productTypeValue != null and item.productTypeValue != '' ">
										and bp.product_type_value=#{item.productTypeValue}
									</if>
									<if test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
										and bp.product_small_type_value=#{item.productSmallTypeValue}
									</if>
									)
									<!-- 品牌||大小类 -->
								</otherwise>
							</choose>
						</otherwise>
					</choose>

				</foreach>
				)
			</if>
			<!-- 新过滤逻辑(品牌,大类,小类,产品idList)->end -->
			<!-- 2016.10.16-黑名单分类list -->
			<if test="blacklistSet !=  null and  blacklistSet.size > 0  ">
				AND (SELECT  b.valuekey FROM sys_dictionary a ,sys_dictionary b 
			         WHERE a.type ='productType' 
			         AND   a.value = bp.product_type_value
			         AND   b.type = a.valuekey 
               AND   b.value = bp.product_small_type_value) not in 
				<foreach collection="blacklistSet" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<!-- 过滤同细分行业品牌 xiaoxc-20171120-->
			<if test="brandIndustryModelList != null and  brandIndustryModelList.size > 0 ">
				AND (
				<foreach collection="brandIndustryModelList" index="index" item="item" open="(" separator="or" close=")">
					<if test="item.brandId != null and item.brandId > 0">
						(bp.brand_id = #{item.brandId}
						<choose>
							<when test="item.authorizedProductIdList!=null and item.authorizedProductIdList.size>0">
								and (bp.id in
								<foreach collection="item.authorizedProductIdList" index="indexProductId"
										 item="itemProductId" open="(" separator="," close=")">
									#{itemProductId}
								</foreach>
								)
							</when>
							<otherwise>
								<if test="item.authorizedProductTypeValue != null and item.authorizedProductTypeValue != '' ">
									and bp.product_type_value=#{item.authorizedProductTypeValue}
								</if>
								<if test="item.authorizedProductSmallTypeValue != null and item.authorizedProductSmallTypeValue != '' ">
									and bp.product_small_type_value=#{item.authorizedProductSmallTypeValue}
								</if>
							</otherwise>
						</choose>
						)
					</if>
					<if test="item.nonBrandId != null and item.nonBrandId > 0">
						and bp.brand_id != #{item.nonBrandId}
					</if>
				</foreach>
				OR !(
				<foreach collection="brandIndustryModelList" index="index" item="item" open="(" separator="or" close=")">
					<if test="item.productSmallValueList != null and item.productSmallValueList.size > 0">
						<foreach collection="item.productSmallValueList" index="index" item="productValueItem" open="("
								 separator="or" close=")">
							(bp.product_type_value = ${productValueItem.bigTypeValue}
							and bp.product_small_type_value = ${productValueItem.smallTypeValue})
						</foreach>
					</if>
					<if test="item.nonBrandId != null and item.nonBrandId > 0">
						and bp.brand_id != #{item.nonBrandId}
					</if>
				</foreach>
				))
			</if>
			<if test="brandId != '' and brandId != null">
				and FIND_IN_SET(bb.id,#{brandId})
				AND s2.att3 != 'baimo'
				AND s2.valuekey IN (
					SELECT
						valueKey
					FROM
						sys_dictionary
					WHERE
						valuekey IN (
							SELECT
								CODE
							FROM
								pro_category
							WHERE
								FIND_IN_SET(
									id,
									(
										SELECT
											c.product_visibility_range
										FROM
											base_company c,
											sys_user s
										WHERE
											1 = 1
										AND (
											c.is_deleted = 0
											AND s.is_deleted = 0
											AND s.id = #{userId}
											AND s.business_administration_id = c.id
											AND s.user_type = 2
											AND c.business_type = 1
										)
										OR (
											c.is_deleted = 0
											AND s.is_deleted = 0
											AND s.id = #{userId}
											AND s.business_administration_id = c.id
											AND s.user_type = 3
											AND c.business_type = 2
										)
									)
								)
							AND LEVEL = 3
						)
				)
			</if>
		<if test="start !=-1 and limit !=-1"> LIMIT #{start}, #{limit}</if>
	</select>
	
	<select id="findBuildingHomeProductCount" resultType="int" parameterType="com.nork.product.model.ProductCategoryRel">
	      SELECT COUNT(T.product_id) FROM 
	 	  (SELECT DISTINCT  bp.id AS product_id FROM 
			<if test="categoryIdList ==  null or  categoryIdList.size == 0  ">
				(select product_id from product_category_rel 
				where category_id in
				(
				select pc.id FROM pro_category pc where pc.is_deleted = 0
				<choose>
					<when test="firstStageCode != null and firstStageCode != ''">
						and pc.first_stage_code = #{firstStageCode,jdbcType=VARCHAR}
					</when>
					<otherwise>
						<choose>
							<when test="secondStageCode != null and secondStageCode != ''">
								and pc.second_stage_code = #{secondStageCode,jdbcType=VARCHAR}
							</when>
							<otherwise>
								<choose>
									<when test="thirdStageCode != null and thirdStageCode != ''">
										and pc.third_stage_code = #{thirdStageCode,jdbcType=VARCHAR}
									</when>
									<otherwise>
										<choose>
											<when test="fourthStageCode != null and fourthStageCode != ''">
												and pc.fourth_stage_code = #{fourthStageCode,jdbcType=VARCHAR}
											</when>
											<otherwise>
												<choose>
													<when test="fifthStageCode != null and fifthStageCode != ''">
														and pc.fifth_stage_code = #{fifthStageCode,jdbcType=VARCHAR}
													</when>
													<otherwise>
														and pc.long_code LIKE CONCAT('%',#{categoryCode,jdbcType=VARCHAR},'%')
													</otherwise>
												</choose>
											</otherwise>
										</choose>
									</otherwise>
								</choose>
							</otherwise>
						</choose>
					</otherwise>
				</choose>
				)) t1
			</if>
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				(SELECT prc.product_id,GROUP_CONCAT(pc.code) groupCode FROM product_category_rel prc 
				LEFT JOIN pro_category pc ON pc.id = prc.category_id and prc.is_deleted =0 GROUP BY prc.product_id) t1
			</if>
			LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
			<if test="brandId != '' and brandId != null">
				LEFT JOIN(
					SELECT
						bs.type,
						bs.valuekey,
						bs.VALUE,
						bs. NAME,
						bs.ordering
					FROM
						sys_dictionary bs
					WHERE
						bs.type = 'productType'
					ORDER BY
						bs.ordering
				) s1 ON bp.product_type_value = s1.VALUE
				LEFT JOIN sys_dictionary s2 ON s2.
				VALUE
					= bp.product_small_type_value
				AND s2.type = s1.valuekey
			</if>
			WHERE bp.id IS NOT NULL
			AND   bp.is_deleted = 0
			AND  LOCATE('baimo',bp.product_code) = 0
			<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
			<if test="isInternalUser != null and isInternalUser == 'yes'">
				and bp.putaway_state in (1, 2, 3, 5)
			</if>
			<if test="isInternalUser == null or isInternalUser == ''">
					AND  bp.putaway_state in (1, 3, 5)
			</if>
			<if test="houseTypeValues != null and houseTypeValues != ''">
				and CONCAT(',', bp.house_type_values, ',') like CONCAT(CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR}),',%')
			</if>
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				<foreach collection="categoryIdList" index="index" item="item">
					and FIND_IN_SET(#{item},t1.groupCode) > 0
				</foreach>
			</if>
			<!-- <if test="brandIds !=  null and  brandIds.size > 0  ">
				and bb.id in
				<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>  -->
			<!-- 新过滤逻辑(品牌,大类,小类,产品idList) -->
			<if test="baseProduct !=  null and  baseProduct.size > 0  ">
				and (
				<foreach collection="baseProduct" index="index" item="item">
					<choose>
						<when test="index== 0">
							<choose>
								<when test="item.productIdList!=null and item.productIdList.size>0">
									(bp.id in
										 <foreach collection="item.productIdList" index="indexProductId" item="itemProductId" open="(" separator="," close=")">
										 	#{itemProductId}
										 </foreach>
									)
								</when>
								<otherwise>
									<!-- 品牌&&大小类 -->
									(<!-- 1=1  -->
									<if test="item.brandId != null and item.brandId != 0 ">
										<!-- and  -->bp.brand_id=#{item.brandId}
									</if>
									<if test="item.productTypeValue != null and item.productTypeValue != '' ">
										and bp.product_type_value=#{item.productTypeValue}
									</if>
									<if test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
										and bp.product_small_type_value=#{item.productSmallTypeValue}
									</if>
									)
									<!-- 品牌||大小类 -->
								</otherwise>
							</choose>
						</when>
						<otherwise>
							or 
							<choose>
								<when test="item.productIdList!=null and item.productIdList.size>0">
									(bp.id in
										 <foreach collection="item.productIdList" index="indexProductId" item="itemProductId" open="(" separator="," close=")">
										 	#{itemProductId}
										 </foreach>
									)
								</when>
								<otherwise>
									<!-- 品牌&&大小类 -->
									(<!-- 1=1  -->
									<if test="item.brandId != null and item.brandId != 0 ">
										<!-- and  -->bp.brand_id=#{item.brandId}
									</if>
									<if test="item.productTypeValue != null and item.productTypeValue != '' ">
										and bp.product_type_value=#{item.productTypeValue}
									</if>
									<if test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
										and bp.product_small_type_value=#{item.productSmallTypeValue}
									</if>
									)
									<!-- 品牌||大小类 -->
								</otherwise>
							</choose>
						</otherwise>
					</choose>

				</foreach>
				)
			</if>
			<!-- 新过滤逻辑(品牌,大类,小类,产品idList)->end -->
			<if test="blacklistSet !=  null and  blacklistSet.size > 0  ">
				AND (SELECT  b.valuekey FROM sys_dictionary a ,sys_dictionary b 
			         WHERE a.type ='productType' 
			         AND   a.value = bp.product_type_value
			         AND   b.type = a.valuekey 
               AND   b.value = bp.product_small_type_value) not in 
				<foreach collection="blacklistSet" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<!-- 过滤同细分行业品牌 xiaoxc-20171120-->
			<if test="brandIndustryModelList != null and  brandIndustryModelList.size > 0 ">
				AND (
				<foreach collection="brandIndustryModelList" index="index" item="item" open="(" separator="or" close=")">
					<if test="item.brandId != null and item.brandId > 0">
							(bp.brand_id = #{item.brandId}
						<choose>
							<when test="item.authorizedProductIdList!=null and item.authorizedProductIdList.size>0">
								(bp.id in
								<foreach collection="item.authorizedProductIdList" index="indexProductId"
										 item="itemProductId" open="(" separator="," close=")">
									#{itemProductId}
								</foreach>
								)
							</when>
							<otherwise>
								<if test="item.authorizedProductTypeValue != null and item.authorizedProductTypeValue != '' ">
									and bp.product_type_value=#{item.authorizedProductTypeValue}
								</if>
								<if test="item.authorizedProductSmallTypeValue != null and item.authorizedProductSmallTypeValue != '' ">
									and bp.product_small_type_value=#{item.authorizedProductSmallTypeValue}
								</if>
							</otherwise>
						</choose>
						)
					</if>
					<if test="item.nonBrandId != null and item.nonBrandId > 0">
						and bp.brand_id != #{item.nonBrandId}
					</if>
				</foreach>
				OR !(
				<foreach collection="brandIndustryModelList" index="index" item="item" open="(" separator="or" close=")">
					<if test="item.productSmallValueList != null and item.productSmallValueList.size > 0">
						<foreach collection="item.productSmallValueList" index="index" item="productValueItem" open="("
								 separator="or" close=")">
							(bp.product_type_value = ${productValueItem.bigTypeValue}
							and bp.product_small_type_value = ${productValueItem.smallTypeValue})
						</foreach>
					</if>
					<if test="item.nonBrandId != null and item.nonBrandId > 0">
						and bp.brand_id != #{item.nonBrandId}
					</if>
				</foreach>
				))
			</if>
			<if test="brandId != '' and brandId != null">
				and FIND_IN_SET(bp.brand_id,#{brandId})
				AND s2.att3 != 'baimo'
						AND s2.valuekey IN (
							SELECT
								valueKey
							FROM
								sys_dictionary
							WHERE
								valuekey IN (
									SELECT
										CODE
									FROM
										pro_category
									WHERE
										FIND_IN_SET(
											id,
											(
												SELECT
													c.product_visibility_range
												FROM
													base_company c,
													sys_user s
												WHERE
													1 = 1
												AND (
													c.is_deleted = 0
													AND s.is_deleted = 0
													AND s.id = #{userId}
													AND s.business_administration_id = c.id
													AND s.user_type = 2
													AND c.business_type = 1
												)
												OR (
													c.is_deleted = 0
													AND s.is_deleted = 0
													AND s.id = #{userId}
													AND s.business_administration_id = c.id
													AND s.user_type = 3
													AND c.business_type = 2
												)
											)
										)
									AND LEVEL = 3
								)
						)
			</if>
			) T 
	</select>
	
	<select id="findCustomizedCategoryProductResult" resultMap="categoryProductSearchResultMap"
			parameterType="com.nork.product.model.ProductCategoryRel">
			SELECT DISTINCT
			 T.product_id,
			 T.product_code,
			 T.pic_path,
			 T.collectState,
			 T.material_pic_ids,
			 T.parent_id,
			 T.order_type,
			 T.colors_long_code,
			 T.product_small_type_value
			 /*CASE WHEN C.product_id IS NOT NULL THEN C.count else 0 end as product_count*/
			FROM (
			(SELECT bp.id as product_id,bp.product_code,bp.parent_id,rp.pic_path,bp.material_pic_ids,bp.colors_long_code,
			bp.product_small_type_value,
			 CASE WHEN t2.id IS NOT NULL THEN 1 ELSE 0 END AS collectState,
			 CASE WHEN bp.designTemplet_id IS NOT NULL AND bp.designTemplet_id != 0 THEN 2 
			 WHEN bp.spaceComon_id IS NOT NULL AND bp.spaceComon_id != 0 THEN 3 
			 <!-- 推荐排序 -->
			 <!-- <if test="designTempletId != null and designProductId != null and designProductId > 0">
				 WHEN t3.product_id IS NOT NULL THEN 4
			 </if> -->
		<!-- 	 <if test="designTempletId != null and designProductId != null and designProductId > 0">
				 WHEN 1 THEN 4
			 </if>  -->
			 WHEN bp.id IS NOT NULL THEN 5
			 ELSE 6 END AS order_type
			 FROM 
			 <if test="categoryIdList ==  null or  categoryIdList.size == 0  ">
				(select product_id from product_category_rel 
				where category_id in (select pc.id FROM pro_category pc where pc.is_deleted = 0 
				and pc.long_code LIKE CONCAT(CONCAT('%',#{categoryCode,jdbcType=VARCHAR}),'%'))) t1
			</if>
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				(SELECT prc.product_id,GROUP_CONCAT(pc.code) groupCode FROM product_category_rel prc 
				LEFT JOIN pro_category pc ON pc.id = prc.category_id and prc.is_deleted =0 GROUP BY prc.product_id) t1
			</if>
			 LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
			 LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
			 LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
			 LEFT JOIN (SELECT upc.id,upc.product_id FROM user_product_collect upc WHERE  upc.is_deleted = 0
			<if test="userId != null and userId != ''">
				and upc.user_id = #{userId,jdbcType=INTEGER}
			</if>
			) t2 ON t2.product_id = bp.id 
			<!-- 产品属性排序 -->
			<!-- <if test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
				LEFT JOIN (
					SELECT id AS product_id FROM (
					<foreach collection="attributeConditionList" index="index" item="item" open="" separator="UNION ALL" close="">
						select pa.product_id as id from product_attribute pa
						LEFT JOIN product_props pp ON pp.id = pa.attribute_value_id
						WHERE 1=1
						and ${item}
					</foreach>
					) products group by products.id having count(products.id) = #{attributeConditionSize,jdbcType=INTEGER}
				) t4 ON t4.product_id = bp.id
			</if> -->
			<!-- 产品属性过滤 -->
			<if test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
				RIGHT JOIN (
					SELECT id AS product_id FROM (
					<foreach collection="attributeConditionList" index="index" item="item" open="" separator="UNION ALL" close="">
						select pa.product_id AS id from product_attribute pa
						LEFT JOIN product_props pp ON pp.id = pa.attribute_value_id
						WHERE 1=1
						and ${item}
					</foreach>
					) products group by products.id having count(products.id) &gt;= #{attributeConditionSize,jdbcType=INTEGER}
				) t4 ON t4.product_id = bp.id
			</if>
			<!-- 查询推荐产品 -->
<!-- 			<if test="designTempletId != null and designProductId != null and designProductId > 0">
				LEFT JOIN (SELECT pr.matching_degree,pr.product_id FROM product_recommendation pr
				WHERE pr.id IS NOT NULL
				AND pr.is_deleted = 0
				AND pr.templetProduct_id = #{designProductId,jdbcType=INTEGER}
				AND pr.design_templet_id = #{designTempletId,jdbcType=INTEGER}
				) t3 ON bp.id = t3.product_id
 			</if> -->
			WHERE bp.id IS NOT NULL
			AND   bp.is_deleted = 0
			<!-- 定制产品白模Id 或 绑定点白模Ids过滤-->
			<if test="templateProductId !=  null and  templateProductId.size > 0  ">
				and bp.bm_ids in
				<foreach collection="templateProductId" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			AND (bp.spaceComon_id = #{spaceCommonId,jdbcType=INTEGER} or bp.designTemplet_id = #{designTempletId,jdbcType=INTEGER})
			<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
			<if test="isInternalUser != null and isInternalUser == 'yes'">
				<!-- AND   (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
				and bp.putaway_state in (1, 2, 3, 5)
			</if>
			<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
			</if>
			<!-- 房型归属 -->
			<!-- <if test="houseTypeValues != null and houseTypeValues != ''">
				and CONCAT(',', bp.house_type_values, ',') like CONCAT(CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR}),',%')
			</if> -->
			<if test="houseTypeList !=  null and  houseTypeList.size > 0  ">
				and (
				<foreach collection="houseTypeList" index="index" item="item">
					<choose>
						<when test="index== 0">
							CONCAT(',', bp.house_type_values, ',') like CONCAT('%,',#{item,jdbcType=VARCHAR},',%')
						</when>
						<otherwise>
							or CONCAT(',', bp.house_type_values, ',') like CONCAT('%,',#{item,jdbcType=VARCHAR},',%')
						</otherwise>
					</choose>
				</foreach>
				)
			</if>
			<!-- 产品大类 -->
			<if test="productTypeValue != null and productTypeValue != ''">
				and bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
				<!--同类型新增产品不显示只显示主产品-->
				AND ( bp.parent_id IS NULL OR bp.parent_id = bp.id )
			</if>
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				<foreach collection="categoryIdList" index="index" item="item">
					and FIND_IN_SET(#{item},t1.groupCode) > 0
				</foreach>
			</if>
			<!-- b2b用户授权码品牌过滤 -->
			<!-- <if test="brandIds !=  null and  brandIds.size > 0  ">
				and bb.id in
				<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if> -->
			<!-- 新过滤逻辑(品牌,大类,小类,产品idList) -->
			<if test="baseProduct !=  null and  baseProduct.size > 0  ">
				and (
				<foreach collection="baseProduct" index="index" item="item">
					<choose>
						<when test="index== 0">
							<choose>
								<when test="item.productIdList!=null and item.productIdList.size>0">
									(bp.id in
										 <foreach collection="item.productIdList" index="indexProductId" item="itemProductId" open="(" separator="," close=")">
										 	#{itemProductId}
										 </foreach>
									)
								</when>
								<otherwise>
									<!-- 品牌&&大小类 -->
									(<!-- 1=1  -->
									<if test="item.brandId != null and item.brandId != 0 ">
										<!-- and  -->bp.brand_id=#{item.brandId}
									</if>
									<if test="item.productTypeValue != null and item.productTypeValue != '' ">
										and bp.product_type_value=#{item.productTypeValue}
									</if>
									<if test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
										and bp.product_small_type_value=#{item.productSmallTypeValue}
									</if>
									)
									<!-- 品牌||大小类 -->
								</otherwise>
							</choose>
						</when>
						<otherwise>
							or 
							<choose>
								<when test="item.productIdList!=null and item.productIdList.size>0">
									(bp.id in
										 <foreach collection="item.productIdList" index="indexProductId" item="itemProductId" open="(" separator="," close=")">
										 	#{itemProductId}
										 </foreach>
									)
								</when>
								<otherwise>
									<!-- 品牌&&大小类 -->
									(<!-- 1=1  -->
									<if test="item.brandId != null and item.brandId != 0 ">
										<!-- and  -->bp.brand_id=#{item.brandId}
									</if>
									<if test="item.productTypeValue != null and item.productTypeValue != '' ">
										and bp.product_type_value=#{item.productTypeValue}
									</if>
									<if test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
										and bp.product_small_type_value=#{item.productSmallTypeValue}
									</if>
									)
									<!-- 品牌||大小类 -->
								</otherwise>
							</choose>
						</otherwise>
					</choose>

				</foreach>
				)
			</if>
			<!-- 新过滤逻辑(品牌,大类,小类,产品idList)->end -->
<!-- 		<if test="productId != null and productId != ''"> -->
<!-- 			and T.product_id != #{productId,jdbcType=INTEGER} -->
<!-- 		</if> -->

			<!-- 20170413add -->
			<!-- 特殊分类处理，如果是特殊分类只显示它本身分类，不是则不显示该大类下所配置的所有分类 -->
			<if test="specialProductType != null and specialProductType != '' ">
				<!-- <if test="productSmallTypeKey != null and productSmallTypeKey != ''">
					AND FIND_IN_SET(bp.product_small_type_mark,
					#{productSmallTypeKey,jdbcType=VARCHAR})
				</if> -->
				<!-- 支持根据配置显示多个小类 -->
				<if test="productSmallTypeKey != null and productSmallTypeKey != ''">
					AND 
					(
					<choose>
						<when test="smallTypeList != null and smallTypeList.size > 0">
							<foreach collection="smallTypeList" item="item" separator=" or ">
								 FIND_IN_SET(bp.product_small_type_mark, #{item,jdbcType=VARCHAR})
							</foreach>
						</when>
						<otherwise>
							FIND_IN_SET(bp.product_small_type_mark, #{productSmallTypeKey,jdbcType=VARCHAR})
						</otherwise>
					</choose>
					)
				</if>
				<if test="productSmallTypeKey == null or productSmallTypeKey == ''">
					AND !FIND_IN_SET(bp.product_small_type_mark,
					#{specialProductType,jdbcType=VARCHAR})
				</if>
			</if>

			<!-- 黑名单过滤 -->
			<if test="blacklistSet !=  null and  blacklistSet.size > 0  ">
				AND (SELECT  b.valuekey FROM sys_dictionary a ,sys_dictionary b 
			         WHERE a.type ='productType' 
			         AND   a.value = bp.product_type_value
			         AND   b.type = a.valuekey 
               		 AND   b.value = bp.product_small_type_value) not in 
				<foreach collection="blacklistSet" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<!-- 产品型号过滤 -->
			<if test="productModelNumber != null and productModelNumber != '' ">
				AND  (bp.product_model_number like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
				      or bp.product_code like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
					  OR bb.brand_name LIKE CONCAT(CONCAT('%', #{productModelNumber,jdbcType=VARCHAR}), '%')
					 )
			</if>
			)
		<!-- 通用背景墙过滤长度 -->
		<if test="showBgWall == true">
			UNION 
			(SELECT DISTINCT bp.id as product_id,bp.product_code,bp.parent_id,rp.pic_path,bp.material_pic_ids,bp.colors_long_code,
			bp.product_small_type_value,
			CASE WHEN t2.id IS NOT NULL THEN 1 ELSE 0 END AS collectState,
			CASE
			 WHEN bp.id IS NOT NULL THEN 8
			 ELSE 9 END AS order_type
			<!-- 推荐排序 -->
			<!-- <if test="designTempletId != null and designProductId != null and designProductId > 0">
				 WHEN t3.product_id IS NOT NULL THEN 14
			</if> 
			属性排序
			<if test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
			 	WHEN t4.product_id IS NOT NULL THEN 15 
			 </if> -->
			FROM  
			<if test="categoryIdList ==  null or  categoryIdList.size == 0  ">
				(select product_id from product_category_rel 
				where category_id in (select pc.id FROM pro_category pc where pc.is_deleted = 0 
				and pc.long_code LIKE CONCAT(CONCAT('%',#{categoryCode,jdbcType=VARCHAR}),'%'))) t1
			</if>
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				(SELECT prc.product_id,GROUP_CONCAT(pc.code) groupCode FROM product_category_rel prc 
				LEFT JOIN pro_category pc ON pc.id = prc.category_id and prc.is_deleted =0 GROUP BY prc.product_id) t1
			</if>
			LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
			LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
			LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
			LEFT JOIN (SELECT upc.id,upc.product_id FROM user_product_collect upc WHERE  upc.is_deleted = 0
			<if test="userId != null and userId != ''">
				and upc.user_id = #{userId,jdbcType=INTEGER}
			</if>
			) t2 ON t2.product_id = bp.id
			<!-- 产品属性排序 -->
			<!-- <if test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
				LEFT JOIN (
					SELECT id AS product_id FROM (
					<foreach collection="attributeConditionList" index="index" item="item" open="" separator="UNION ALL" close="">
						select pa.product_id AS id from product_attribute pa
						LEFT JOIN product_props pp ON pp.id = pa.attribute_value_id
						WHERE 1=1
						and ${item}
					</foreach>
					) products group by products.id having count(products.id) = #{attributeConditionSize,jdbcType=INTEGER}
				) t4 ON t4.product_id = bp.id
			</if> -->
			<!-- 产品属性过滤 -->
			<if test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
				RIGHT JOIN (
					SELECT id AS product_id FROM (
					<foreach collection="attributeConditionList" index="index" item="item" open="" separator="UNION ALL" close="">
						select pa.product_id AS id from product_attribute pa
						LEFT JOIN product_props pp ON pp.id = pa.attribute_value_id
						WHERE 1=1
						and ${item}
					</foreach>
					) products group by products.id having count(products.id) &gt;= #{attributeConditionSize,jdbcType=INTEGER}
				) t4 ON t4.product_id = bp.id
			</if>
			<!-- 产品使用量排序 -->
			<!-- LEFT JOIN (SELECT puc.count,puc.product_id FROM product_usage_count puc WHERE puc.is_deleted = 0
			<if test="userId != null and userId != ''">
			  and puc.user_id = #{userId,jdbcType=INTEGER} 
			</if>
			) t5 ON  t5.product_id = bp.id -->
        	<!-- 查询推荐产品 -->
			<!-- <if test="designTempletId != null and designProductId != null and designProductId > 0">
				LEFT JOIN (SELECT pr.matching_degree,pr.product_id FROM product_recommendation pr 
				WHERE pr.id IS NOT NULL
				AND pr.is_deleted = 0
				AND pr.templetProduct_id = #{designProductId,jdbcType=INTEGER}
				AND pr.design_templet_id = #{designTempletId,jdbcType=INTEGER}
				) t3 ON bp.id = t3.product_id
 			</if> -->
			WHERE bp.id IS NOT NULL
			AND   bp.is_deleted = 0
			AND  LOCATE('baimo',bp.product_code)=0
			<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
			<if test="isInternalUser != null and isInternalUser == 'yes'">
				<!-- AND   (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
				and bp.putaway_state in (1, 2, 3, 5)
			</if>
			<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
			</if>
			<!-- 房型归属过滤 -->
			<if test="houseTypeValues != null and houseTypeValues != ''">
				and CONCAT(',', bp.house_type_values, ',') like CONCAT(CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR}),',%')
			</if>
			<!-- 产品大类过滤 -->
			<if test="productTypeValue != null and productTypeValue != 0 ">
				and bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
				<!--diy分类搜索过滤同类型新增产品只显示主产品-->
				AND ( bp.parent_id IS NULL OR bp.parent_id = bp.id)
				AND bp.bm_ids IS NULL
			</if>
			<!-- 产品小类过滤 -->
			<!-- <if test="productSmallTypeValue != null and productSmallTypeValue != 0">
				and bp.product_small_type_value = #{productSmallTypeValue,jdbcType=INTEGER}
			</if> -->
			<!-- 支持根据配置搜索多个指定小类 created by huangsongbo -->
			<choose>
				<when test="smallTypeValueList != null and smallTypeValueList.size > 0">
					and bp.product_small_type_value in 
					<foreach collection="smallTypeValueList" item="smallTypeValueListItem" open="(" close=")" separator=",">
						#{smallTypeValueListItem,jdbcType=INTEGER}
					</foreach>
				</when>
				<otherwise>
					<if test="productSmallTypeValue != null and productSmallTypeValue != 0">
						and bp.product_small_type_value = #{productSmallTypeValue,jdbcType=INTEGER}
					</if>
				</otherwise>
			</choose>
			
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				<foreach collection="categoryIdList" index="index" item="item">
					and FIND_IN_SET(#{item},t1.groupCode) > 0
				</foreach>
			</if>
			<if test="brandIds !=  null and  brandIds.size > 0  ">
				and bb.id in
				<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
<!-- 		<if test="productId != null and productId != ''"> -->
<!-- 			and T.product_id != #{productId,jdbcType=INTEGER} -->
<!-- 		</if> -->

			<!-- 20170413add -->
			<!-- 特殊分类处理，如果是特殊分类只显示它本身分类，不是则不显示该大类下所配置的所有分类 -->
			<!--<if test="specialProductType != null and specialProductType != '' ">-->
				<!--<if test="productSmallTypeKey != null and productSmallTypeKey != ''">-->
					<!--AND FIND_IN_SET(bp.product_small_type_mark,-->
					<!--#{productSmallTypeKey,jdbcType=VARCHAR})-->
				<!--</if>-->
				<!--<if test="productSmallTypeKey == null or productSmallTypeKey == ''">-->
					<!--AND !FIND_IN_SET(bp.product_small_type_mark,-->
					<!--#{specialProductType,jdbcType=VARCHAR})-->
				<!--</if>-->
			<!--</if>-->

			<!-- 2016.10.16-黑名单分类list -->
			<if test="blacklistSet !=  null and  blacklistSet.size > 0  ">
				AND (SELECT  b.valuekey FROM sys_dictionary a ,sys_dictionary b 
			         WHERE a.type ='productType' 
			         AND   a.value = bp.product_type_value
			         AND   b.type = a.valuekey 
               AND   b.value = bp.product_small_type_value) not in 
				<foreach collection="blacklistSet" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<!-- 产品型号过滤 -->
			<if test="productModelNumber != null and productModelNumber != '' ">
				AND  (bp.product_model_number like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
				      or bp.product_code like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
					  OR bb.brand_name LIKE CONCAT(CONCAT('%', #{productModelNumber,jdbcType=VARCHAR}), '%')
					 )
			</if>
			<if test="isBeijing == true">
				<!-- 过滤背景墙产品长度 -->
				<if test="startLength != null and endLength != null">
					AND  bp.product_length between #{startLength,jdbcType=INTEGER} and #{endLength,jdbcType=INTEGER}
				</if>
				<!-- 过滤背景墙产品高度 -->
				<if test="bgWallHeight != null and bgWallHeight != ''">
					<choose>
						<when test="bgWallHeight == '30' or bgWallHeight == '50'">
							AND  (bp.product_height = #{bgWallHeight,jdbcType=INTEGER})
						</when>
						<otherwise>
							AND  (bp.product_height = #{bgWallHeight,jdbcType=INTEGER} or (bp.product_height &lt; 230 and bp.product_height &gt; 50))
						</otherwise>
					</choose>
				</if>
			</if>
			<!--背景墙、窗帘、一字淋浴屏过滤长高-->
			<if test="isStretch == true">
				<if test="bgWallHeight != null">
					and  bp.product_height = #{bgWallHeight,jdbcType=INTEGER}
				</if>
				<if test="startLength != null and endLength != null">
					and bp.product_length between #{startLength,jdbcType=INTEGER} and #{endLength,jdbcType=INTEGER}
				</if>	
			</if>
			<!-- 背景墙白模长高为空，则不显示背景墙产品 -->
			<if test="isValue == true"> and bp.id = -1</if>
			)
		</if>
		) as T 
		 <!--LEFT JOIN (SELECT puc.count,puc.product_id FROM product_usage_count puc  WHERE 1=1
         <if test="userId != null and userId != ''">
			AND puc.user_id = #{userId,jdbcType=INTEGER}
		</if>
         AND puc.is_deleted = 0) C ON T.product_id = C.product_id
		GROUP BY T.product_id-->
		 order by 
		 T.product_id  
<!-- 		<if test="start !=-1 and limit !=-1"> LIMIT #{start}, #{limit}</if> -->
	</select>
	
	<select id="findCustomizedCategoryProductResultCount" resultType="int" parameterType="com.nork.product.model.ProductCategoryRel">
	 	SELECT count(DISTINCT(T.product_id))  FROM (
			(SELECT bp.id as product_id FROM 
			<if test="categoryIdList ==  null or  categoryIdList.size == 0  ">
				(select product_id from product_category_rel 
				where category_id in (select pc.id FROM pro_category pc where pc.is_deleted = 0 
				and pc.long_code LIKE CONCAT(CONCAT('%',#{categoryCode,jdbcType=VARCHAR}),'%'))) t1
			</if>
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				(SELECT prc.product_id,GROUP_CONCAT(pc.code) groupCode FROM product_category_rel prc 
				LEFT JOIN pro_category pc ON pc.id = prc.category_id and prc.is_deleted =0 GROUP BY prc.product_id) t1
			</if>
			 LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
			 LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
			 LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
			 <!-- 产品属性过滤 -->
			<if test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
				RIGHT JOIN (
					SELECT id AS product_id FROM (
					<foreach collection="attributeConditionList" index="index" item="item" open="" separator="UNION ALL" close="">
						select pa.product_id AS id from product_attribute pa
						LEFT JOIN product_props pp ON pp.id = pa.attribute_value_id
						WHERE 1=1
						and ${item}
					</foreach>
					) products group by products.id having count(products.id) &gt;= #{attributeConditionSize,jdbcType=INTEGER}
				) t4 ON t4.product_id = bp.id
			</if>
<!-- 			<if test="designTempletId != null and designProductId != null and designProductId > 0">
				LEFT JOIN (SELECT pr.matching_degree,pr.product_id FROM product_recommendation pr
				WHERE pr.id IS NOT NULL
				AND pr.is_deleted = 0
				AND pr.templetProduct_id = #{designProductId,jdbcType=INTEGER}
				AND pr.design_templet_id = #{designTempletId,jdbcType=INTEGER}
				) t3 ON bp.id = t3.product_id
 			 </if> -->
			WHERE bp.id IS NOT NULL
			AND   bp.is_deleted = 0
			<!-- 定制产品白模Id 或 绑定点白模Ids过滤-->
			<if test="templateProductId !=  null and  templateProductId.size > 0  ">
				and bp.bm_ids in
				<foreach collection="templateProductId" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			AND (bp.spaceComon_id = #{spaceCommonId,jdbcType=INTEGER} or bp.designTemplet_id = #{designTempletId,jdbcType=INTEGER})
			<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
			<if test="isInternalUser != null and isInternalUser == 'yes'">
				<!-- AND   (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
				and bp.putaway_state in (1, 2, 3, 5)
			</if>
			<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
			</if>
			<!-- 房型归属 -->
			<!-- <if test="houseTypeValues != null and houseTypeValues != ''">
				and CONCAT(',', bp.house_type_values, ',') like CONCAT(CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR}),',%')
			</if> -->
			<if test="houseTypeList !=  null and  houseTypeList.size > 0  ">
				and (
				<foreach collection="houseTypeList" index="index" item="item">
					<choose>
						<when test="index== 0">
							CONCAT(',', bp.house_type_values, ',') like CONCAT('%,',#{item,jdbcType=VARCHAR},',%')
						</when>
						<otherwise>
							or CONCAT(',', bp.house_type_values, ',') like CONCAT('%,',#{item,jdbcType=VARCHAR},',%')
						</otherwise>
					</choose>
				</foreach>
				)
			</if>
			<!-- 产品大类 -->
			<if test="productTypeValue != null and productTypeValue != ''">
				and bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
				<!--同类型新增产品不显示只显示主产品-->
				AND ( bp.parent_id IS NULL OR bp.parent_id = bp.id )
			</if>
<!-- 			<if test="productSmallTypeValue != null and productSmallTypeValue != 0"> -->
<!-- 				and bp.product_small_type_value = #{productSmallTypeValue,jdbcType=INTEGER} -->
<!-- 			</if> -->
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				<foreach collection="categoryIdList" index="index" item="item">
					and FIND_IN_SET(#{item},t1.groupCode) > 0
				</foreach>
			</if>
			<!-- b2b用户授权码品牌过滤 -->
			<!-- <if test="brandIds !=  null and  brandIds.size > 0  ">
				and bb.id in
				<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if> -->
			<!-- 新过滤逻辑(品牌,大类,小类,产品idList) -->
			<if test="baseProduct !=  null and  baseProduct.size > 0  ">
				and (
				<foreach collection="baseProduct" index="index" item="item">
					<choose>
						<when test="index== 0">
							<choose>
								<when test="item.productIdList!=null and item.productIdList.size>0">
									(bp.id in
										 <foreach collection="item.productIdList" index="indexProductId" item="itemProductId" open="(" separator="," close=")">
										 	#{itemProductId}
										 </foreach>
									)
								</when>
								<otherwise>
									<!-- 品牌&&大小类 -->
									(<!-- 1=1  -->
									<if test="item.brandId != null and item.brandId != 0 ">
										<!-- and  -->bp.brand_id=#{item.brandId}
									</if>
									<if test="item.productTypeValue != null and item.productTypeValue != '' ">
										and bp.product_type_value=#{item.productTypeValue}
									</if>
									<if test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
										and bp.product_small_type_value=#{item.productSmallTypeValue}
									</if>
									)
									<!-- 品牌||大小类 -->
								</otherwise>
							</choose>
						</when>
						<otherwise>
							or 
							<choose>
								<when test="item.productIdList!=null and item.productIdList.size>0">
									(bp.id in
										 <foreach collection="item.productIdList" index="indexProductId" item="itemProductId" open="(" separator="," close=")">
										 	#{itemProductId}
										 </foreach>
									)
								</when>
								<otherwise>
									<!-- 品牌&&大小类 -->
									(<!-- 1=1  -->
									<if test="item.brandId != null and item.brandId != 0 ">
										<!-- and  -->bp.brand_id=#{item.brandId}
									</if>
									<if test="item.productTypeValue != null and item.productTypeValue != '' ">
										and bp.product_type_value=#{item.productTypeValue}
									</if>
									<if test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
										and bp.product_small_type_value=#{item.productSmallTypeValue}
									</if>
									)
									<!-- 品牌||大小类 -->
								</otherwise>
							</choose>
						</otherwise>
					</choose>

				</foreach>
				)
			</if>
			<!-- 新过滤逻辑(品牌,大类,小类,产品idList)->end -->
<!-- 		<if test="productId != null and productId != ''"> -->
<!-- 			and T.product_id != #{productId,jdbcType=INTEGER} -->
<!-- 		</if> -->
			<!-- 20170413add -->
			<!-- 特殊分类处理，如果是特殊分类只显示它本身分类，不是则不显示该大类下所配置的所有分类 -->
			<if test="specialProductType != null and specialProductType != '' ">
				<!-- <if test="productSmallTypeKey != null and productSmallTypeKey != ''">
					AND FIND_IN_SET(bp.product_small_type_mark,
					#{productSmallTypeKey,jdbcType=VARCHAR})
				</if> -->
				<!-- 可能要查询多个特殊的小分类 ->start -->
				<if test="productSmallTypeKey != null and productSmallTypeKey != ''">
					AND 
					(
					<choose>
						<when test="smallTypeList != null and smallTypeList.size > 0">
							<foreach collection="smallTypeList" item="item" separator=" or ">
								 FIND_IN_SET(bp.product_small_type_mark, #{item,jdbcType=VARCHAR})
							</foreach>
						</when>
						<otherwise>
							FIND_IN_SET(bp.product_small_type_mark, #{productSmallTypeKey,jdbcType=VARCHAR})
						</otherwise>
					</choose>
					)
				</if>
				<!-- 可能要查询多个特殊的小分类 ->end -->
				
				<if test="productSmallTypeKey == null or productSmallTypeKey == ''">
					AND !FIND_IN_SET(bp.product_small_type_mark,
					#{specialProductType,jdbcType=VARCHAR})
				</if>
			</if>
			
			<!-- 黑名单过滤 -->
			<if test="blacklistSet !=  null and  blacklistSet.size > 0  ">
				AND (SELECT  b.valuekey FROM sys_dictionary a ,sys_dictionary b 
			         WHERE a.type ='productType' 
			         AND   a.value = bp.product_type_value
			         AND   b.type = a.valuekey 
               		 AND   b.value = bp.product_small_type_value) not in 
				<foreach collection="blacklistSet" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<!-- 产品型号过滤 -->
			<if test="productModelNumber != null and productModelNumber != '' ">
				AND  (bp.product_model_number like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
				      or bp.product_code like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
					  OR bb.brand_name LIKE CONCAT(CONCAT('%', #{productModelNumber,jdbcType=VARCHAR}), '%'))
			</if>
			)
		<!-- 通用背景墙过滤长度高度 -->
		<if test="showBgWall == true">
			UNION 
			(SELECT bp.id as product_id  FROM 
			<if test="categoryIdList ==  null or  categoryIdList.size == 0  ">
				(select product_id from product_category_rel 
				where category_id in (select pc.id FROM pro_category pc where pc.is_deleted = 0 
				and pc.long_code LIKE CONCAT(CONCAT('%',#{categoryCode,jdbcType=VARCHAR}),'%'))) t1
			</if>
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				(SELECT prc.product_id,GROUP_CONCAT(pc.code) groupCode FROM product_category_rel prc 
				LEFT JOIN pro_category pc ON pc.id = prc.category_id and prc.is_deleted =0 GROUP BY prc.product_id) t1
			</if>
			 LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
			 LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
			 LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
			 <!-- 查询推荐产品 -->
			 <!-- <if test="designTempletId != null and designProductId != null and designProductId > 0">
				LEFT JOIN (SELECT pr.matching_degree,pr.product_id FROM product_recommendation pr 
				WHERE pr.id IS NOT NULL
				AND pr.is_deleted = 0
				AND pr.templetProduct_id = #{designProductId,jdbcType=INTEGER}
				AND pr.design_templet_id = #{designTempletId,jdbcType=INTEGER}
				) t3 ON bp.id = t3.product_id
 			 </if> -->
 			 <!-- 产品属性过滤 -->
			<if test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
				RIGHT JOIN (
					SELECT id AS product_id FROM (
					<foreach collection="attributeConditionList" index="index" item="item" open="" separator="UNION ALL" close="">
						select pa.product_id AS id from product_attribute pa
						LEFT JOIN product_props pp ON pp.id = pa.attribute_value_id
						WHERE 1=1
						and ${item}
					</foreach>
					) products group by products.id having count(products.id) &gt;= #{attributeConditionSize,jdbcType=INTEGER}
				) t4 ON t4.product_id = bp.id
			</if>
			WHERE bp.id IS NOT NULL
			AND   bp.is_deleted = 0
			AND  LOCATE('baimo',bp.product_code)=0
			<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
			<if test="isInternalUser != null and isInternalUser == 'yes'">
				<!-- AND   (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
				and bp.putaway_state in (1, 2, 3, 5)
			</if>
			<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
			</if>
			<!-- 房型归属过滤 -->
			<if test="houseTypeValues != null and houseTypeValues != ''">
				and CONCAT(',', bp.house_type_values, ',') like CONCAT(CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR}),',%')
			</if>
			<!-- 产品大类过滤 -->
			<if test="productTypeValue != null and productTypeValue != 0 ">
				and bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
				<!--diy分类搜索过滤同类型新增产品只显示主产品-->
				AND ( bp.parent_id IS NULL OR bp.parent_id = bp.id)
				AND bp.bm_ids IS NULL
			</if>
			<!-- 产品小类过滤 -->
			<choose>
				<when test="smallTypeValueList != null and smallTypeValueList.size > 0">
					and bp.product_small_type_value in 
					<foreach collection="smallTypeValueList" item="smallTypeValueListItem" open="(" close=")" separator=",">
						#{smallTypeValueListItem,jdbcType=INTEGER}
					</foreach>
				</when>
				<otherwise>
					<if test="productSmallTypeValue != null and productSmallTypeValue != 0">
						and bp.product_small_type_value = #{productSmallTypeValue,jdbcType=INTEGER}
					</if>
				</otherwise>
			</choose>
			
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				<foreach collection="categoryIdList" index="index" item="item">
					and FIND_IN_SET(#{item},t1.groupCode) > 0
				</foreach>
			</if>
			<!-- <if test="brandIds !=  null and  brandIds.size > 0  ">
				and bb.id in
				<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if> -->
			<!-- 新过滤逻辑(品牌,大类,小类,产品idList) -->
			<if test="baseProduct !=  null and  baseProduct.size > 0  ">
				and (
				<foreach collection="baseProduct" index="index" item="item">
					<choose>
						<when test="index== 0">
							<choose>
								<when test="item.productIdList!=null and item.productIdList.size>0">
									(bp.id in
										 <foreach collection="item.productIdList" index="indexProductId" item="itemProductId" open="(" separator="," close=")">
										 	#{itemProductId}
										 </foreach>
									)
								</when>
								<otherwise>
									<!-- 品牌&&大小类 -->
									(<!-- 1=1  -->
									<if test="item.brandId != null and item.brandId != 0 ">
										<!-- and  -->bp.brand_id=#{item.brandId}
									</if>
									<if test="item.productTypeValue != null and item.productTypeValue != '' ">
										and bp.product_type_value=#{item.productTypeValue}
									</if>
									<if test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
										and bp.product_small_type_value=#{item.productSmallTypeValue}
									</if>
									)
									<!-- 品牌||大小类 -->
								</otherwise>
							</choose>
						</when>
						<otherwise>
							or 
							<choose>
								<when test="item.productIdList!=null and item.productIdList.size>0">
									(bp.id in
										 <foreach collection="item.productIdList" index="indexProductId" item="itemProductId" open="(" separator="," close=")">
										 	#{itemProductId}
										 </foreach>
									)
								</when>
								<otherwise>
									<!-- 品牌&&大小类 -->
									(<!-- 1=1  -->
									<if test="item.brandId != null and item.brandId != 0 ">
										<!-- and  -->bp.brand_id=#{item.brandId}
									</if>
									<if test="item.productTypeValue != null and item.productTypeValue != '' ">
										and bp.product_type_value=#{item.productTypeValue}
									</if>
									<if test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
										and bp.product_small_type_value=#{item.productSmallTypeValue}
									</if>
									)
									<!-- 品牌||大小类 -->
								</otherwise>
							</choose>
						</otherwise>
					</choose>

				</foreach>
				)
			</if>
			<!-- 新过滤逻辑(品牌,大类,小类,产品idList)->end -->
<!-- 		<if test="productId != null and productId != ''"> -->
<!-- 			and T.product_id != #{productId,jdbcType=INTEGER} -->
<!-- 		</if> -->
			<!-- 2016.10.16-黑名单分类list -->
			<if test="blacklistSet !=  null and  blacklistSet.size > 0  ">
				AND (SELECT  b.valuekey FROM sys_dictionary a ,sys_dictionary b 
			         WHERE a.type ='productType' 
			         AND   a.value = bp.product_type_value
			         AND   b.type = a.valuekey 
               AND   b.value = bp.product_small_type_value) not in 
				<foreach collection="blacklistSet" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			
			<!-- 20170413add -->
			<!-- 特殊分类处理，如果是特殊分类只显示它本身分类，不是则不显示该大类下所配置的所有分类 -->
			<!--<if test="specialProductType != null and specialProductType != '' ">-->
				<!--<if test="productSmallTypeKey != null and productSmallTypeKey != ''">-->
					<!--AND FIND_IN_SET(bp.product_small_type_mark,-->
					<!--#{productSmallTypeKey,jdbcType=VARCHAR})-->
				<!--</if>-->
				<!--<if test="productSmallTypeKey == null or productSmallTypeKey == ''">-->
					<!--AND !FIND_IN_SET(bp.product_small_type_mark,-->
					<!--#{specialProductType,jdbcType=VARCHAR})-->
				<!--</if>-->
			<!--</if>-->
			
			<!-- 产品型号过滤 -->
			<if test="productModelNumber != null and productModelNumber != '' ">
				AND  (bp.product_model_number like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
				      or bp.product_code like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
					  OR bb.brand_name LIKE CONCAT(CONCAT('%', #{productModelNumber,jdbcType=VARCHAR}), '%'))
			</if>
			<if test="isBeijing == true">
				<!-- 过滤背景墙产品长度 -->
				<if test="startLength != null and endLength != null">
					AND  bp.product_length between #{startLength,jdbcType=INTEGER} and #{endLength,jdbcType=INTEGER}
				</if>
				<!-- 过滤背景墙产品高度 -->
				<if test="bgWallHeight != null and bgWallHeight != ''">
					<choose>
						<when test="bgWallHeight == '30' or bgWallHeight == '50'">
							AND  (bp.product_height = #{bgWallHeight,jdbcType=INTEGER})
						</when>
						<otherwise>
							AND  (bp.product_height = #{bgWallHeight,jdbcType=INTEGER} or (bp.product_height &lt; 230 and bp.product_height &gt; 50))
						</otherwise>
					</choose>
				</if>
			</if>
			<!--背景墙、窗帘、一字淋浴屏过滤长高-->
			<if test="isStretch == true">
				<if test="bgWallHeight != null">
					and  bp.product_height = #{bgWallHeight,jdbcType=INTEGER}
				</if>
				<if test="startLength != null and endLength != null">
					and bp.product_length between #{startLength,jdbcType=INTEGER} and #{endLength,jdbcType=INTEGER}
				</if>	
			</if>				
			<!-- 背景墙白模长高为空，则不显示背景墙产品 -->
			<if test="isValue == true">and bp.id = -1</if>
			)
			</if>
		) as T
	</select>

	<select id="findCustomizedCategoryProductResultV2" resultMap="categoryProductSearchResultMap"
		parameterType="com.nork.product.model.ProductCategoryRel">
		SELECT DISTINCT
		T.product_id,
		T.product_code,
		T.pic_path,
		T.material_pic_ids,
		T.parent_id,
		T.order_type,
		T.colors_long_code
		FROM (
		(SELECT bp.id as
		product_id,bp.product_code,bp.parent_id,rp.pic_path,bp.material_pic_ids,bp.colors_long_code,
		CASE WHEN bp.designTemplet_id IS NOT NULL AND bp.designTemplet_id != 0
		THEN 2
		WHEN bp.spaceComon_id IS NOT NULL AND bp.spaceComon_id != 0 THEN 3
		<!-- 推荐排序 -->
<!-- 		<if
			test="designTempletId != null and designProductId != null and designProductId > 0">
			WHEN t3.product_id IS NOT NULL THEN 4
		</if> -->
		WHEN bp.id IS NOT NULL THEN 5
		ELSE 6 END AS order_type
		FROM
		<if test="categoryIdList ==  null or  categoryIdList.size == 0  ">
			(select product_id from product_category_rel
			where category_id in (select pc.id FROM pro_category pc where
			pc.is_deleted = 0
			and pc.long_code LIKE
			CONCAT(CONCAT('%',#{categoryCode,jdbcType=VARCHAR}),'%'))) t1
		</if>
		<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
			(SELECT prc.product_id,GROUP_CONCAT(pc.code) groupCode FROM
			product_category_rel prc
			LEFT JOIN pro_category pc ON pc.id = prc.category_id and prc.is_deleted
			=0 GROUP BY prc.product_id) t1
		</if>
		LEFT JOIN base_product bp ON t1.product_id = bp.id and bp.is_deleted =
		0
		LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
		LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
		<!-- 产品属性过滤 -->
		<if
			test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
			RIGHT JOIN (
			SELECT id AS product_id FROM (
			<foreach collection="attributeConditionList" index="index"
				item="item" open="" separator="UNION ALL" close="">
				select pa.product_id AS id from product_attribute pa
				LEFT JOIN product_props pp ON pp.id = pa.attribute_value_id
				WHERE 1=1
				and ${item}
			</foreach>
			) products group by products.id having count(products.id) &gt;=
			#{attributeConditionSize,jdbcType=INTEGER}
			) t4 ON t4.product_id = bp.id
		</if>
		<!-- 查询推荐产品 -->
<!-- 		<if
			test="designTempletId != null and designProductId != null and designProductId > 0">
			LEFT JOIN (SELECT pr.matching_degree,pr.product_id FROM
			product_recommendation pr
			WHERE pr.id IS NOT NULL
			AND pr.is_deleted = 0
			AND pr.templetProduct_id = #{designProductId,jdbcType=INTEGER}
			AND pr.design_templet_id = #{designTempletId,jdbcType=INTEGER}
			) t3 ON bp.id = t3.product_id
		</if> -->
		WHERE bp.id IS NOT NULL
		AND bp.is_deleted = 0
		<!-- 定制产品白模Id 或 绑定点白模Ids过滤 -->
		<if test="templateProductId !=  null and  templateProductId.size > 0  ">
			and bp.bm_ids in
			<foreach collection="templateProductId" index="index" item="item"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		AND (bp.spaceComon_id = #{spaceCommonId,jdbcType=INTEGER} or
		bp.designTemplet_id = #{designTempletId,jdbcType=INTEGER})
		<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
		<if test="isInternalUser != null and isInternalUser == 'yes'">
			<!-- AND (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
			and bp.putaway_state in (1, 2, 3, 5)
		</if>
		<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
		</if>
		<!-- 房型归属 -->
		<if test="houseTypeList !=  null and  houseTypeList.size > 0  ">
			and (
			<foreach collection="houseTypeList" index="index" item="item">
				<choose>
					<when test="index== 0">
						CONCAT(',', bp.house_type_values, ',') like
						CONCAT('%,',#{item,jdbcType=VARCHAR},',%')
					</when>
					<otherwise>
						or CONCAT(',', bp.house_type_values, ',') like
						CONCAT('%,',#{item,jdbcType=VARCHAR},',%')
					</otherwise>
				</choose>
			</foreach>
			)
		</if>
		<!-- 产品大类 -->
		<if test="productTypeValue != null and productTypeValue != ''">
			and bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
			<!--同类型新增产品不显示只显示主产品 -->
			AND ( bp.parent_id IS NULL OR bp.parent_id = bp.id )
		</if>
		<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
			<foreach collection="categoryIdList" index="index" item="item">
				and FIND_IN_SET(#{item},t1.groupCode) > 0
			</foreach>
		</if>
		<!-- 新过滤逻辑(品牌,大类,小类,产品idList) -->
		<if test="baseProduct !=  null and  baseProduct.size > 0  ">
			and (
			<foreach collection="baseProduct" index="index" item="item">
				<choose>
					<when test="index== 0">
						<choose>
							<when test="item.productIdList!=null and item.productIdList.size>0">
								(bp.id in
								<foreach collection="item.productIdList" index="indexProductId"
									item="itemProductId" open="(" separator="," close=")">
									#{itemProductId}
								</foreach>
								)
							</when>
							<otherwise>
								<!-- 品牌&&大小类 -->
								(<!-- 1=1 -->
								<if test="item.brandId != null and item.brandId != 0 ">
									<!-- and -->
									bp.brand_id=#{item.brandId}
								</if>
								<if
									test="item.productTypeValue != null and item.productTypeValue != '' ">
									and bp.product_type_value=#{item.productTypeValue}
								</if>
								<if
									test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
									and bp.product_small_type_value=#{item.productSmallTypeValue}
								</if>
								)
								<!-- 品牌||大小类 -->
							</otherwise>
						</choose>
					</when>
					<otherwise>
						or
						<choose>
							<when test="item.productIdList!=null and item.productIdList.size>0">
								(bp.id in
								<foreach collection="item.productIdList" index="indexProductId"
									item="itemProductId" open="(" separator="," close=")">
									#{itemProductId}
								</foreach>
								)
							</when>
							<otherwise>
								<!-- 品牌&&大小类 -->
								(<!-- 1=1 -->
								<if test="item.brandId != null and item.brandId != 0 ">
									<!-- and -->
									bp.brand_id=#{item.brandId}
								</if>
								<if
									test="item.productTypeValue != null and item.productTypeValue != '' ">
									and bp.product_type_value=#{item.productTypeValue}
								</if>
								<if
									test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
									and bp.product_small_type_value=#{item.productSmallTypeValue}
								</if>
								)
								<!-- 品牌||大小类 -->
							</otherwise>
						</choose>
					</otherwise>
				</choose>

			</foreach>
			)
		</if>
		<!-- 新过滤逻辑(品牌,大类,小类,产品idList)->end -->
		<!-- 黑名单过滤 -->
		<if test="blacklistSet !=  null and  blacklistSet.size > 0  ">
			AND (SELECT b.valuekey FROM sys_dictionary a ,sys_dictionary b
			WHERE a.type ='productType'
			AND a.value = bp.product_type_value
			AND b.type = a.valuekey
			AND b.value = bp.product_small_type_value) not in
			<foreach collection="blacklistSet" index="index" item="item"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<!-- 产品型号过滤 -->
		<if test="productModelNumber != null and productModelNumber != '' ">
			AND (bp.product_model_number like
			CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
			or bp.product_code like
			CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
			OR bb.brand_name LIKE CONCAT(CONCAT('%',
			#{productModelNumber,jdbcType=VARCHAR}), '%')
			)
		</if>
		)
		<!-- 通用背景墙过滤长度 -->
		<if test="showBgWall == true">
			UNION
			(SELECT DISTINCT bp.id as
			product_id,bp.product_code,bp.parent_id,rp.pic_path,bp.material_pic_ids,bp.colors_long_code,
			CASE WHEN t2.id IS NOT NULL THEN 1 ELSE 0 END AS collectState,
			CASE
			WHEN bp.id IS NOT NULL THEN 8
			ELSE 9 END AS order_type
			FROM
			<if test="categoryIdList ==  null or  categoryIdList.size == 0  ">
				(select product_id from product_category_rel
				where category_id in (select pc.id FROM pro_category pc where
				pc.is_deleted = 0
				and pc.long_code LIKE
				CONCAT(CONCAT('%',#{categoryCode,jdbcType=VARCHAR}),'%'))) t1
			</if>
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				(SELECT prc.product_id,GROUP_CONCAT(pc.code) groupCode
				FROM product_category_rel prc
				LEFT JOIN pro_category pc ON pc.id = prc.category_id and prc.is_deleted
				=0 GROUP BY prc.product_id) t1
			</if>
			LEFT JOIN base_product bp ON t1.product_id = bp.id and bp.is_deleted
			= 0
			LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted =
			0
			LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
			LEFT
			JOIN (SELECT upc.id,upc.product_id FROM user_product_collect upc
			WHERE upc.is_deleted = 0
			<if test="userId != null and userId != ''">
				and upc.user_id = #{userId,jdbcType=INTEGER}
			</if>
			) t2 ON t2.product_id = bp.id
			<!-- 产品属性过滤 -->
			<if
				test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
				RIGHT JOIN (
				SELECT id AS product_id FROM (
				<foreach collection="attributeConditionList" index="index"
					item="item" open="" separator="UNION ALL" close="">
					select pa.product_id AS id from product_attribute pa
					LEFT JOIN product_props pp ON pp.id = pa.attribute_value_id
					WHERE 1=1
					and ${item}
				</foreach>
				) products group by products.id having count(products.id) &gt;=
				#{attributeConditionSize,jdbcType=INTEGER}
				) t4 ON t4.product_id =
				bp.id
			</if>
			WHERE bp.id IS NOT NULL
			AND bp.is_deleted = 0
			AND
			LOCATE('baimo',bp.product_code)=0
			<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
			<if test="isInternalUser != null and isInternalUser == 'yes'">
				<!-- AND (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
				and bp.putaway_state in (1, 2, 3, 5)
			</if>
			<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
			</if>
			<!-- 房型归属过滤 -->
			<if test="houseTypeValues != null and houseTypeValues != ''">
				and CONCAT(',', bp.house_type_values, ',') like
				CONCAT(CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR}),',%')
			</if>
			<!-- 产品大类过滤 -->
			<if test="productTypeValue != null and productTypeValue != 0 ">
				and bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
				<!--diy分类搜索过滤同类型新增产品只显示主产品 -->
				AND ( bp.parent_id IS NULL OR bp.parent_id = bp.id)
				AND bp.bm_ids IS
				NULL
			</if>
			<!-- 产品小类过滤 -->
			<if test="productSmallTypeValue != null and productSmallTypeValue != 0">
				and bp.product_small_type_value =
				#{productSmallTypeValue,jdbcType=INTEGER}
			</if>
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				<foreach collection="categoryIdList" index="index" item="item">
					and
					FIND_IN_SET(#{item},t1.groupCode) > 0
				</foreach>
			</if>
			<if test="brandIds !=  null and  brandIds.size > 0  ">
				and bb.id in
				<foreach collection="brandIds" index="index" item="item"
					open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<!-- 2016.10.16-黑名单分类list -->
			<if test="blacklistSet !=  null and  blacklistSet.size > 0  ">
				AND (SELECT b.valuekey FROM sys_dictionary a ,sys_dictionary b
				WHERE a.type ='productType'
				AND a.value = bp.product_type_value
				AND b.type = a.valuekey
				AND b.value = bp.product_small_type_value) not in
				<foreach collection="blacklistSet" index="index" item="item"
					open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<!-- 产品型号过滤 -->
			<if test="productModelNumber != null and productModelNumber != '' ">
				AND (bp.product_model_number like
				CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
				or bp.product_code like
				CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
				OR bb.brand_name LIKE CONCAT(CONCAT('%',
				#{productModelNumber,jdbcType=VARCHAR}), '%')
				)
			</if>
			<!-- 过滤背景墙产品长度 -->
			<if test="startLength != null and endLength != null">
				AND bp.product_length between
				#{startLength,jdbcType=INTEGER} and #{endLength,jdbcType=INTEGER}
				AND bp.product_length != #{startLength,jdbcType=INTEGER}
			</if>
			<!-- 过滤背景墙产品高度 -->
			<if test="bgWallHeight != null and bgWallHeight != ''">
				<choose>
					<when test="bgWallHeight == '30' or bgWallHeight == '50'">
						AND  (bp.product_height = #{bgWallHeight,jdbcType=INTEGER})
					</when>
					<otherwise>
						AND  (bp.product_height = #{bgWallHeight,jdbcType=INTEGER} or (bp.product_height &lt; 230 and bp.product_height &gt; 50))
					</otherwise>
				</choose>
			</if>
			<!-- 背景墙白模长高为空，则不显示背景墙产品 -->
			<if test="isValue == true"> and bp.id = -1</if>
			)
		</if>
		) as T
		order by
		T.product_id
	</select>
	
	<select id="findCustomizedCategoryProductResultV3" resultMap="categoryProductSearchResultMap"
		parameterType="com.nork.product.model.ProductCategoryRel">
		SELECT DISTINCT
		T.product_id,
		T.product_code,
		T.pic_path,
		T.material_pic_ids,
		T.parent_id,
		T.order_type,
		T.colors_long_code
		FROM (
		(SELECT bp.id as
		product_id,bp.product_code,bp.parent_id,rp.pic_path,bp.material_pic_ids,bp.colors_long_code,
		CASE WHEN bp.designTemplet_id IS NOT NULL AND bp.designTemplet_id != 0
		THEN 2
		WHEN bp.spaceComon_id IS NOT NULL AND bp.spaceComon_id != 0 THEN 3
		<!-- 推荐排序 -->
<!-- 		<if
			test="designTempletId != null and designProductId != null and designProductId > 0">
			WHEN t3.product_id IS NOT NULL THEN 4
		</if> -->
		WHEN bp.id IS NOT NULL THEN 5
		ELSE 6 END AS order_type
		FROM
		<if test="categoryIdList ==  null or  categoryIdList.size == 0  ">
			(select product_id from product_category_rel
			where category_id in (select pc.id FROM pro_category pc where
			pc.is_deleted = 0
			<choose>
				<when test="firstStageCode != null and firstStageCode != ''">
					and pc.first_stage_code = #{firstStageCode,jdbcType=VARCHAR}
				</when>
				<otherwise>
					<choose>
						<when test="secondStageCode != null and secondStageCode != ''">
							and pc.second_stage_code = #{secondStageCode,jdbcType=VARCHAR}
						</when>
						<otherwise>
							<choose>
								<when test="thirdStageCode != null and thirdStageCode != ''">
									and pc.third_stage_code = #{thirdStageCode,jdbcType=VARCHAR}
								</when>
								<otherwise>
									<choose>
										<when test="fourthStageCode != null and fourthStageCode != ''">
											and pc.fourth_stage_code = #{fourthStageCode,jdbcType=VARCHAR}
										</when>
										<otherwise>
											<choose>
												<when test="fifthStageCode != null and fifthStageCode != ''">
													and pc.fifth_stage_code = #{fifthStageCode,jdbcType=VARCHAR}
												</when>
												<otherwise>
													and pc.long_code LIKE CONCAT('%',#{categoryCode,jdbcType=VARCHAR},'%')
												</otherwise>
											</choose>
										</otherwise>
									</choose>
								</otherwise>
							</choose>
						</otherwise>
					</choose>
				</otherwise>
			</choose>
			)
		) t1
			
		</if>
		<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
			(SELECT prc.product_id,GROUP_CONCAT(pc.code) groupCode FROM
			product_category_rel prc
			LEFT JOIN pro_category pc ON pc.id = prc.category_id and prc.is_deleted
			=0 GROUP BY prc.product_id) t1
		</if>
		LEFT JOIN base_product bp ON t1.product_id = bp.id and bp.is_deleted =
		0
		LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
		LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
		<!-- 产品属性过滤 -->
		<if
			test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
			RIGHT JOIN (
			SELECT id AS product_id FROM (
			<foreach collection="attributeConditionList" index="index"
				item="item" open="" separator="UNION ALL" close="">
				select pa.product_id AS id from product_attribute pa
				LEFT JOIN product_props pp ON pp.id = pa.attribute_value_id
				WHERE 1=1
				and ${item}
			</foreach>
			) products group by products.id having count(products.id) &gt;=
			#{attributeConditionSize,jdbcType=INTEGER}
			) t4 ON t4.product_id = bp.id
		</if>
		<!-- 查询推荐产品 -->
<!-- 		<if
			test="designTempletId != null and designProductId != null and designProductId > 0">
			LEFT JOIN (SELECT pr.matching_degree,pr.product_id FROM
			product_recommendation pr
			WHERE pr.id IS NOT NULL
			AND pr.is_deleted = 0
			AND pr.templetProduct_id = #{designProductId,jdbcType=INTEGER}
			AND pr.design_templet_id = #{designTempletId,jdbcType=INTEGER}
			) t3 ON bp.id = t3.product_id
		</if> -->
		WHERE bp.id IS NOT NULL
		AND bp.is_deleted = 0
		<!-- 定制产品白模Id 或 绑定点白模Ids过滤 -->
		<if test="templateProductId !=  null and  templateProductId.size > 0  ">
			and bp.bm_ids in
			<foreach collection="templateProductId" index="index" item="item"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		AND (bp.spaceComon_id = #{spaceCommonId,jdbcType=INTEGER} or
		bp.designTemplet_id = #{designTempletId,jdbcType=INTEGER})
		<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
		<if test="isInternalUser != null and isInternalUser == 'yes'">
			<!-- AND (bp.putaway_state = 1 or bp.putaway_state = 2 bp.putaway_state = 3) -->
			and bp.putaway_state in (1, 2, 3, 5)
		</if>
		<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
		</if>
		<!-- 房型归属 -->
		<if test="houseTypeList !=  null and  houseTypeList.size > 0  ">
			and (
			<foreach collection="houseTypeList" index="index" item="item">
				<choose>
					<when test="index== 0">
						CONCAT(',', bp.house_type_values, ',') like
						CONCAT('%,',#{item,jdbcType=VARCHAR},',%')
					</when>
					<otherwise>
						or CONCAT(',', bp.house_type_values, ',') like
						CONCAT('%,',#{item,jdbcType=VARCHAR},',%')
					</otherwise>
				</choose>
			</foreach>
			)
		</if>
		<!-- 产品大类 -->
		<if test="productTypeValue != null and productTypeValue != ''">
			and bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
			<!--同类型新增产品不显示只显示主产品 -->
			AND ( bp.parent_id IS NULL OR bp.parent_id = bp.id )
		</if>
		<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
			<foreach collection="categoryIdList" index="index" item="item">
				and FIND_IN_SET(#{item},t1.groupCode) > 0
			</foreach>
		</if>
		<!-- 新过滤逻辑(品牌,大类,小类,产品idList) -->
		<if test="baseProduct !=  null and  baseProduct.size > 0  ">
			and (
			<foreach collection="baseProduct" index="index" item="item">
				<choose>
					<when test="index== 0">
						<choose>
							<when test="item.productIdList!=null and item.productIdList.size>0">
								(bp.id in
								<foreach collection="item.productIdList" index="indexProductId"
									item="itemProductId" open="(" separator="," close=")">
									#{itemProductId}
								</foreach>
								)
							</when>
							<otherwise>
								<!-- 品牌&&大小类 -->
								(<!-- 1=1 -->
								<if test="item.brandId != null and item.brandId != 0 ">
									<!-- and -->
									bp.brand_id=#{item.brandId}
								</if>
								<if
									test="item.productTypeValue != null and item.productTypeValue != '' ">
									and bp.product_type_value=#{item.productTypeValue}
								</if>
								<if
									test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
									and bp.product_small_type_value=#{item.productSmallTypeValue}
								</if>
								)
								<!-- 品牌||大小类 -->
							</otherwise>
						</choose>
					</when>
					<otherwise>
						or
						<choose>
							<when test="item.productIdList!=null and item.productIdList.size>0">
								(bp.id in
								<foreach collection="item.productIdList" index="indexProductId"
									item="itemProductId" open="(" separator="," close=")">
									#{itemProductId}
								</foreach>
								)
							</when>
							<otherwise>
								<!-- 品牌&&大小类 -->
								(<!-- 1=1 -->
								<if test="item.brandId != null and item.brandId != 0 ">
									<!-- and -->
									bp.brand_id=#{item.brandId}
								</if>
								<if
									test="item.productTypeValue != null and item.productTypeValue != '' ">
									and bp.product_type_value=#{item.productTypeValue}
								</if>
								<if
									test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
									and bp.product_small_type_value=#{item.productSmallTypeValue}
								</if>
								)
								<!-- 品牌||大小类 -->
							</otherwise>
						</choose>
					</otherwise>
				</choose>

			</foreach>
			)
		</if>
		<!-- 新过滤逻辑(品牌,大类,小类,产品idList)->end -->
		<!-- 黑名单过滤 -->
		<if test="blacklistSet !=  null and  blacklistSet.size > 0  ">
			AND (SELECT b.valuekey FROM sys_dictionary a ,sys_dictionary b
			WHERE a.type ='productType'
			AND a.value = bp.product_type_value
			AND b.type = a.valuekey
			AND b.value = bp.product_small_type_value) not in
			<foreach collection="blacklistSet" index="index" item="item"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<!-- 产品型号过滤 -->
		<if test="productModelNumber != null and productModelNumber != '' ">
			AND (bp.product_model_number like
			CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
			or bp.product_code like
			CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
			OR bb.brand_name LIKE CONCAT(CONCAT('%',
			#{productModelNumber,jdbcType=VARCHAR}), '%')
			)
		</if>
		)
		<!-- 通用背景墙过滤长度 -->
		<if test="showBgWall == true">
			UNION
			(SELECT DISTINCT bp.id as
			product_id,bp.product_code,bp.parent_id,rp.pic_path,bp.material_pic_ids,bp.colors_long_code,
			CASE WHEN t2.id IS NOT NULL THEN 1 ELSE 0 END AS collectState,
			CASE
			WHEN bp.id IS NOT NULL THEN 8
			ELSE 9 END AS order_type
			FROM
			<if test="categoryIdList ==  null or  categoryIdList.size == 0  ">
				(select product_id from product_category_rel
				where category_id in (select pc.id FROM pro_category pc where
				pc.is_deleted = 0
				<!-- and pc.long_code LIKE CONCAT('%',#{categoryCode,jdbcType=VARCHAR},'%') -->
			<choose>
				<when test="firstStageCode != null and firstStageCode != ''">
					and pc.first_stage_code = #{firstStageCode,jdbcType=VARCHAR}
				</when>
				<otherwise>
					<choose>
						<when test="secondStageCode != null and secondStageCode != ''">
							and pc.second_stage_code = #{secondStageCode,jdbcType=VARCHAR}
						</when>
						<otherwise>
							<choose>
								<when test="thirdStageCode != null and thirdStageCode != ''">
									and pc.third_stage_code = #{thirdStageCode,jdbcType=VARCHAR}
								</when>
								<otherwise>
									<choose>
										<when test="fourthStageCode != null and fourthStageCode != ''">
											and pc.fourth_stage_code = #{fourthStageCode,jdbcType=VARCHAR}
										</when>
										<otherwise>
											<choose>
												<when test="fifthStageCode != null and fifthStageCode != ''">
													and pc.fifth_stage_code = #{fifthStageCode,jdbcType=VARCHAR}
												</when>
												<otherwise>
													and pc.long_code LIKE CONCAT('%',#{categoryCode,jdbcType=VARCHAR},'%')
												</otherwise>
											</choose>
										</otherwise>
									</choose>
								</otherwise>
							</choose>
						</otherwise>
					</choose>
				</otherwise>
			</choose>
				)) t1
			</if>
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				(SELECT prc.product_id,GROUP_CONCAT(pc.code) groupCode
				FROM product_category_rel prc
				LEFT JOIN pro_category pc ON pc.id = prc.category_id and prc.is_deleted
				=0 GROUP BY prc.product_id) t1
			</if>
			LEFT JOIN base_product bp ON t1.product_id = bp.id and bp.is_deleted
			= 0
			LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted =
			0
			LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
			LEFT
			JOIN (SELECT upc.id,upc.product_id FROM user_product_collect upc
			WHERE upc.is_deleted = 0
			<if test="userId != null and userId != ''">
				and upc.user_id = #{userId,jdbcType=INTEGER}
			</if>
			) t2 ON t2.product_id = bp.id
			<!-- 产品属性过滤 -->
			<if
				test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
				RIGHT JOIN (
				SELECT id AS product_id FROM (
				<foreach collection="attributeConditionList" index="index"
					item="item" open="" separator="UNION ALL" close="">
					select pa.product_id AS id from product_attribute pa
					LEFT JOIN product_props pp ON pp.id = pa.attribute_value_id
					WHERE 1=1
					and ${item}
				</foreach>
				) products group by products.id having count(products.id) &gt;=
				#{attributeConditionSize,jdbcType=INTEGER}
				) t4 ON t4.product_id =
				bp.id
			</if>
			WHERE bp.id IS NOT NULL
			AND bp.is_deleted = 0
			AND
			LOCATE('baimo',bp.product_code)=0
			<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
			<if test="isInternalUser != null and isInternalUser == 'yes'">
				<!-- AND (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
				and bp.putaway_state in (1, 2, 3, 5) 
			</if>
			<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
			</if>
			<!-- 房型归属过滤 -->
			<if test="houseTypeValues != null and houseTypeValues != ''">
				and CONCAT(',', bp.house_type_values, ',') like
				CONCAT(CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR}),',%')
			</if>
			<!-- 产品大类过滤 -->
			<if test="productTypeValue != null and productTypeValue != 0 ">
				and bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
				<!--diy分类搜索过滤同类型新增产品只显示主产品 -->
				AND ( bp.parent_id IS NULL OR bp.parent_id = bp.id)
				AND bp.bm_ids IS
				NULL
			</if>
			<!-- 产品小类过滤 -->
			<if test="productSmallTypeValue != null and productSmallTypeValue != 0">
				and bp.product_small_type_value =
				#{productSmallTypeValue,jdbcType=INTEGER}
			</if>
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				<foreach collection="categoryIdList" index="index" item="item">
					and
					FIND_IN_SET(#{item},t1.groupCode) > 0
				</foreach>
			</if>
			<if test="brandIds !=  null and  brandIds.size > 0  ">
				and bb.id in
				<foreach collection="brandIds" index="index" item="item"
					open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<!-- 2016.10.16-黑名单分类list -->
			<if test="blacklistSet !=  null and  blacklistSet.size > 0  ">
				AND (SELECT b.valuekey FROM sys_dictionary a ,sys_dictionary b
				WHERE a.type ='productType'
				AND a.value = bp.product_type_value
				AND b.type = a.valuekey
				AND b.value = bp.product_small_type_value) not in
				<foreach collection="blacklistSet" index="index" item="item"
					open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<!-- 产品型号过滤 -->
			<if test="productModelNumber != null and productModelNumber != '' ">
				AND (bp.product_model_number like
				CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
				or bp.product_code like
				CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
				OR bb.brand_name LIKE CONCAT(CONCAT('%',
				#{productModelNumber,jdbcType=VARCHAR}), '%')
				)
			</if>
			<!-- 过滤背景墙产品长度 -->
			<if test="startLength != null and endLength != null">
				AND bp.product_length between
				#{startLength,jdbcType=INTEGER} and #{endLength,jdbcType=INTEGER}
				AND bp.product_length != #{startLength,jdbcType=INTEGER}
			</if>
			<!-- 过滤背景墙产品高度 -->
			<if test="bgWallHeight != null and bgWallHeight != ''">
				<choose>
					<when test="bgWallHeight == '30' or bgWallHeight == '50'">
						AND  (bp.product_height = #{bgWallHeight,jdbcType=INTEGER})
					</when>
					<otherwise>
						AND  (bp.product_height = #{bgWallHeight,jdbcType=INTEGER} or (bp.product_height &lt; 230 and bp.product_height &gt; 50))
					</otherwise>
				</choose>
			</if>
			<!-- 背景墙白模长高为空，则不显示背景墙产品 -->
			<if test="isValue == true"> and bp.id = -1</if>
			)
		</if>
		) as T
		order by
		T.product_id
	</select>
	
	<select id="findRecommendCategoryProductResult" resultMap="categoryProductSearchResultMap"
			parameterType="com.nork.product.model.ProductCategoryRel">
	    	SELECT DISTINCT bp.id as product_id,bp.product_code,bp.parent_id,rp.pic_path,bp.material_pic_ids,bp.colors_long_code,
			CASE WHEN t2.id IS NOT NULL THEN 1 ELSE 0 END AS collectState,
			<!--CASE WHEN C.product_id IS NOT NULL THEN C.count else 0 end as product_count,-->
			CASE
			<!-- 推荐排序 -->
<!-- 			<if test="designTempletId != null and designProductId != null and designProductId > 0">
				WHEN t3.product_id IS NOT NULL THEN 10
			</if> -->
			<!-- 小分类排序 -->
			<if test="productSmallTypeValue != null and productSmallTypeValue != 0">
				<!--WHEN t6.id IS NOT NULL  THEN 11-->
				when (SELECT
					COUNT(pro.id)
					FROM
					base_product pro
					WHERE pro.product_small_type_value = #{productSmallTypeValue} AND pro.product_type_value = #{productTypeValue}
					AND pro.is_deleted = 0 AND pro.id = bp.id) != 0
				THEN 11
			</if>
			<!-- 属性排序 -->
			<!--<if test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
			 	WHEN t4.product_id IS NOT NULL THEN 11 
			  </if>-->
			 WHEN bp.id IS NOT NULL THEN 12
			 ELSE 13 END AS order_type
			FROM 
			<if test="categoryIdList ==  null or  categoryIdList.size == 0  ">
				(SELECT pcr.product_id FROM product_category_rel pcr
				LEFT JOIN pro_category pc ON pcr.category_id = pc.id
				WHERE pc.long_code LIKE CONCAT(CONCAT('%',#{categoryCode,jdbcType=VARCHAR}), '%')) t1
			</if>
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				(SELECT prc.product_id,GROUP_CONCAT(pc.code) groupCode FROM product_category_rel prc 
				LEFT JOIN pro_category pc ON pc.id = prc.category_id and prc.is_deleted =0 GROUP BY prc.product_id) t1
			</if>
			LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
			<!--LEFT JOIN  base_product_brand_ref bpf ON bp.id = bpf.product_id-->
			LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
			LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
			LEFT JOIN user_product_collect t2 ON bp.id = t2.product_id and t2.is_deleted = 0
			<if test="userId != null and userId != ''">
				and t2.user_id = #{userId,jdbcType=INTEGER}
			</if>
			<!-- 使用量查询 -->
			<!-- LEFT JOIN (SELECT puc.count,puc.product_id FROM product_usage_count puc  WHERE puc.is_deleted = 0
		   <if test="userId != null and userId != ''">
			   AND puc.user_id = #{userId,jdbcType=INTEGER}
		   </if>
		   ) C ON bp.id = C.product_id -->
       		<!-- 产品属性排序 -->
			<!-- <if test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
				LEFT JOIN (
					SELECT id AS product_id FROM (
					<foreach collection="attributeConditionList" index="index" item="item" open="" separator="UNION ALL" close="">
						select pa.product_id AS id from product_attribute pa
						LEFT JOIN product_props pp ON pp.id = pa.attribute_value_id
						WHERE 1=1
						and ${item}
					</foreach>
					) products group by products.id having count(products.id) = #{attributeConditionSize,jdbcType=INTEGER}
				) t4 ON t4.product_id = bp.id
			</if> -->
			<!-- 产品属性过滤 -->
			<if test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
				RIGHT JOIN (
					SELECT id AS product_id FROM (
					<foreach collection="attributeConditionList" index="index" item="item" open="" separator="UNION ALL" close="">
						select pa.product_id AS id from product_attribute pa
						LEFT JOIN product_props pp ON pp.id = pa.attribute_value_id
						WHERE 1=1
						and ${item}
					</foreach>
					) products group by products.id having count(products.id) &gt;= #{attributeConditionSize,jdbcType=INTEGER}
				) t4 ON t4.product_id = bp.id
			</if>
			<!-- 产品使用量排序 -->
<!-- 			LEFT JOIN (SELECT puc.count,puc.product_id FROM product_usage_count puc WHERE puc.is_deleted = 0 -->
<!-- 			<if test="userId != null and userId != ''"> -->
<!-- 			  and puc.user_id = #{userId,jdbcType=INTEGER}  -->
<!-- 			</if> -->
<!-- 			) t5 ON  t5.product_id = bp.id -->

			<!--<if test="productSmallTypeValue != null and productSmallTypeValue != 0">
				LEFT JOIN (SELECT pro.id FROM base_product pro WHERE pro.product_small_type_value=#{productSmallTypeValue,jdbcType=INTEGER} AND pro.is_deleted = 0) t6 
	        	ON t6.id = bp.id 
        	</if>-->
        	 
			<!-- 查询推荐产品 -->
<!-- 			<if test="designTempletId != null and designProductId != null and designProductId > 0">
				LEFT JOIN (SELECT pr.matching_degree,pr.product_id FROM product_recommendation pr
				WHERE pr.id IS NOT NULL
				AND pr.is_deleted = 0
				AND pr.templetProduct_id = #{designProductId,jdbcType=INTEGER}
				AND pr.design_templet_id = #{designTempletId,jdbcType=INTEGER}
				) t3 ON bp.id = t3.product_id
 			</if> -->
			WHERE bp.id IS NOT NULL
			AND   bp.is_deleted = 0
			AND  LOCATE('baimo',bp.product_code)=0
			<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
			<if test="isInternalUser != null and isInternalUser == 'yes'">
				<!-- AND   (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
				and bp.putaway_state in (1, 2, 3, 5)
			</if>
			<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
			</if>
			<!-- 房型归属过滤 -->
			<!-- <if test="houseTypeValues != null and houseTypeValues != ''">
				and CONCAT(',', bp.house_type_values, ',') like CONCAT(CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR}),',%')
			</if> -->
			<if test="houseTypeList !=  null and  houseTypeList.size > 0  ">
				and (
				<foreach collection="houseTypeList" index="index" item="item">
					<choose>
						<when test="index== 0">
							CONCAT(',', bp.house_type_values, ',') like CONCAT('%,',#{item,jdbcType=VARCHAR},',%')
						</when>
						<otherwise>
							or CONCAT(',', bp.house_type_values, ',') like CONCAT('%,',#{item,jdbcType=VARCHAR},',%')
						</otherwise>
					</choose>
				</foreach>
				)
			</if>
			<!-- 产品大类过滤 -->
			<if test="productTypeValue != null and productTypeValue != 0 ">
				and bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
				<!--diy分类搜索过滤同类型新增产品只显示主产品-->
				AND ( bp.parent_id IS NULL OR bp.parent_id = bp.id)
				AND bp.bm_ids IS NULL
			</if>
			
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				<foreach collection="categoryIdList" index="index" item="item">
					and FIND_IN_SET(#{item},t1.groupCode) > 0
				</foreach>
			</if>
			<!-- <if test="brandIds !=  null and  brandIds.size > 0  ">
				and bb.id in
				<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if> -->
						<!-- 新过滤逻辑(品牌,大类,小类,产品idList) -->
			<if test="baseProduct !=  null and  baseProduct.size > 0  ">
				and (
				<foreach collection="baseProduct" index="index" item="item">
					<choose>
						<when test="index== 0">
							<choose>
								<when test="item.productIdList!=null and item.productIdList.size>0">
									(bp.id in
										 <foreach collection="item.productIdList" index="indexProductId" item="itemProductId" open="(" separator="," close=")">
										 	#{itemProductId}
										 </foreach>
									)
								</when>
								<otherwise>
									<!-- 品牌&&大小类 -->
									(<!-- 1=1  -->
									<if test="item.brandId != null and item.brandId != 0 ">
										<!-- and  -->bp.brand_id=#{item.brandId}
									</if>
									<if test="item.productTypeValue != null and item.productTypeValue != '' ">
										and bp.product_type_value=#{item.productTypeValue}
									</if>
									<if test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
										and bp.product_small_type_value=#{item.productSmallTypeValue}
									</if>
									)
									<!-- 品牌||大小类 -->
								</otherwise>
							</choose>
						</when>
						<otherwise>
							or 
							<choose>
								<when test="item.productIdList!=null and item.productIdList.size>0">
									(bp.id in
										 <foreach collection="item.productIdList" index="indexProductId" item="itemProductId" open="(" separator="," close=")">
										 	#{itemProductId}
										 </foreach>
									)
								</when>
								<otherwise>
									<!-- 品牌&&大小类 -->
									(<!-- 1=1  -->
									<if test="item.brandId != null and item.brandId != 0 ">
										<!-- and  -->bp.brand_id=#{item.brandId}
									</if>
									<if test="item.productTypeValue != null and item.productTypeValue != '' ">
										and bp.product_type_value=#{item.productTypeValue}
									</if>
									<if test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
										and bp.product_small_type_value=#{item.productSmallTypeValue}
									</if>
									)
									<!-- 品牌||大小类 -->
								</otherwise>
							</choose>
						</otherwise>
					</choose>

				</foreach>
				)
			</if>
			<!-- 新过滤逻辑(品牌,大类,小类,产品idList)->end -->
<!-- 		<if test="productId != null and productId != ''"> -->
<!-- 			and T.product_id != #{productId,jdbcType=INTEGER} -->
<!-- 		</if> -->
			<!-- 特殊分类处理，如果是特殊分类只显示它本身分类，不是则不显示该大类下所配置的所有分类 -->
			<if test="specialProductType != null and specialProductType != '' ">
				<if test="productSmallTypeKey != null and productSmallTypeKey != ''">
					AND FIND_IN_SET(bp.product_small_type_mark, #{productSmallTypeKey,jdbcType=VARCHAR})
				</if>
				<if test="productSmallTypeKey == null or productSmallTypeKey == ''">
					AND !FIND_IN_SET(bp.product_small_type_mark, #{specialProductType,jdbcType=VARCHAR})
				</if>
			</if>
			<!-- 过滤特殊分类的产品长和高 如：门、门框-->
			<if test="productLength != null and productLength != '' and productHeight != null and productHeight != '' ">
				AND bp.product_length = #{productLength,jdbcType=VARCHAR}
				AND bp.product_height = #{productHeight,jdbcType=VARCHAR}
			</if>
			<!-- 过滤特殊分类的产品长和宽 如：地毯-->
			<if test="productLength != null and productLength != '' and productWidth != null and productWidth != '' ">
				AND bp.product_length &lt;= #{productLength,jdbcType=VARCHAR}
				AND bp.product_width &lt;= #{productWidth,jdbcType=VARCHAR}
			</if>
			<!-- 2016.10.16-黑名单分类list -->
			<if test="blacklistSet !=  null and  blacklistSet.size > 0  ">
				AND (SELECT  b.valuekey FROM sys_dictionary a ,sys_dictionary b 
			         WHERE a.type ='productType' 
			         AND   a.value = bp.product_type_value
			         AND   b.type = a.valuekey 
               AND   b.value = bp.product_small_type_value) not in 
				<foreach collection="blacklistSet" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<!-- 产品型号过滤 -->
			<if test="productModelNumber != null and productModelNumber != '' ">
				AND  (bp.product_model_number like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
				      or bp.product_code like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
					  OR bb.brand_name LIKE CONCAT(CONCAT('%', #{productModelNumber,jdbcType=VARCHAR}), '%'))
			</if>
<!-- 			<if test="designTempletId != null and designProductId != null and designProductId > 0"> -->
<!-- 				ORDER BY CONVERT(t3.matching_degree,SIGNED) DESC -->
<!-- 			</if> -->
	</select>

	<select id="findRecommendCategoryProductResultV2" resultMap="categoryProductSearchResultMap"
		parameterType="com.nork.product.model.ProductCategoryRel">
		SELECT DISTINCT bp.id as
		product_id,bp.product_code,bp.parent_id,rp.pic_path,bp.material_pic_ids,
		
		
		<!-- 推荐排序 -->
<!-- <if test="designTempletId != null and designProductId != null and designProductId > 0">
			WHEN t3.product_id IS NOT NULL THEN 10
		</if> -->
		<!-- 小分类排序 -->
		<choose>
			<when test="productSmallTypeValue != null and productSmallTypeValue != 0">
			CASE
			WHEN bp.product_small_type_value = #{productSmallTypeValue} and bp.product_type_value = #{productTypeValue}
			THEN 11
			ELSE 12 
			END AS order_type,
			</when>
			<otherwise>
			12 AS order_type,
			</otherwise>
		</choose>
		
		bp.colors_long_code,
		bp.product_small_type_value
		FROM
		<if test="categoryIdList ==  null or  categoryIdList.size == 0  ">
			(SELECT pcr.product_id FROM product_category_rel pcr
			LEFT JOIN pro_category pc ON pcr.category_id = pc.id
			WHERE pc.long_code LIKE
			CONCAT('%',#{categoryCode,jdbcType=VARCHAR}, '%')) t1
		</if>
		<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
			(SELECT prc.product_id,GROUP_CONCAT(pc.code) groupCode FROM
			product_category_rel prc
			LEFT JOIN pro_category pc ON pc.id = prc.category_id and prc.is_deleted
			=0 GROUP BY prc.product_id) t1
		</if>
		LEFT JOIN base_product bp ON t1.product_id = bp.id and bp.is_deleted =
		0
		LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
		LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
		<!-- 产品属性过滤 -->
		<if test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
			RIGHT JOIN (
			SELECT id AS product_id FROM (
			<foreach collection="attributeConditionList" index="index"
				item="item" open="" separator="UNION ALL" close="">
				select pa.product_id AS id from product_attribute pa
				LEFT JOIN product_props pp ON pp.id = pa.attribute_value_id
				WHERE 1=1
				and ${item}
			</foreach>
			) products group by products.id having count(products.id) &gt;=
			#{attributeConditionSize,jdbcType=INTEGER}
			) t4 ON t4.product_id = bp.id
		</if>

		<!-- 查询推荐产品 -->
<!-- 		<if test="designTempletId != null and designProductId != null and designProductId > 0">
			LEFT JOIN (SELECT pr.matching_degree,pr.product_id FROM
			product_recommendation pr
			WHERE pr.id IS NOT NULL
			AND pr.is_deleted = 0
			AND pr.templetProduct_id = #{designProductId,jdbcType=INTEGER}
			AND pr.design_templet_id = #{designTempletId,jdbcType=INTEGER}
			) t3 ON bp.id = t3.product_id
		</if> -->
		WHERE bp.id IS NOT NULL
		AND bp.is_deleted = 0
		AND LOCATE('baimo',bp.product_code)=0
		<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
		<if test="isInternalUser != null and isInternalUser == 'yes'">
			<!-- AND (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
			and bp.putaway_state in (1, 2, 3, 5)
		</if>
		<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
		</if>
		<!-- 房型归属过滤 -->
		<if test="houseTypeList !=  null and  houseTypeList.size > 0  ">
			and (
			<foreach collection="houseTypeList" index="index" item="item">
				<choose>
					<when test="index== 0">
						CONCAT(',', bp.house_type_values, ',') like
						CONCAT('%,',#{item,jdbcType=VARCHAR},',%')
					</when>
					<otherwise>
						or CONCAT(',', bp.house_type_values, ',') like
						CONCAT('%,',#{item,jdbcType=VARCHAR},',%')
					</otherwise>
				</choose>
			</foreach>
			)
		</if>
		<!-- 产品大类过滤 -->
		<if test="productTypeValue != null and productTypeValue != 0 ">
			and bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
			<!--diy分类搜索过滤同类型新增产品只显示主产品 -->
			AND ( bp.parent_id IS NULL OR bp.parent_id = bp.id)
			AND bp.bm_ids IS NULL
		</if>

		<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
			<foreach collection="categoryIdList" index="index" item="item">
				and FIND_IN_SET(#{item},t1.groupCode) > 0
			</foreach>
		</if>
		
		<!-- 新过滤逻辑(品牌,大类,小类,产品idList) -->
		<if test="baseProduct !=  null and  baseProduct.size > 0  ">
			and (
			<foreach collection="baseProduct" index="index" item="item">
				<choose>
					<when test="index== 0">
						<choose>
							<when test="item.productIdList!=null and item.productIdList.size>0">
								(bp.id in
								<foreach collection="item.productIdList" index="indexProductId"
									item="itemProductId" open="(" separator="," close=")">
									#{itemProductId}
								</foreach>
								)
							</when>
							<otherwise>
								<!-- 品牌&&大小类 -->
								(<!-- 1=1 -->
								<if test="item.brandId != null and item.brandId != 0 ">
									<!-- and -->
									bp.brand_id=#{item.brandId}
								</if>
								<if
									test="item.productTypeValue != null and item.productTypeValue != '' ">
									and bp.product_type_value=#{item.productTypeValue}
								</if>
								<if
									test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
									and bp.product_small_type_value=#{item.productSmallTypeValue}
								</if>
								)
								<!-- 品牌||大小类 -->
							</otherwise>
						</choose>
					</when>
					<otherwise>
						or
						<choose>
							<when test="item.productIdList!=null and item.productIdList.size>0">
								(bp.id in
								<foreach collection="item.productIdList" index="indexProductId"
									item="itemProductId" open="(" separator="," close=")">
									#{itemProductId}
								</foreach>
								)
							</when>
							<otherwise>
								<!-- 品牌&&大小类 -->
								(<!-- 1=1 -->
								<if test="item.brandId != null and item.brandId != 0 ">
									<!-- and -->
									bp.brand_id=#{item.brandId}
								</if>
								<if
									test="item.productTypeValue != null and item.productTypeValue != '' ">
									and bp.product_type_value=#{item.productTypeValue}
								</if>
								<if
									test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
									and bp.product_small_type_value=#{item.productSmallTypeValue}
								</if>
								)
								<!-- 品牌||大小类 -->
							</otherwise>
						</choose>
					</otherwise>
				</choose>

			</foreach>
			)
		</if>
		<!-- 新过滤逻辑(品牌,大类,小类,产品idList)->end -->

		<!-- 特殊分类处理，如果是特殊分类只显示它本身分类，不是则不显示该大类下所配置的所有分类 -->
		<if test="specialProductType != null and specialProductType != '' ">
			<!-- <if test="productSmallTypeKey != null and productSmallTypeKey != ''">
				AND FIND_IN_SET(bp.product_small_type_mark,
				#{productSmallTypeKey,jdbcType=VARCHAR})
			</if> -->
			<!-- 可能要查询多个特殊的小分类 ->start -->
			<if test="productSmallTypeKey != null and productSmallTypeKey != ''">
				AND 
				(
				<choose>
					<when test="smallTypeList != null and smallTypeList.size > 0">
						<foreach collection="smallTypeList" item="item" separator=" or ">
							 FIND_IN_SET(bp.product_small_type_mark, #{item,jdbcType=VARCHAR})
						</foreach>
					</when>
					<otherwise>
						FIND_IN_SET(bp.product_small_type_mark, #{productSmallTypeKey,jdbcType=VARCHAR})
					</otherwise>
				</choose>
				)
			</if>
			<!-- 可能要查询多个特殊的小分类 ->end -->
			<if test="productSmallTypeKey == null or productSmallTypeKey == ''">
				AND !FIND_IN_SET(bp.product_small_type_mark,
				#{specialProductType,jdbcType=VARCHAR})
			</if>
		</if>
		<!-- 过滤特殊分类的产品长和高 如：门、门框 -->
		<if
			test="productLength != null and productLength != '' and productHeight != null and productHeight != '' ">
			AND bp.product_length = #{productLength,jdbcType=VARCHAR}
			AND bp.product_height = #{productHeight,jdbcType=VARCHAR}
		</if>
		<!-- 过滤特殊分类的产品长和宽 如：地毯 -->
		<if
			test="productLength != null and productLength != '' and productWidth != null and productWidth != '' ">
			AND bp.product_length &lt;= #{productLength,jdbcType=VARCHAR}
			AND bp.product_width &lt;= #{productWidth,jdbcType=VARCHAR}
		</if>
		<!-- 2016.10.16-黑名单分类list -->
		<if test="blacklistSet !=  null and  blacklistSet.size > 0  ">
			AND (SELECT b.valuekey FROM sys_dictionary a ,sys_dictionary b
			WHERE a.type ='productType'
			AND a.value = bp.product_type_value
			AND b.type = a.valuekey
			AND b.value = bp.product_small_type_value) not in
			<foreach collection="blacklistSet" index="index" item="item"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<!-- 产品型号过滤 -->
		<if test="productModelNumber != null and productModelNumber != '' ">
			AND (bp.product_model_number like
			CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
			or bp.product_code like
			CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
			OR bb.brand_name LIKE CONCAT(CONCAT('%',
			#{productModelNumber,jdbcType=VARCHAR}), '%'))
		</if>
	</select>
	
	<select id="findRecommendCategoryProductResultV3" resultMap="categoryProductSearchResultMap"
		parameterType="com.nork.product.model.ProductCategoryRel">
		SELECT DISTINCT bp.id as
		product_id,bp.product_code,bp.parent_id,rp.pic_path,bp.material_pic_ids,bp.colors_long_code,
		
		CASE
		<!-- 推荐排序 -->
<!-- 		<if test="designTempletId != null and designProductId != null and designProductId > 0">
			WHEN t3.product_id IS NOT NULL THEN 10
		</if> -->
		<!-- 小分类排序 -->
		<if test="productSmallTypeValue != null and productSmallTypeValue != 0">
			WHEN bp.product_small_type_value = #{productSmallTypeValue} and bp.product_type_value = #{productTypeValue}
			THEN 11
		</if>
		ELSE 12 
		END AS order_type
		
		FROM
		<if test="categoryIdList ==  null or  categoryIdList.size == 0  ">
			(SELECT pcr.product_id FROM product_category_rel pcr
			LEFT JOIN pro_category pc ON pcr.category_id = pc.id
			WHERE 
			<!-- pc.long_code LIKE CONCAT('%',#{categoryCode,jdbcType=VARCHAR}, '%') -->
						<choose>
				<when test="firstStageCode != null and firstStageCode != ''">
					pc.first_stage_code = #{firstStageCode,jdbcType=VARCHAR}
				</when>
				<otherwise>
					<choose>
						<when test="secondStageCode != null and secondStageCode != ''">
							pc.second_stage_code = #{secondStageCode,jdbcType=VARCHAR}
						</when>
						<otherwise>
							<choose>
								<when test="thirdStageCode != null and thirdStageCode != ''">
									pc.third_stage_code = #{thirdStageCode,jdbcType=VARCHAR}
								</when>
								<otherwise>
									<choose>
										<when test="fourthStageCode != null and fourthStageCode != ''">
											pc.fourth_stage_code = #{fourthStageCode,jdbcType=VARCHAR}
										</when>
										<otherwise>
											<choose>
												<when test="fifthStageCode != null and fifthStageCode != ''">
													pc.fifth_stage_code = #{fifthStageCode,jdbcType=VARCHAR}
												</when>
												<otherwise>
													pc.long_code LIKE CONCAT('%',#{categoryCode,jdbcType=VARCHAR},'%')
												</otherwise>
											</choose>
										</otherwise>
									</choose>
								</otherwise>
							</choose>
						</otherwise>
					</choose>
				</otherwise>
			</choose>
			) t1
		</if>
		<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
			(SELECT prc.product_id,GROUP_CONCAT(pc.code) groupCode FROM
			product_category_rel prc
			LEFT JOIN pro_category pc ON pc.id = prc.category_id and prc.is_deleted
			=0 GROUP BY prc.product_id) t1
		</if>
		LEFT JOIN base_product bp ON t1.product_id = bp.id and bp.is_deleted =
		0
		LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
		LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
		<!-- 产品属性过滤 -->
		<if test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
			RIGHT JOIN (
			SELECT id AS product_id FROM (
			<foreach collection="attributeConditionList" index="index"
				item="item" open="" separator="UNION ALL" close="">
				select pa.product_id AS id from product_attribute pa
				LEFT JOIN product_props pp ON pp.id = pa.attribute_value_id
				WHERE 1=1
				and ${item}
			</foreach>
			) products group by products.id having count(products.id) &gt;=
			#{attributeConditionSize,jdbcType=INTEGER}
			) t4 ON t4.product_id = bp.id
		</if>

		<!-- 查询推荐产品 -->
<!-- 		<if test="designTempletId != null and designProductId != null and designProductId > 0">
			LEFT JOIN (SELECT pr.matching_degree,pr.product_id FROM
			product_recommendation pr
			WHERE pr.id IS NOT NULL
			AND pr.is_deleted = 0
			AND pr.templetProduct_id = #{designProductId,jdbcType=INTEGER}
			AND pr.design_templet_id = #{designTempletId,jdbcType=INTEGER}
			) t3 ON bp.id = t3.product_id
		</if> -->
		WHERE bp.id IS NOT NULL
		AND bp.is_deleted = 0
		AND LOCATE('baimo',bp.product_code)=0
		<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
		<if test="isInternalUser != null and isInternalUser == 'yes'">
			<!-- AND (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
			and bp.putaway_state in (1, 2, 3, 5)
		</if>
		<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
		</if>
		<!-- 房型归属过滤 -->
		<if test="houseTypeList !=  null and  houseTypeList.size > 0  ">
			and (
			<foreach collection="houseTypeList" index="index" item="item">
				<choose>
					<when test="index== 0">
						CONCAT(',', bp.house_type_values, ',') like
						CONCAT('%,',#{item,jdbcType=VARCHAR},',%')
					</when>
					<otherwise>
						or CONCAT(',', bp.house_type_values, ',') like
						CONCAT('%,',#{item,jdbcType=VARCHAR},',%')
					</otherwise>
				</choose>
			</foreach>
			)
		</if>
		<!-- 产品大类过滤 -->
		<if test="productTypeValue != null and productTypeValue != 0 ">
			and bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
			<!--diy分类搜索过滤同类型新增产品只显示主产品 -->
			AND ( bp.parent_id IS NULL OR bp.parent_id = bp.id)
			AND bp.bm_ids IS NULL
		</if>

		<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
			<foreach collection="categoryIdList" index="index" item="item">
				and FIND_IN_SET(#{item},t1.groupCode) > 0
			</foreach>
		</if>
		
		<!-- 新过滤逻辑(品牌,大类,小类,产品idList) -->
		<if test="baseProduct !=  null and  baseProduct.size > 0  ">
			and (
			<foreach collection="baseProduct" index="index" item="item">
				<choose>
					<when test="index== 0">
						<choose>
							<when test="item.productIdList!=null and item.productIdList.size>0">
								(bp.id in
								<foreach collection="item.productIdList" index="indexProductId"
									item="itemProductId" open="(" separator="," close=")">
									#{itemProductId}
								</foreach>
								)
							</when>
							<otherwise>
								<!-- 品牌&&大小类 -->
								(<!-- 1=1 -->
								<if test="item.brandId != null and item.brandId != 0 ">
									<!-- and -->
									bp.brand_id=#{item.brandId}
								</if>
								<if
									test="item.productTypeValue != null and item.productTypeValue != '' ">
									and bp.product_type_value=#{item.productTypeValue}
								</if>
								<if
									test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
									and bp.product_small_type_value=#{item.productSmallTypeValue}
								</if>
								)
								<!-- 品牌||大小类 -->
							</otherwise>
						</choose>
					</when>
					<otherwise>
						or
						<choose>
							<when test="item.productIdList!=null and item.productIdList.size>0">
								(bp.id in
								<foreach collection="item.productIdList" index="indexProductId"
									item="itemProductId" open="(" separator="," close=")">
									#{itemProductId}
								</foreach>
								)
							</when>
							<otherwise>
								<!-- 品牌&&大小类 -->
								(<!-- 1=1 -->
								<if test="item.brandId != null and item.brandId != 0 ">
									<!-- and -->
									bp.brand_id=#{item.brandId}
								</if>
								<if
									test="item.productTypeValue != null and item.productTypeValue != '' ">
									and bp.product_type_value=#{item.productTypeValue}
								</if>
								<if
									test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
									and bp.product_small_type_value=#{item.productSmallTypeValue}
								</if>
								)
								<!-- 品牌||大小类 -->
							</otherwise>
						</choose>
					</otherwise>
				</choose>

			</foreach>
			)
		</if>
		<!-- 新过滤逻辑(品牌,大类,小类,产品idList)->end -->

		<!-- 特殊分类处理，如果是特殊分类只显示它本身分类，不是则不显示该大类下所配置的所有分类 -->
		<if test="specialProductType != null and specialProductType != '' ">
			<if test="productSmallTypeKey != null and productSmallTypeKey != ''">
				AND FIND_IN_SET(bp.product_small_type_mark,
				#{productSmallTypeKey,jdbcType=VARCHAR})
			</if>
			<if test="productSmallTypeKey == null or productSmallTypeKey == ''">
				AND !FIND_IN_SET(bp.product_small_type_mark,
				#{specialProductType,jdbcType=VARCHAR})
			</if>
		</if>
		<!-- 过滤特殊分类的产品长和高 如：门、门框 -->
		<if
			test="productLength != null and productLength != '' and productHeight != null and productHeight != '' ">
			AND bp.product_length = #{productLength,jdbcType=VARCHAR}
			AND bp.product_height = #{productHeight,jdbcType=VARCHAR}
		</if>
		<!-- 过滤特殊分类的产品长和宽 如：地毯 -->
		<if
			test="productLength != null and productLength != '' and productWidth != null and productWidth != '' ">
			AND bp.product_length &lt;= #{productLength,jdbcType=VARCHAR}
			AND bp.product_width &lt;= #{productWidth,jdbcType=VARCHAR}
		</if>
		<!-- 2016.10.16-黑名单分类list -->
		<if test="blacklistSet !=  null and  blacklistSet.size > 0  ">
			AND (SELECT b.valuekey FROM sys_dictionary a ,sys_dictionary b
			WHERE a.type ='productType'
			AND a.value = bp.product_type_value
			AND b.type = a.valuekey
			AND b.value = bp.product_small_type_value) not in
			<foreach collection="blacklistSet" index="index" item="item"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<!-- 产品型号过滤 -->
		<if test="productModelNumber != null and productModelNumber != '' ">
			AND (bp.product_model_number like
			CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
			or bp.product_code like
			CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
			OR bb.brand_name LIKE CONCAT(CONCAT('%',
			#{productModelNumber,jdbcType=VARCHAR}), '%'))
		</if>
	</select>
	
	<select id="findRecommendCategoryProductResultCount" resultType="int"
			parameterType="com.nork.product.model.ProductCategoryRel">
			SELECT count(DISTINCT(T.product_id)) FROM (
	    	SELECT DISTINCT bp.id as product_id FROM  
	    	<if test="categoryIdList ==  null or  categoryIdList.size == 0  ">
				(select product_id from product_category_rel 
				where category_id in (select pc.id FROM pro_category pc where pc.is_deleted = 0 
				and pc.long_code LIKE CONCAT(CONCAT('%',#{categoryCode,jdbcType=VARCHAR}),'%'))) t1
			</if>
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				(SELECT prc.product_id,GROUP_CONCAT(pc.code) groupCode FROM product_category_rel prc 
				LEFT JOIN pro_category pc ON pc.id = prc.category_id and prc.is_deleted =0 GROUP BY prc.product_id) t1
			</if>
			LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
			LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
			LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
			<!-- 产品属性过滤 -->
			<if test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
				RIGHT JOIN (
					SELECT id AS product_id FROM (
					<foreach collection="attributeConditionList" index="index" item="item" open="" separator="UNION ALL" close="">
						select pa.product_id AS id from product_attribute pa
						LEFT JOIN product_props pp ON pp.id = pa.attribute_value_id
						WHERE 1=1
						and ${item}
					</foreach>
					) products group by products.id having count(products.id) &gt;= #{attributeConditionSize,jdbcType=INTEGER}
				) t4 ON t4.product_id = bp.id
			</if>
			<!-- 查询推荐产品 -->
<!-- 			<if test="designTempletId != null and designProductId != null and designProductId > 0">
				LEFT JOIN (SELECT pr.matching_degree,pr.product_id FROM product_recommendation pr 
				WHERE pr.id IS NOT NULL
				AND pr.is_deleted = 0
				AND pr.templetProduct_id = #{designProductId,jdbcType=INTEGER}
				AND pr.design_templet_id = #{designTempletId,jdbcType=INTEGER}
				) t3 ON t3.product_id = bp.id
			</if> -->
			WHERE bp.id IS NOT NULL
			AND   bp.is_deleted = 0
			AND  LOCATE('baimo',bp.product_code)=0
			<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
			<if test="isInternalUser != null and isInternalUser == 'yes'">
				<!-- AND   (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state =3) -->
				and bp.putaway_state in (1, 2, 3, 5)
			</if>
			<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
			</if>
			<!-- 房型归属过滤 -->
			<!-- <if test="houseTypeValues != null and houseTypeValues != ''">
				and CONCAT(',', bp.house_type_values, ',') like CONCAT(CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR}),',%')
			</if> -->
			<if test="houseTypeList !=  null and  houseTypeList.size > 0  ">
				and (
				<foreach collection="houseTypeList" index="index" item="item">
					<choose>
						<when test="index== 0">
							CONCAT(',', bp.house_type_values, ',') like CONCAT('%,',#{item,jdbcType=VARCHAR},',%')
						</when>
						<otherwise>
							or CONCAT(',', bp.house_type_values, ',') like CONCAT('%,',#{item,jdbcType=VARCHAR},',%')
						</otherwise>
					</choose>
				</foreach>
				)
			</if>
			<!-- 产品大类过滤 -->
			<if test="productTypeValue != null and productTypeValue != 0 ">
				and bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
				<!--diy分类搜索过滤同类型新增产品只显示主产品-->
				AND ( bp.parent_id IS NULL OR bp.parent_id = bp.id)
				AND bp.bm_ids IS NULL
			</if>
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				<foreach collection="categoryIdList" index="index" item="item">
					and FIND_IN_SET(#{item},t1.groupCode) > 0
				</foreach>
			</if>
			<!-- <if test="brandIds !=  null and  brandIds.size > 0  ">
				and bb.id in
				<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if> -->
			<!-- 新过滤逻辑(品牌,大类,小类,产品idList) -->
			<if test="baseProduct !=  null and  baseProduct.size > 0  ">
				and (
				<foreach collection="baseProduct" index="index" item="item">
					<choose>
						<when test="index== 0">
							<choose>
								<when test="item.productIdList!=null and item.productIdList.size>0">
									(bp.id in
										 <foreach collection="item.productIdList" index="indexProductId" item="itemProductId" open="(" separator="," close=")">
										 	#{itemProductId}
										 </foreach>
									)
								</when>
								<otherwise>
									<!-- 品牌&&大小类 -->
									(<!-- 1=1  -->
									<if test="item.brandId != null and item.brandId != 0 ">
										<!-- and  -->bp.brand_id=#{item.brandId}
									</if>
									<if test="item.productTypeValue != null and item.productTypeValue != '' ">
										and bp.product_type_value=#{item.productTypeValue}
									</if>
									<if test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
										and bp.product_small_type_value=#{item.productSmallTypeValue}
									</if>
									)
									<!-- 品牌||大小类 -->
								</otherwise>
							</choose>
						</when>
						<otherwise>
							or 
							<choose>
								<when test="item.productIdList!=null and item.productIdList.size>0">
									(bp.id in
										 <foreach collection="item.productIdList" index="indexProductId" item="itemProductId" open="(" separator="," close=")">
										 	#{itemProductId}
										 </foreach>
									)
								</when>
								<otherwise>
									<!-- 品牌&&大小类 -->
									(<!-- 1=1  -->
									<if test="item.brandId != null and item.brandId != 0 ">
										<!-- and  -->bp.brand_id=#{item.brandId}
									</if>
									<if test="item.productTypeValue != null and item.productTypeValue != '' ">
										and bp.product_type_value=#{item.productTypeValue}
									</if>
									<if test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
										and bp.product_small_type_value=#{item.productSmallTypeValue}
									</if>
									)
									<!-- 品牌||大小类 -->
								</otherwise>
							</choose>
						</otherwise>
					</choose>

				</foreach>
				)
			</if>
			<!-- 新过滤逻辑(品牌,大类,小类,产品idList)->end -->
<!-- 		<if test="productId != null and productId != ''"> -->
<!-- 			and T.product_id != #{productId,jdbcType=INTEGER} -->
<!-- 		</if> -->
			<!-- 特殊分类处理，如果是特殊分类只显示它本身分类，不是则不显示该大类下所配置的所有分类 -->
			<if test="specialProductType != null and specialProductType != '' ">
				<if test="productSmallTypeKey != null and productSmallTypeKey != ''">
					AND 
					(
					<choose>
						<when test="smallTypeList != null and smallTypeList.size > 0">
							<foreach collection="smallTypeList" item="item" separator=" or ">
								 FIND_IN_SET(bp.product_small_type_mark, #{item,jdbcType=VARCHAR})
							</foreach>
						</when>
						<otherwise>
							FIND_IN_SET(bp.product_small_type_mark, #{productSmallTypeKey,jdbcType=VARCHAR})
						</otherwise>
					</choose>
					)
				</if>
				<if test="productSmallTypeKey == null or productSmallTypeKey == ''">
					AND !FIND_IN_SET(bp.product_small_type_mark, #{specialProductType,jdbcType=VARCHAR})
				</if>
			</if>
			<!-- 过滤特殊分类的产品长和高 如：门、门框-->
			<if test="productLength != null and productLength != '' and productHeight != null and productHeight != '' ">
				AND bp.product_length = #{productLength,jdbcType=VARCHAR}
				AND bp.product_height = #{productHeight,jdbcType=VARCHAR}
			</if>
			<!-- 过滤特殊分类的产品长和宽 如：地毯-->
			<if test="productLength != null and productLength != '' and productWidth != null and productWidth != '' ">
				AND bp.product_length &lt;= #{productLength,jdbcType=VARCHAR}
				AND bp.product_width &lt;= #{productWidth,jdbcType=VARCHAR}
			</if>
			<!-- 2016.10.16-黑名单分类list -->
			<if test="blacklistSet !=  null and  blacklistSet.size > 0  ">
				AND (SELECT  b.valuekey FROM sys_dictionary a ,sys_dictionary b 
			         WHERE a.type ='productType' 
			         AND   a.value = bp.product_type_value
			         AND   b.type = a.valuekey 
               AND   b.value = bp.product_small_type_value) not in 
				<foreach collection="blacklistSet" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<!-- 产品型号过滤 -->
			<if test="productModelNumber != null and productModelNumber != '' ">
				AND  (bp.product_model_number like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
				      or bp.product_code like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
					  OR bb.brand_name LIKE CONCAT(CONCAT('%', #{productModelNumber,jdbcType=VARCHAR}), '%'))
			</if>
			) as T
	</select>

	<select id="findCategoryProductResultByLongCodeCount" resultType="int"
			parameterType="com.nork.product.model.ProductCategoryRel">
		SELECT count(DISTINCT(r.product_id)) 
		FROM (

		<if test="exceptRecommend == false">
				(SELECT bp.id as product_id
				FROM
				(select product_id 
				from product_category_rel 
				where category_id in (select pc.id FROM pro_category pc where pc.is_deleted = 0 
				and pc.long_code LIKE CONCAT(CONCAT('%',#{categoryCode,jdbcType=VARCHAR}),'%'))) t1
				LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
				LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
				LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
				LEFT JOIN (SELECT upc.id,upc.product_id 
				FROM user_product_collect upc WHERE upc.is_deleted = 0
				<if test="userId != null and userId != ''">
					and upc.user_id = #{userId,jdbcType=INTEGER}
				</if>
				) t2 ON t2.product_id = bp.id
<!-- 				<if test="designTempletId != null  and designProductId != null">
					RIGHT JOIN product_recommendation pr ON pr.product_id = bp.id
					AND pr.id IS NOT NULL
					AND pr.is_deleted = 0
					AND pr.templetProduct_id = #{designProductId,jdbcType=INTEGER}
					AND pr.design_templet_id = #{designTempletId,jdbcType=INTEGER}
				</if> -->
				WHERE bp.id IS NOT NULL
				AND bp.is_deleted = 0 
				<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
				<if test="isInternalUser != null and isInternalUser == 'yes'">
					<!-- AND   (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
					and bp.putaway_state in (1, 2, 3, 5)
				</if>
				<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
				</if>
				<if test="houseTypeValues != null and houseTypeValues != ''">
					and CONCAT(',', bp.house_type_values, ',') like CONCAT(CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR}),',%')
				</if>
				<if test="brandIds !=  null and  brandIds.size > 0  ">
					and bb.id in
					<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
						#{item}
					</foreach>
				</if>
				<if test="designTempletId != null  and designProductId != null">
					ORDER BY CONVERT(pr.matching_degree,SIGNED) DESC
				</if>
				)
		</if>
		<!-- 同大类通过产品走，更精确通过产品白摸走，不同大类通过推荐走 -->
		<if test="onlyShowRecommend == false and exceptRecommend == false">
			 union 
	    </if>
	     <if test="onlyShowRecommend == false ">
			   (SELECT bp.id as product_id
				FROM
				(select product_id 
				from product_category_rel 
				where category_id in (select pc.id FROM pro_category pc where pc.is_deleted = 0 
				and pc.long_code LIKE CONCAT(CONCAT('%',#{categoryCode,jdbcType=VARCHAR}),'%'))) t1
				LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
				LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
				LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
				LEFT JOIN (SELECT upc.id,upc.product_id 
				FROM user_product_collect upc WHERE upc.is_deleted = 0
				<if test="userId != null and userId != ''">
					and upc.user_id = #{userId,jdbcType=INTEGER}
				</if>
				) t2 ON t2.product_id = bp.id
				WHERE bp.id IS NOT NULL
				AND bp.is_deleted = 0 
				<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
				<if test="isInternalUser != null and isInternalUser == 'yes'">
					<!-- AND   (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
					and bp.putaway_state in (1, 2, 3, 5)
				</if>
				<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
				</if>
				<if test="productTypeValue != null and productTypeValue != '' and productSmallTypeValue != null"> 
				AND (
		    	(
			               (bp.spaceComon_id IS NOT NULL OR bp.designTemplet_id IS NOT NULL )
				  	 AND   (bp.spaceComon_id = #{spaceCommonId,jdbcType=INTEGER} or bp.designTemplet_id = #{designTempletId,jdbcType=INTEGER})
					 AND   bp.bm_ids IS NOT NULL
					 AND   CONCAT(CONCAT(',',bp.bm_ids),',') like CONCAT(CONCAT(',',#{templateProductId,jdbcType=VARCHAR}),',')
					 AND   EXISTS(SELECT  1 FROM sys_dictionary a ,sys_dictionary b 
			         WHERE a.type ='productType' 
			         AND   a.value = #{productTypeValue,jdbcType=VARCHAR} 
			         AND   b.type = a.valuekey 
                     AND   b.value =#{productSmallTypeValue,jdbcType=INTEGER}
                     AND   b.att4= '1') 
				) or (
					<if test="designTempletId != null and designTempletId > 0">
					 bp.designTemplet_id = #{designTempletId,jdbcType=INTEGER} AND	
					 </if>
			         bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
			         AND EXISTS 
			         (SELECT  1 
			          FROM sys_dictionary a ,sys_dictionary b 
			          WHERE a.type ='productType' 
			          AND   a.value = #{productTypeValue,jdbcType=VARCHAR} 
			          AND   b.type =a.valuekey  
			          AND   b.value =  #{productSmallTypeValue,jdbcType=INTEGER}
			          AND   b.att4 = '2')      
				  ) or(
				  	bp.bm_ids IS  NULL or bp.bm_ids = '0' 
				  	AND EXISTS 
			         (SELECT  1 
			          FROM sys_dictionary a ,sys_dictionary b 
			          WHERE a.type ='productType' 
			          AND   a.value = #{productTypeValue,jdbcType=VARCHAR} 
			          AND   b.type =a.valuekey  
			          AND   b.value =  #{productSmallTypeValue,jdbcType=INTEGER}
			          AND   b.att4 = '1') 
				  )
				)
			   </if>
				<if test="houseTypeValues != null and houseTypeValues != ''">
					and CONCAT(',', bp.house_type_values, ',') like CONCAT(CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR}),',%')
				</if>
				<if test="brandIds !=  null and  brandIds.size > 0  ">
					and bb.id in
					<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
						#{item}
					</foreach>
				</if>
				ORDER BY bp.product_type_value,bp.product_small_type_value)
		</if>
		) as r
		LEFT JOIN base_product pro  ON r.product_id = pro.id and pro.is_deleted = 0
		WHERE 1=1
<!-- 		<if test="productId != null and productId != ''"> -->
<!-- 			and T.product_id != #{productId,jdbcType=INTEGER} -->
<!-- 		</if> -->
		<!-- 特殊分类处理，如果是特殊分类只显示它本身分类，不是则不显示该大类下所配置的所有分类 -->
		<if test="specialProductType != null and specialProductType != '' ">
			<if test="productSmallTypeKey != null and productSmallTypeKey != ''">
				AND FIND_IN_SET(pro.product_small_type_mark, #{productSmallTypeKey,jdbcType=VARCHAR})
			</if>
			<if test="productSmallTypeKey == null or productSmallTypeKey == ''">
				AND !FIND_IN_SET(pro.product_small_type_mark, #{specialProductType,jdbcType=VARCHAR})
			</if>
		</if>
		
	</select>
	
	    <!-- 分类关联产品搜索结果 -->
	<resultMap id="categoryProductSearchResultMap2" type="com.nork.product.model.CategoryProductResult">
		<id column="id" property="id" jdbcType="INTEGER"/>
		<result column="product_id" property="productId" jdbcType="VARCHAR"/>
		<result column="product_code" property="productCode" jdbcType="VARCHAR"/>
		<result column="product_name" property="productName" jdbcType="VARCHAR"/>
		<result column="category_id" property="categoryId" jdbcType="VARCHAR"/>
		<result column="category_name" property="categoryName" jdbcType="VARCHAR"/>
		<result column="product_type_value" property="productTypeValue" jdbcType="INTEGER"/>
		<result column="product_small_type_value" property="productSmallTypeValue" jdbcType="INTEGER"/>
		<result column="pro_style_id" property="proStyleId" jdbcType="VARCHAR"/>
		<result column="color_id" property="colorId" jdbcType="VARCHAR"/>
		<result column="product_spec" property="productSpec" jdbcType="VARCHAR"/>
		<result column="product_width" property="productWidth" jdbcType="VARCHAR"/>
		<result column="product_height" property="productHeight" jdbcType="VARCHAR"/>
		<result column="sale_price" property="salePrice" jdbcType="VARCHAR"/>
		<result column="brand_id" property="brandId" jdbcType="INTEGER"/>
		<result column="brand_name" property="brandName" jdbcType="VARCHAR"/>
		<result column="pic_path" property="picPath" jdbcType="VARCHAR"/>
	</resultMap>
	
	<!-- 根据分类Code查询 -->
	<select id="getProCategoryListCountByCode" resultType="int"
		parameterType="java.util.Map">
		SELECT count(pcr.id)
		FROM pro_category pc,product_category_rel pcr,base_product bp
		WHERE pc.id =pcr.category_id  and pc.is_deleted = 0
		AND pcr.product_id = bp.id and pcr.is_deleted = 0
		AND pc.long_code LIKE CONCAT(CONCAT('%',#{categoryCode,jdbcType=VARCHAR}),'%')
		<if test="productName != null">
			AND bp.product_name like
			CONCAT(CONCAT('%',#{productName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="productCode != null">
			AND bp.product_code like
			CONCAT(CONCAT('%',#{productCode,jdbcType=VARCHAR}),'%')
		</if>
	</select>
	
		<!-- 根据分类Code查询 -->
	<select id="getProCategoryListByCode" resultMap="categoryProductSearchResultMap2"
		parameterType="java.util.Map">
		SELECT pcr.id,bp.id product_id,bp.product_code,bp.product_name,pc.id category_id,pc.name category_name
		,bp.product_type_value,bp.product_small_type_value 
		,bp.pro_style_id,bp.color_id,bp.product_spec,bp.product_width,bp.product_height,bp.sale_price 
		FROM pro_category pc,product_category_rel pcr,base_product bp
		WHERE 1=1 and pc.id = pcr.category_id AND pcr.product_id = bp.id and pc.is_deleted = 0 and pcr.is_deleted = 0 and bp.is_deleted = 0
		AND pc.long_code LIKE CONCAT(CONCAT('%',#{categoryCode,jdbcType=VARCHAR}),'%')
		<if test="productName != null">
			AND	 bp.product_name like CONCAT(CONCAT('%',#{productName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="productCode != null">
			AND	 bp.product_code like CONCAT(CONCAT('%',#{productCode,jdbcType=VARCHAR}),'%')
		</if>
		order by bp.product_type_value,bp.product_small_type_value
		<if test="start !=-1 and limit !=-1"> LIMIT #{start}, #{limit}</if>
	</select>
	
	<select id="findCategoryProductResult" resultMap="categoryProductSearchResultMap"
			parameterType="com.nork.product.model.ProductCategoryRel">
	    SELECT DISTINCT bb.id as brand_id,bp.id as product_id,bp.product_code,bp.product_name,bb.brand_name,bp.sale_price,
	    bp.pro_style_id,bp.color_id,bp.product_spec,bp.material_pic_ids,bp.parent_id,rp.pic_path,
			CASE WHEN t2.id IS NOT NULL THEN 1 ELSE 0 END AS collectState
			FROM (select product_id from product_category_rel 
			where category_id in (select pc.id FROM pro_category pc where pc.is_deleted = 0 
			and pc.long_code LIKE CONCAT(CONCAT('%',#{categoryCode,jdbcType=VARCHAR}),'%'))) t1
			LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
			LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
			LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
			LEFT JOIN (SELECT upc.id,upc.product_id FROM user_product_collect upc WHERE  upc.is_deleted = 0
			<if test="userId != null and userId != ''">
				and upc.user_id = #{userId,jdbcType=INTEGER}
			</if>
			) t2 ON t2.product_id = bp.id
<!-- 			<if test="designTempletId != null and designProductId != null and designProductId > 0"> -->
<!-- 				RIGHT JOIN product_recommendation pr ON pr.product_id = bp.id -->
<!-- 				AND pr.id IS NOT NULL -->
<!-- 				AND pr.is_deleted = 0 -->
<!-- 				AND pr.templetProduct_id = #{designProductId,jdbcType=INTEGER} -->
<!-- 				AND pr.design_templet_id = #{designTempletId,jdbcType=INTEGER} -->
<!-- 			</if> -->
			WHERE bp.id IS NOT NULL
			AND   bp.is_deleted = 0
			<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
			<if test="isInternalUser != null and isInternalUser == 'yes'">
				<!-- AND   (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
				and bp.putaway_state in (1, 2, 3, 5)
			</if>
			<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
			</if>
			<if test="houseTypeValues != null and houseTypeValues != ''">
				and CONCAT(',', bp.house_type_values, ',') like CONCAT(CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR}),',%')
			</if>
			<if test="brandIds !=  null and  brandIds.size > 0  ">
				and bb.id in
				<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
<!-- 		<if test="productId != null and productId != ''"> -->
<!-- 			and T.product_id != #{productId,jdbcType=INTEGER} -->
<!-- 		</if> -->
			<!-- 特殊分类处理，如果是特殊分类只显示它本身分类，不是则不显示该大类下所配置的所有分类 -->
			<if test="specialProductType != null and specialProductType != '' ">
				<if test="productSmallTypeKey != null and productSmallTypeKey != ''">
					AND FIND_IN_SET(bp.product_small_type_mark, #{productSmallTypeKey,jdbcType=VARCHAR})
				</if>
				<if test="productSmallTypeKey == null or productSmallTypeKey == ''">
					AND !FIND_IN_SET(bp.product_small_type_mark, #{specialProductType,jdbcType=VARCHAR})
				</if>
			</if>
<!-- 			<if test="designTempletId != null  and designProductId != null and designProductId > 0"> -->
<!-- 				ORDER BY CONVERT(pr.matching_degree,SIGNED) DESC,type,product_id -->
<!-- 			</if> -->
<!-- 			<if test="designTempletId == null and designProductId == null"> -->
				ORDER BY product_id 
<!-- 			</if> -->
<!-- 		<if test="start !=-1 and limit !=-1"> LIMIT #{start}, #{limit}</if> -->
	</select>
	
     <!-- end-->

	<select id="getCategoryProductResultByProductId" resultMap="categoryProductSearchResultMap"
			parameterType="com.nork.product.model.ProductCategoryRel">
		SELECT bp.id product_id,bp.product_code,bp.product_name,pc.id category_id,pc.name category_name,bp.pro_style_id,bp.color_id,bp.product_spec,bp.product_width,bp.product_height,
		bp.sale_price,bp.brand_id,bb.brand_name,rp.pic_path,bp.material_pic_ids,bp.parent_id
		,CASE WHEN upc1.id IS NOT NULL THEN 1 ELSE 0 END collectState FROM base_product bp
		LEFT JOIN base_brand bb ON bb.id = bp.brand_id
		LEFT JOIN product_category_rel prc ON prc.product_id = bp.id
		LEFT JOIN pro_category pc ON pc.id = prc.category_id
		LEFT JOIN res_pic rp ON rp.id = bp.pic_id
		LEFT JOIN (SELECT upc.id,upc.user_id,upc.product_id FROM user_product_collect upc WHERE upc.is_deleted = 0
		<if test="userId != null and userId != ''">
			and upc.user_id = #{userId,jdbcType=INTEGER}
		</if>
		) upc1  ON upc1.product_id = bp.id
		WHERE 1=1
		<if test="productId != null">
			and bp.id = #{productId,jdbcType=INTEGER}
		</if>
	</select>
	
	
	<select id="getCategoryProductResult" resultMap="categoryProductSearchResultMap"
			parameterType="com.nork.product.model.ProductCategoryRel"> 
		SELECT DISTINCT
			 T.product_id,
			 T.product_code,
			 T.pic_path,
			 T.collectState,
			 T.material_pic_ids,
			 T.parent_id
		FROM (
		<if test="exceptRecommend == false">
	    	(SELECT DISTINCT bp.id as product_id,bp.product_code,bp.parent_id,rp.pic_path,bp.material_pic_ids,
			CASE WHEN t2.id IS NOT NULL THEN 1 ELSE 0 END AS collectState,
			<!-- 推荐排序 -->
	<!-- 	<if test="designTempletId != null and designProductId != null and designProductId > 0">
				CASE WHEN t3.product_id IS NOT NULL THEN 2 ELSE 3 END AS recommende,
			</if> -->
			<if test="designTempletId != null and designProductId != null and designProductId > 0">
				3 AS recommende,
			</if>
			<!-- 小分类排序 -->
			<if test="productSmallTypeValue != null and productSmallTypeValue != 0">
				CASE WHEN t6.id IS NOT NULL  THEN 20 ELSE 30 END AS smallType,
			</if>
			CASE 
			<!-- 属性排序 -->
			<if test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
			 	WHEN t4.product_id IS NOT NULL THEN 11 
			 </if>
			 WHEN bp.id IS NOT NULL THEN 16
			 ELSE 17 END AS TYPE
			 <!-- 使用量排序 -->
<!-- 			CASE WHEN t5.count IS NOT NULL THEN t5.count ELSE 0 END AS usedCount  -->
			FROM  (select product_id from product_category_rel 
			where category_id in (select pc.id FROM pro_category pc where pc.is_deleted = 0 
			and pc.long_code LIKE CONCAT(CONCAT('%',#{categoryCode,jdbcType=VARCHAR}),'%'))) t1
			LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
			LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
			LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
			LEFT JOIN (SELECT upc.id,upc.product_id FROM user_product_collect upc WHERE  upc.is_deleted = 0
			<if test="userId != null and userId != ''">
				and upc.user_id = #{userId,jdbcType=INTEGER}
			</if>
			) t2 ON bp.id = t2.product_id 
			<!-- 产品属性排序 -->
			<if test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
				LEFT JOIN (
					SELECT id AS product_id FROM (
					<foreach collection="attributeConditionList" index="index" item="item" open="" separator="UNION ALL" close="">
						select pa.product_id AS id from product_attribute pa
						LEFT JOIN product_props pp ON pp.id = pa.attribute_value_id
						WHERE 1=1
						and ${item}
					</foreach>
					) products group by products.id having count(products.id) = #{attributeConditionSize,jdbcType=INTEGER}
				) t4 ON t4.product_id = bp.id
			</if>
			<!-- 产品属性过滤 -->
			<if test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
				RIGHT JOIN (
					SELECT id AS product_id FROM (
					<foreach collection="attributeConditionList" index="index" item="item" open="" separator="UNION ALL" close="">
						select pa.product_id AS id from product_attribute pa
						LEFT JOIN product_props pp ON pp.id = pa.attribute_value_id
						WHERE 1=1
						and ${item}
					</foreach>
					) products group by products.id having count(products.id) &gt;= #{attributeConditionSize,jdbcType=INTEGER}
				) t4 ON t4.product_id = bp.id
			</if>
			<!-- 产品使用量排序 -->
<!-- 			LEFT JOIN (SELECT puc.count,puc.product_id FROM product_usage_count puc WHERE puc.is_deleted = 0 -->
<!-- 			<if test="userId != null and userId != ''"> -->
<!-- 			  and puc.user_id = #{userId,jdbcType=INTEGER}  -->
<!-- 			</if> -->
<!-- 			) t5 ON  t5.product_id = bp.id -->
			<if test="productSmallTypeValue != null and productSmallTypeValue != 0">
				LEFT JOIN (SELECT pro.id FROM base_product pro WHERE pro.product_small_type_value=#{productSmallTypeValue,jdbcType=INTEGER} AND pro.is_deleted = 0) t6 
	        	ON t6.id = bp.id 
        	</if>
			<!-- 查询推荐产品 -->
<!-- 			<if test="designTempletId != null and designProductId != null and designProductId > 0">
				LEFT JOIN (SELECT pr.matching_degree,pr.product_id FROM product_recommendation pr 
				WHERE pr.id IS NOT NULL
				AND pr.is_deleted = 0
				AND pr.templetProduct_id = #{designProductId,jdbcType=INTEGER}
				AND pr.design_templet_id = #{designTempletId,jdbcType=INTEGER}
				) t3 ON bp.id = t3.product_id
 			</if> -->
			WHERE bp.id IS NOT NULL
			AND   bp.is_deleted = 0
			AND  LOCATE('baimo',bp.product_code)=0
			<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
			<if test="isInternalUser != null and isInternalUser == 'yes'">
				<!-- AND   (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
				and bp.putaway_state in (1, 2, 3, 5)
			</if>
			<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
			</if>
			<!-- 房型归属过滤 -->
			<!-- <if test="houseTypeValues != null and houseTypeValues != ''">
				and CONCAT(',', bp.house_type_values, ',') like CONCAT(CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR}),',%')
			</if> -->
		
			<!-- 产品空间类型过滤 -->
			<if test="houseTypeList !=  null and  houseTypeList.size > 0  ">
				and (
				<foreach collection="houseTypeList" index="index" item="item">
					<choose>
						<when test="index== 0">
							CONCAT(',', bp.house_type_values, ',') like CONCAT('%,',#{item,jdbcType=VARCHAR},',%')
						</when>
						<otherwise>
							or CONCAT(',', bp.house_type_values, ',') like CONCAT('%,',#{item,jdbcType=VARCHAR},',%')
						</otherwise>
					</choose>
				</foreach>
				)
			</if>
			
			<!-- 产品大类过滤 -->
			<if test="productTypeValue != null and productTypeValue != 0 ">
				and bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
				<!--diy分类搜索过滤同类型新增产品只显示主产品-->
				AND ( bp.parent_id IS NULL OR bp.parent_id = bp.id)
				AND bp.bm_ids IS NULL
			</if>
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				<foreach collection="categoryIdList" index="index" item="item">
					and FIND_IN_SET(#{item},t1.groupCode) > 0
				</foreach>
			</if>
			<if test="brandIds !=  null and  brandIds.size > 0  ">
				and bb.id in
				<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
<!-- 		<if test="productId != null and productId != ''"> -->
<!-- 			and T.product_id != #{productId,jdbcType=INTEGER} -->
<!-- 		</if> -->
			<!-- 特殊分类处理，如果是特殊分类只显示它本身分类，不是则不显示该大类下所配置的所有分类 -->
			<if test="specialProductType != null and specialProductType != '' ">
				<if test="productSmallTypeKey != null and productSmallTypeKey != ''">
					AND FIND_IN_SET(bp.product_small_type_mark, #{productSmallTypeKey,jdbcType=VARCHAR})
				</if>
				<if test="productSmallTypeKey == null or productSmallTypeKey == ''">
					AND !FIND_IN_SET(bp.product_small_type_mark, #{specialProductType,jdbcType=VARCHAR})
				</if>
			</if>
			<!-- 过滤特殊分类的产品长和高 如：门、门框-->
			<if test="productLength != null and productLength != '' and productHeight != null and productHeight != '' ">
				AND bp.product_length = #{productLength,jdbcType=VARCHAR}
				AND bp.product_height = #{productHeight,jdbcType=VARCHAR}
			</if>
			<!-- 过滤特殊分类的产品长和宽 如：地毯-->
			<if test="productLength != null and productLength != '' and productWidth != null and productWidth != '' ">
				AND bp.product_length &lt;= #{productLength,jdbcType=VARCHAR}
				AND bp.product_width &lt;= #{productWidth,jdbcType=VARCHAR}
			</if>
			<!-- 2016.10.16-黑名单分类list -->
			<if test="blacklistSet !=  null and  blacklistSet.size > 0  ">
				AND (SELECT  b.valuekey FROM sys_dictionary a ,sys_dictionary b 
			         WHERE a.type ='productType' 
			         AND   a.value = bp.product_type_value
			         AND   b.type = a.valuekey 
               AND   b.value = bp.product_small_type_value) not in 
				<foreach collection="blacklistSet" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<!-- 产品型号过滤 -->
			<if test="productModelNumber != null and productModelNumber != '' ">
				AND (bp.product_model_number like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
				      or bp.product_code like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
					  OR bb.brand_name LIKE CONCAT(CONCAT('%', #{productModelNumber,jdbcType=VARCHAR}), '%'))
			</if>
<!-- 			<if test="designTempletId != null and designProductId != null and designProductId > 0">
				ORDER BY CONVERT(t3.matching_degree,SIGNED) DESC
			</if> -->
			)
		</if>
		<if test="onlyShowRecommend == false and exceptRecommend == false">
			UNION 
	    </if>
	    <if test="onlyShowRecommend == false">
			(SELECT bp.id as product_id,bp.product_code,bp.parent_id,rp.pic_path,bp.material_pic_ids,
			 CASE WHEN t2.id IS NOT NULL THEN 1 ELSE 0 END AS collectState,
			 <if test="designTempletId != null and designProductId != null and designProductId > 0">
				1 as recommende,
			 </if>
			 <!-- 小分类排序 -->
			 <if test="productSmallTypeValue != null and productSmallTypeValue != 0">
				CASE WHEN t6.id IS NOT NULL  THEN 20 ELSE 30 END AS smallType,
			 </if>
			 CASE
			 <!-- 属性排序 -->
			 <if test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
			 	WHEN t4.product_id IS NOT NULL THEN 10 
			 </if>
			 WHEN bp.designTemplet_id IS NOT NULL AND bp.designTemplet_id != 0 THEN 12 
			 WHEN bp.spaceComon_id IS NOT NULL AND bp.spaceComon_id != 0 THEN 13 ELSE 14 END AS TYPE
<!-- 			 CASE WHEN t5.count IS NOT NULL THEN t5.count ELSE 0 END AS usedCount  -->
			 FROM  (select product_id from product_category_rel 
			where category_id in (select pc.id FROM pro_category pc where pc.is_deleted = 0 
			and pc.long_code LIKE CONCAT(CONCAT('%',#{categoryCode,jdbcType=VARCHAR}),'%'))) t1
			 LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
			 LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
			 LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
			 LEFT JOIN (SELECT upc.id,upc.product_id FROM user_product_collect upc WHERE  upc.is_deleted = 0
			<if test="userId != null and userId != ''">
				and upc.user_id = #{userId,jdbcType=INTEGER}
			</if>
			) t2 ON t2.product_id = bp.id 
			<!-- 产品属性排序 -->
			<if test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
				LEFT JOIN (
					SELECT id AS product_id FROM (
					<foreach collection="attributeConditionList" index="index" item="item" open="" separator="UNION ALL" close="">
						select pa.product_id as id from product_attribute pa
						LEFT JOIN product_props pp ON pp.id = pa.attribute_value_id
						WHERE 1=1
						and ${item}
					</foreach>
					) products group by products.id having count(products.id) = #{attributeConditionSize,jdbcType=INTEGER}
				) t4 ON t4.product_id = bp.id
			</if>
			<!-- 产品使用量排序 -->
<!-- 			LEFT JOIN (SELECT puc.count,puc.product_id FROM product_usage_count puc  WHERE puc.is_deleted = 0 -->
<!-- 			<if test="userId != null and userId != ''"> -->
<!-- 				and puc.user_id = #{userId,jdbcType=INTEGER}  -->
<!-- 			</if> -->
<!-- 			) t5 ON  t5.product_id = bp.id  -->
			<if test="productSmallTypeValue != null and productSmallTypeValue != 0">
				LEFT JOIN (SELECT pro.id FROM base_product pro WHERE pro.product_small_type_value=#{productSmallTypeValue,jdbcType=INTEGER} AND pro.is_deleted = 0) t6 
	        	ON t6.id = bp.id 
        	</if>
			WHERE bp.id IS NOT NULL
			AND   bp.is_deleted = 0
			<!-- 定制产品白模Id 或 绑定点白模Ids过滤-->
			<if test="templateProductId !=  null and  templateProductId.size > 0  ">
				and bp.bm_ids in
				<foreach collection="templateProductId" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			AND (bp.spaceComon_id = #{spaceCommonId,jdbcType=INTEGER} or bp.designTemplet_id = #{designTempletId,jdbcType=INTEGER})
			<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
			<if test="isInternalUser != null and isInternalUser == 'yes'">
				<!-- AND   (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
				and bp.putaway_state in (1, 2, 3, 5)
			</if>
			<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
			</if>
			<!-- 房型归属 -->
			<if test="houseTypeValues != null and houseTypeValues != ''">
				and CONCAT(',', bp.house_type_values, ',') like CONCAT(CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR}),',%')
			</if>
			<!-- 产品大类 -->
			<if test="productTypeValue != null and productTypeValue != ''">
				and bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
				<!--同类型新增产品不显示只显示主产品-->
				AND ( bp.parent_id IS NULL OR bp.parent_id = bp.id )
			</if>
<!-- 			<if test="productSmallTypeValue != null and productSmallTypeValue != 0"> -->
<!-- 				and bp.product_small_type_value = #{productSmallTypeValue,jdbcType=INTEGER} -->
<!-- 			</if> -->
			<!-- b2b用户授权码品牌过滤 -->
			<if test="brandIds !=  null and  brandIds.size > 0  ">
				and bb.id in
				<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
<!-- 		<if test="productId != null and productId != ''"> -->
<!-- 			and T.product_id != #{productId,jdbcType=INTEGER} -->
<!-- 		</if> -->
			<!-- 黑名单过滤 -->
			<if test="blacklistSet !=  null and  blacklistSet.size > 0  ">
				AND (SELECT  b.valuekey FROM sys_dictionary a ,sys_dictionary b 
			         WHERE a.type ='productType' 
			         AND   a.value = bp.product_type_value
			         AND   b.type = a.valuekey 
               		 AND   b.value = bp.product_small_type_value) not in 
				<foreach collection="blacklistSet" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<!-- 产品型号过滤 -->
			<if test="productModelNumber != null and productModelNumber != '' ">
				AND (bp.product_model_number like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
				      or bp.product_code like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
					OR bb.brand_name LIKE CONCAT(CONCAT('%', #{productModelNumber,jdbcType=VARCHAR}), '%')
				)
			</if>
			)
		</if>
		<!-- 通用背景墙过滤长度 -->
		<if test="showBgWall == true">
			UNION 
			(SELECT DISTINCT bp.id as product_id,bp.product_code,bp.parent_id,rp.pic_path,bp.material_pic_ids,
			CASE WHEN t2.id IS NOT NULL THEN 1 ELSE 0 END AS collectState,
			<!-- 推荐排序 -->
	<!-- 		<if test="designTempletId != null and designProductId != null and designProductId > 0">
				CASE WHEN t3.product_id IS NOT NULL THEN 2 ELSE 3 END AS recommende,
			</if> -->
			<if test="designTempletId != null and designProductId != null and designProductId > 0">
				3 AS recommende,
			</if>
			<!-- 小分类排序 -->
			<if test="productSmallTypeValue != null and productSmallTypeValue != 0">
				CASE WHEN t6.id IS NOT NULL  THEN 20 ELSE 30 END AS smallType,
			</if>
			CASE 
			<!-- 属性排序 -->
			<if test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
			 	WHEN t4.product_id IS NOT NULL THEN 11 
			 </if>
			 WHEN bp.id IS NOT NULL THEN 16
			 ELSE 17 END AS TYPE
			 <!-- 使用量排序 -->
<!-- 			CASE WHEN t5.count IS NOT NULL THEN t5.count ELSE 0 END AS usedCount  -->
			FROM  (select product_id from product_category_rel 
			where category_id in (select pc.id FROM pro_category pc where pc.is_deleted = 0 
			and pc.long_code LIKE CONCAT(CONCAT('%',#{categoryCode,jdbcType=VARCHAR}),'%'))) t1
			LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
			LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
			LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
			LEFT JOIN (SELECT upc.id,upc.product_id FROM user_product_collect upc WHERE  upc.is_deleted = 0
			<if test="userId != null and userId != ''">
				and upc.user_id = #{userId,jdbcType=INTEGER}
			</if>
			) t2 ON t2.product_id = bp.id
			<!-- 产品属性排序 -->
			<if test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
				LEFT JOIN (
					SELECT id AS product_id FROM (
					<foreach collection="attributeConditionList" index="index" item="item" open="" separator="UNION ALL" close="">
						select pa.product_id AS id from product_attribute pa
						LEFT JOIN product_props pp ON pp.id = pa.attribute_value_id
						WHERE 1=1
						and ${item}
					</foreach>
					) products group by products.id having count(products.id) = #{attributeConditionSize,jdbcType=INTEGER}
				) t4 ON t4.product_id = bp.id
			</if>
			<!-- 产品使用量排序 -->
<!-- 			LEFT JOIN (SELECT puc.count,puc.product_id FROM product_usage_count puc WHERE puc.is_deleted = 0 -->
<!-- 			<if test="userId != null and userId != ''"> -->
<!-- 			  and puc.user_id = #{userId,jdbcType=INTEGER}  -->
<!-- 			</if> -->
<!-- 			) t5 ON  t5.product_id = bp.id -->
			<if test="productSmallTypeValue != null and productSmallTypeValue != 0">
				LEFT JOIN (SELECT pro.id FROM base_product pro WHERE pro.product_small_type_value=#{productSmallTypeValue,jdbcType=INTEGER} AND pro.is_deleted = 0) t6 
	        	ON t6.id = bp.id 
        	</if>
        	<!-- 查询推荐产品 -->
<!-- 			<if test="designTempletId != null and designProductId != null and designProductId > 0">
				LEFT JOIN (SELECT pr.matching_degree,pr.product_id FROM product_recommendation pr 
				WHERE pr.id IS NOT NULL
				AND pr.is_deleted = 0
				AND pr.templetProduct_id = #{designProductId,jdbcType=INTEGER}
				AND pr.design_templet_id = #{designTempletId,jdbcType=INTEGER}
				) t3 ON bp.id = t3.product_id
 			</if> -->
			WHERE bp.id IS NOT NULL
			AND   bp.is_deleted = 0
			AND  LOCATE('baimo',bp.product_code)=0
			<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
			<if test="isInternalUser != null and isInternalUser == 'yes'">
				<!-- AND   (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
				and bp.putaway_state in (1, 2, 3, 5)
			</if>
			<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
			</if>
			<!-- 房型归属过滤 -->
			<if test="houseTypeValues != null and houseTypeValues != ''">
				and CONCAT(',', bp.house_type_values, ',') like CONCAT(CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR}),',%')
			</if>
			<!-- 产品大类过滤 -->
			<if test="productTypeValue != null and productTypeValue != 0 ">
				and bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
				<!--diy分类搜索过滤同类型新增产品只显示主产品-->
				AND ( bp.parent_id IS NULL OR bp.parent_id = bp.id)
				AND bp.bm_ids IS NULL
			</if>
			<!-- 产品小类过滤 -->
			<if test="productSmallTypeValue != null and productSmallTypeValue != 0">
				and bp.product_small_type_value = #{productSmallTypeValue,jdbcType=INTEGER}
			</if>
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				<foreach collection="categoryIdList" index="index" item="item">
					and FIND_IN_SET(#{item},t1.groupCode) > 0
				</foreach>
			</if>
			<if test="brandIds !=  null and  brandIds.size > 0  ">
				and bb.id in
				<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
<!-- 		<if test="productId != null and productId != ''"> -->
<!-- 			and T.product_id != #{productId,jdbcType=INTEGER} -->
<!-- 		</if> -->
			<!-- 2016.10.16-黑名单分类list -->
			<if test="blacklistSet !=  null and  blacklistSet.size > 0  ">
				AND (SELECT  b.valuekey FROM sys_dictionary a ,sys_dictionary b 
			         WHERE a.type ='productType' 
			         AND   a.value = bp.product_type_value
			         AND   b.type = a.valuekey 
               AND   b.value = bp.product_small_type_value) not in 
				<foreach collection="blacklistSet" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<!-- 产品型号过滤 -->
			<if test="productModelNumber != null and productModelNumber != '' ">
				AND  (bp.product_model_number like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
				      or bp.product_code like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
					  OR bb.brand_name LIKE CONCAT(CONCAT('%', #{productModelNumber,jdbcType=VARCHAR}), '%')
				)
			</if>
			<!-- 过滤背景墙产品长度 -->
			<if test="startLength != null and endLength != null">
				AND  bp.product_length between #{startLength,jdbcType=INTEGER} and #{endLength,jdbcType=INTEGER}
				AND  bp.product_length != #{startLength,jdbcType=INTEGER} 
			</if>
			<!-- 过滤背景墙产品高度 -->
			<if test="bgWallHeight != null and bgWallHeight != ''">
				<choose>
					<when test="bgWallHeight == '30' or bgWallHeight == '50'">
						AND  (bp.product_height = #{bgWallHeight,jdbcType=INTEGER})
					</when>
					<otherwise>
						AND  (bp.product_height = #{bgWallHeight,jdbcType=INTEGER} or (bp.product_height &lt; 230 and bp.product_height &gt; 50))
					</otherwise>
				</choose>
			</if>
			<!-- 背景墙白模长高为空，则不显示背景墙产品 -->
			<if test="isValue == true"> and bp.id = -1</if>
			)
		</if>
		) as T 
		 LEFT JOIN (SELECT puc.count,puc.product_id FROM product_usage_count puc  WHERE 1=1
         <if test="userId != null and userId != ''">
			AND puc.user_id = #{userId,jdbcType=INTEGER}  
		</if>
         AND puc.is_deleted = 0) C ON T.product_id = C.product_id
          
		 order by 
		<if test="designTempletId != null and designProductId != null and designProductId > 0">
				T.recommende,
		</if>
		<if test="productSmallTypeValue != null and productSmallTypeValue != 0">
			T.smallType,
		</if>
		 T.type,
		 C.count DESC,
		 T.product_id  
		<if test="start !=-1 and limit !=-1"> LIMIT #{start}, #{limit}</if>
	</select>
	
	<!-- 分类code和商品名称查询商品汇总 -->
	<select id="getCategoryProductCount" resultType="int" parameterType="com.nork.product.model.ProductCategoryRel">
	    SELECT count(DISTINCT(T.product_id))  
	    FROM (
	    <if test="exceptRecommend == false">
	    	(SELECT DISTINCT bp.id as product_id FROM  (select product_id from product_category_rel 
			where category_id in (select pc.id FROM pro_category pc where pc.is_deleted = 0 
			and pc.long_code LIKE CONCAT(CONCAT('%',#{categoryCode,jdbcType=VARCHAR}),'%'))) t1
			LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
			LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
			LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
			<!-- 产品属性过滤 -->
			<if test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
				RIGHT JOIN (
					SELECT id AS product_id FROM (
					<foreach collection="attributeConditionList" index="index" item="item" open="" separator="UNION ALL" close="">
						select pa.product_id AS id from product_attribute pa
						LEFT JOIN product_props pp ON pp.id = pa.attribute_value_id
						WHERE 1=1
						and ${item}
					</foreach>
					) products group by products.id having count(products.id) &gt;= #{attributeConditionSize,jdbcType=INTEGER}
				) t4 ON t4.product_id = bp.id
			</if>
			<!-- 查询推荐产品 -->
<!-- 			<if test="designTempletId != null and designProductId != null and designProductId > 0">
				LEFT JOIN (SELECT pr.matching_degree,pr.product_id FROM product_recommendation pr 
				WHERE pr.id IS NOT NULL
				AND pr.is_deleted = 0
				AND pr.templetProduct_id = #{designProductId,jdbcType=INTEGER}
				AND pr.design_templet_id = #{designTempletId,jdbcType=INTEGER}
				) t3 ON t3.product_id = bp.id
			</if> -->
			WHERE bp.id IS NOT NULL
			AND   bp.is_deleted = 0
			AND  LOCATE('baimo',bp.product_code)=0
			<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
			<if test="isInternalUser != null and isInternalUser == 'yes'">
				<!-- AND   (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
				and bp.putaway_state in (1, 2, 3, 5)
			</if>
			<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
			</if>
			<!-- 房型归属过滤 -->
			<!-- <if test="houseTypeValues != null and houseTypeValues != ''">
				and CONCAT(',', bp.house_type_values, ',') like CONCAT(CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR}),',%')
			</if> -->
			
			<!-- 产品空间类型过滤 -->
			<if test="houseTypeList !=  null and  houseTypeList.size > 0  ">
				and (
				<foreach collection="houseTypeList" index="index" item="item">
					<choose>
						<when test="index== 0">
							CONCAT(',', bp.house_type_values, ',') like CONCAT('%,',#{item,jdbcType=VARCHAR},',%')
						</when>
						<otherwise>
							or CONCAT(',', bp.house_type_values, ',') like CONCAT('%,',#{item,jdbcType=VARCHAR},',%')
						</otherwise>
					</choose>
				</foreach>
				)
			</if>
			
			<!-- 产品大类过滤 -->
			<if test="productTypeValue != null and productTypeValue != 0 ">
				and bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
				<!--diy分类搜索过滤同类型新增产品只显示主产品-->
				AND ( bp.parent_id IS NULL OR bp.parent_id = bp.id)
				AND bp.bm_ids IS NULL
			</if>
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				<foreach collection="categoryIdList" index="index" item="item">
					and FIND_IN_SET(#{item},t1.groupCode) > 0
				</foreach>
			</if>
			<if test="brandIds !=  null and  brandIds.size > 0  ">
				and bb.id in
				<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
<!-- 		<if test="productId != null and productId != ''"> -->
<!-- 			and T.product_id != #{productId,jdbcType=INTEGER} -->
<!-- 		</if> -->
			<!-- 特殊分类处理，如果是特殊分类只显示它本身分类，不是则不显示该大类下所配置的所有分类 -->
			<if test="specialProductType != null and specialProductType != '' ">
				<if test="productSmallTypeKey != null and productSmallTypeKey != ''">
					AND FIND_IN_SET(bp.product_small_type_mark, #{productSmallTypeKey,jdbcType=VARCHAR})
				</if>
				<if test="productSmallTypeKey == null or productSmallTypeKey == ''">
					AND !FIND_IN_SET(bp.product_small_type_mark, #{specialProductType,jdbcType=VARCHAR})
				</if>
			</if>
			<!-- 过滤特殊分类的产品长和高 如：门、门框-->
			<if test="productLength != null and productLength != '' and productHeight != null and productHeight != '' ">
				AND bp.product_length = #{productLength,jdbcType=VARCHAR}
				AND bp.product_height = #{productHeight,jdbcType=VARCHAR}
			</if>
			<!-- 过滤特殊分类的产品长和宽 如：地毯-->
			<if test="productLength != null and productLength != '' and productWidth != null and productWidth != '' ">
				AND bp.product_length &lt;= #{productLength,jdbcType=VARCHAR}
				AND bp.product_width &lt;= #{productWidth,jdbcType=VARCHAR}
			</if>
			<!-- 2016.10.16-黑名单分类list -->
			<if test="blacklistSet !=  null and  blacklistSet.size > 0  ">
				AND (SELECT  b.valuekey FROM sys_dictionary a ,sys_dictionary b 
			         WHERE a.type ='productType' 
			         AND   a.value = bp.product_type_value
			         AND   b.type = a.valuekey 
               AND   b.value = bp.product_small_type_value) not in 
				<foreach collection="blacklistSet" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<!-- 产品型号过滤 -->
			<if test="productModelNumber != null and productModelNumber != '' ">
				AND  (bp.product_model_number like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
				      or bp.product_code like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
					  OR bb.brand_name LIKE CONCAT(CONCAT('%', #{productModelNumber,jdbcType=VARCHAR}), '%')
				)
			</if>
			)
		</if>
		<if test="onlyShowRecommend == false and exceptRecommend == false" >
			UNION 
	    </if>
	    <if test="onlyShowRecommend == false">
			(SELECT bp.id as product_id FROM (select product_id from product_category_rel 
			 where category_id in (select pc.id FROM pro_category pc where pc.is_deleted = 0 
			 and pc.long_code LIKE CONCAT(CONCAT('%',#{categoryCode,jdbcType=VARCHAR}),'%'))) t1
			 LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
			 LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
			 LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
			WHERE bp.id IS NOT NULL
			AND   bp.is_deleted = 0
			<!-- 定制产品白模Id 或 绑定点白模Ids过滤-->
			<if test="templateProductId !=  null and  templateProductId.size > 0  ">
				and bp.bm_ids in
				<foreach collection="templateProductId" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			AND (bp.spaceComon_id = #{spaceCommonId,jdbcType=INTEGER} or bp.designTemplet_id = #{designTempletId,jdbcType=INTEGER})
			<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
			<if test="isInternalUser != null and isInternalUser == 'yes'">
				<!-- AND   (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
				and bp.putaway_state in (1, 2, 3, 5)
			</if>
			<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
			</if>
			<!-- 房型归属 -->
			<if test="houseTypeValues != null and houseTypeValues != ''">
				and CONCAT(',', bp.house_type_values, ',') like CONCAT(CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR}),',%')
			</if>
			<!-- 产品大类 -->
			<if test="productTypeValue != null and productTypeValue != ''">
				and bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
				<!--同类型新增产品不显示只显示主产品-->
				AND ( bp.parent_id IS NULL OR bp.parent_id = bp.id )
			</if>
<!-- 			<if test="productSmallTypeValue != null and productSmallTypeValue != 0"> -->
<!-- 				and bp.product_small_type_value = #{productSmallTypeValue,jdbcType=INTEGER} -->
<!-- 			</if> -->
			<!-- b2b用户授权码品牌过滤 -->
			<if test="brandIds !=  null and  brandIds.size > 0  ">
				and bb.id in
				<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
<!-- 		<if test="productId != null and productId != ''"> -->
<!-- 			and T.product_id != #{productId,jdbcType=INTEGER} -->
<!-- 		</if> -->
			<!-- 黑名单过滤 -->
			<if test="blacklistSet !=  null and  blacklistSet.size > 0  ">
				AND (SELECT  b.valuekey FROM sys_dictionary a ,sys_dictionary b 
			         WHERE a.type ='productType' 
			         AND   a.value = bp.product_type_value
			         AND   b.type = a.valuekey 
               		 AND   b.value = bp.product_small_type_value) not in 
				<foreach collection="blacklistSet" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<!-- 产品型号过滤 -->
			<if test="productModelNumber != null and productModelNumber != '' ">
				AND  (bp.product_model_number like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
				      or bp.product_code like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
					  OR bb.brand_name LIKE CONCAT(CONCAT('%', #{productModelNumber,jdbcType=VARCHAR}), '%')
				)
			</if>
			)
		</if>
		<!-- 通用背景墙过滤长度高度 -->
		<if test="showBgWall == true">
			UNION 
			(SELECT bp.id as product_id  FROM (select product_id from product_category_rel 
			 where category_id in (select pc.id FROM pro_category pc where pc.is_deleted = 0 
			 and pc.long_code LIKE CONCAT(CONCAT('%',#{categoryCode,jdbcType=VARCHAR}),'%'))) t1
			 LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
			 LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
			 LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
			 <!-- 查询推荐产品 -->
<!-- 			 <if test="designTempletId != null and designProductId != null and designProductId > 0">
				LEFT JOIN (SELECT pr.matching_degree,pr.product_id FROM product_recommendation pr 
				WHERE pr.id IS NOT NULL
				AND pr.is_deleted = 0
				AND pr.templetProduct_id = #{designProductId,jdbcType=INTEGER}
				AND pr.design_templet_id = #{designTempletId,jdbcType=INTEGER}
				) t3 ON bp.id = t3.product_id
 			 </if> -->
			WHERE bp.id IS NOT NULL
			AND   bp.is_deleted = 0
			AND  LOCATE('baimo',bp.product_code)=0
			<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
			<if test="isInternalUser != null and isInternalUser == 'yes'">
				<!-- AND   (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
				and bp.putaway_state in (1, 2, 3, 5)
			</if>
			<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
			</if>
			<!-- 房型归属过滤 -->
			<if test="houseTypeValues != null and houseTypeValues != ''">
				and CONCAT(',', bp.house_type_values, ',') like CONCAT(CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR}),',%')
			</if>
			<!-- 产品大类过滤 -->
			<if test="productTypeValue != null and productTypeValue != 0 ">
				and bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
				<!--diy分类搜索过滤同类型新增产品只显示主产品-->
				AND ( bp.parent_id IS NULL OR bp.parent_id = bp.id)
				AND bp.bm_ids IS NULL
			</if>
			<!-- 产品小类过滤 -->
			<if test="productSmallTypeValue != null and productSmallTypeValue != 0">
				and bp.product_small_type_value = #{productSmallTypeValue,jdbcType=INTEGER}
			</if>
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				<foreach collection="categoryIdList" index="index" item="item">
					and FIND_IN_SET(#{item},t1.groupCode) > 0
				</foreach>
			</if>
			<if test="brandIds !=  null and  brandIds.size > 0  ">
				and bb.id in
				<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
<!-- 		<if test="productId != null and productId != ''"> -->
<!-- 			and T.product_id != #{productId,jdbcType=INTEGER} -->
<!-- 		</if> -->
			<!-- 2016.10.16-黑名单分类list -->
			<if test="blacklistSet !=  null and  blacklistSet.size > 0  ">
				AND (SELECT  b.valuekey FROM sys_dictionary a ,sys_dictionary b 
			         WHERE a.type ='productType' 
			         AND   a.value = bp.product_type_value
			         AND   b.type = a.valuekey 
               AND   b.value = bp.product_small_type_value) not in 
				<foreach collection="blacklistSet" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<!-- 产品型号过滤 -->
			<if test="productModelNumber != null and productModelNumber != '' ">
				AND  (bp.product_model_number like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
				      or bp.product_code like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
					  OR bb.brand_name LIKE CONCAT(CONCAT('%', #{productModelNumber,jdbcType=VARCHAR}), '%')
				)
			</if>
			<!-- 过滤背景墙产品长度 -->
			<if test="startLength != null and endLength != null">
				AND  bp.product_length between #{startLength,jdbcType=INTEGER} and #{endLength,jdbcType=INTEGER}
				AND  bp.product_length != #{startLength,jdbcType=INTEGER} 
			</if>
			<!-- 过滤背景墙产品高度 -->
			<if test="bgWallHeight != null and bgWallHeight != ''">
				<choose>
					<when test="bgWallHeight == '30' or bgWallHeight == '50'">
						AND  (bp.product_height = #{bgWallHeight,jdbcType=INTEGER})
					</when>
					<otherwise>
						AND  (bp.product_height = #{bgWallHeight,jdbcType=INTEGER} or (bp.product_height &lt; 230 and bp.product_height &gt; 50))
					</otherwise>
				</choose>
			</if>
			<!-- 背景墙白模长高为空，则不显示背景墙产品 -->
			<if test="isValue == true">and bp.id = -1</if>
			)
			</if>
		) as T
	</select>
	
	<!-- 只查推荐产品 -->
	<select id="findRecommendResult" resultMap="categoryProductSearchResultMap"
			parameterType="com.nork.product.model.ProductCategoryRel">
	    	SELECT DISTINCT bp.id as product_id,bp.product_code,bp.parent_id,rp.pic_path,bp.material_pic_ids,bp.colors_long_code,
			CASE WHEN t2.id IS NOT NULL THEN 1 ELSE 0 END AS collectState,
			CASE WHEN C.product_id IS NOT NULL THEN C.count else 0 end as product_count,
			CASE
			 WHEN bp.id IS NOT NULL THEN 12
			 ELSE 13 END AS order_type
			FROM  
			<if test="categoryIdList ==  null or  categoryIdList.size == 0  ">
				(select product_id from product_category_rel 
				where category_id in (select pc.id FROM pro_category pc where pc.is_deleted = 0 
				and pc.long_code LIKE CONCAT(CONCAT('%',#{categoryCode,jdbcType=VARCHAR}),'%'))) t1
			</if>
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				(SELECT prc.product_id,GROUP_CONCAT(pc.code) groupCode FROM product_category_rel prc 
				LEFT JOIN pro_category pc ON pc.id = prc.category_id and prc.is_deleted =0 GROUP BY prc.product_id) t1
			</if>
			LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
			LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
			LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
			LEFT JOIN (SELECT upc.id,upc.product_id FROM user_product_collect upc WHERE  upc.is_deleted = 0
			<if test="userId != null and userId != ''">
				and upc.user_id = #{userId,jdbcType=INTEGER}
			</if>
			) t2 ON bp.id = t2.product_id 
			<!-- 使用量查询 -->
		 	LEFT JOIN (SELECT puc.count,puc.product_id FROM product_usage_count puc  WHERE puc.is_deleted = 0
	        <if test="userId != null and userId != ''">
				AND puc.user_id = #{userId,jdbcType=INTEGER}  
			</if>
	        ) C ON bp.id = C.product_id
			<!-- 产品属性过滤 -->
			<if test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
				RIGHT JOIN (
					SELECT id AS product_id FROM (
					<foreach collection="attributeConditionList" index="index" item="item" open="" separator="UNION ALL" close="">
						select pa.product_id AS id from product_attribute pa
						LEFT JOIN product_props pp ON pp.id = pa.attribute_value_id
						WHERE 1=1
						and ${item}
					</foreach>
					) products group by products.id having count(products.id) &gt;= #{attributeConditionSize,jdbcType=INTEGER}
				) t4 ON t4.product_id = bp.id
			</if>
			<!-- 查询推荐产品 -->
<!-- 			<if test="designTempletId != null and designProductId != null and designProductId > 0">
				RIGHT JOIN (SELECT pr.matching_degree,pr.product_id FROM product_recommendation pr 
				WHERE pr.id IS NOT NULL
				AND pr.is_deleted = 0
				AND pr.templetProduct_id = #{designProductId,jdbcType=INTEGER}
				AND pr.design_templet_id = #{designTempletId,jdbcType=INTEGER}
				) t3 ON bp.id = t3.product_id
 			</if> -->
			WHERE bp.id IS NOT NULL
			AND   bp.is_deleted = 0
			AND  LOCATE('baimo',bp.product_code)=0
			<!--diy分类搜索过滤同类型新增产品只显示主产品-->
			AND ( bp.parent_id IS NULL OR bp.parent_id = bp.id)
<!-- 			AND bp.bm_ids IS NULL -->
			<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
			<if test="isInternalUser != null and isInternalUser == 'yes'">
				<!-- AND   (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
				and bp.putaway_state in (1, 2, 3, 5)
			</if>
			<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
			</if>
			<if test="houseTypeList !=  null and  houseTypeList.size > 0  ">
				and (
				<foreach collection="houseTypeList" index="index" item="item">
					<choose>
						<when test="index== 0">
							CONCAT(',', bp.house_type_values, ',') like CONCAT('%,',#{item,jdbcType=VARCHAR},',%')
						</when>
						<otherwise>
							or CONCAT(',', bp.house_type_values, ',') like CONCAT('%,',#{item,jdbcType=VARCHAR},',%')
						</otherwise>
					</choose>
				</foreach>
				)
			</if>
			<!-- 产品大类过滤 -->
			<!-- <if test="productTypeValue != null and productTypeValue != 0 ">
				and bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
			</if> -->
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				<foreach collection="categoryIdList" index="index" item="item">
					and FIND_IN_SET(#{item},t1.groupCode) > 0
				</foreach>
			</if>
			<!-- <if test="brandIds !=  null and  brandIds.size > 0  ">
				and bb.id in
				<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if> -->
			<!-- 新过滤逻辑(品牌,大类,小类,产品idList) -->
			<if test="baseProduct !=  null and  baseProduct.size > 0  ">
				and (
				<foreach collection="baseProduct" index="index" item="item">
					<choose>
						<when test="index== 0">
							<choose>
								<when test="item.productIdList!=null and item.productIdList.size>0">
									(bp.id in
										 <foreach collection="item.productIdList" index="indexProductId" item="itemProductId" open="(" separator="," close=")">
										 	#{itemProductId}
										 </foreach>
									)
								</when>
								<otherwise>
									<!-- 品牌&&大小类 -->
									(<!-- 1=1  -->
									<if test="item.brandId != null and item.brandId != 0 ">
										<!-- and  -->bp.brand_id=#{item.brandId}
									</if>
									<if test="item.productTypeValue != null and item.productTypeValue != '' ">
										and bp.product_type_value=#{item.productTypeValue}
									</if>
									<if test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
										and bp.product_small_type_value=#{item.productSmallTypeValue}
									</if>
									)
									<!-- 品牌||大小类 -->
								</otherwise>
							</choose>
						</when>
						<otherwise>
							or 
							<choose>
								<when test="item.productIdList!=null and item.productIdList.size>0">
									(bp.id in
										 <foreach collection="item.productIdList" index="indexProductId" item="itemProductId" open="(" separator="," close=")">
										 	#{itemProductId}
										 </foreach>
									)
								</when>
								<otherwise>
									<!-- 品牌&&大小类 -->
									(<!-- 1=1  -->
									<if test="item.brandId != null and item.brandId != 0 ">
										<!-- and  -->bp.brand_id=#{item.brandId}
									</if>
									<if test="item.productTypeValue != null and item.productTypeValue != '' ">
										and bp.product_type_value=#{item.productTypeValue}
									</if>
									<if test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
										and bp.product_small_type_value=#{item.productSmallTypeValue}
									</if>
									)
									<!-- 品牌||大小类 -->
								</otherwise>
							</choose>
						</otherwise>
					</choose>
				</foreach>
				)
			</if>
			<!-- 新过滤逻辑(品牌,大类,小类,产品idList)->end -->
<!-- 		<if test="productId != null and productId != ''"> -->
<!-- 			and T.product_id != #{productId,jdbcType=INTEGER} -->
<!-- 		</if> -->
			<!-- 特殊分类处理，如果是特殊分类只显示它本身分类，不是则不显示该大类下所配置的所有分类 -->
			<!-- <if test="specialProductType != null and specialProductType != '' ">
				<if test="productSmallTypeKey != null and productSmallTypeKey != ''">
					AND FIND_IN_SET(bp.product_small_type_mark, #{productSmallTypeKey,jdbcType=VARCHAR})
				</if>
				<if test="productSmallTypeKey == null or productSmallTypeKey == ''">
					AND !FIND_IN_SET(bp.product_small_type_mark, #{specialProductType,jdbcType=VARCHAR})
				</if>
			</if> -->
			<!-- 过滤特殊分类的产品长和高 如：门、门框-->
			<if test="productLength != null and productLength != '' and productHeight != null and productHeight != '' ">
				AND bp.product_length = #{productLength,jdbcType=VARCHAR}
				AND bp.product_height = #{productHeight,jdbcType=VARCHAR}
			</if>
			<!-- 过滤特殊分类的产品长和宽 如：地毯-->
			<if test="productLength != null and productLength != '' and productWidth != null and productWidth != '' ">
				AND bp.product_length &lt;= #{productLength,jdbcType=VARCHAR}
				AND bp.product_width &lt;= #{productWidth,jdbcType=VARCHAR}
			</if>
			<!-- 2016.10.16-黑名单分类list -->
			<if test="blacklistSet !=  null and  blacklistSet.size > 0  ">
				AND (SELECT  b.valuekey FROM sys_dictionary a ,sys_dictionary b 
			         WHERE a.type ='productType' 
			         AND   a.value = bp.product_type_value
			         AND   b.type = a.valuekey 
               AND   b.value = bp.product_small_type_value) not in 
				<foreach collection="blacklistSet" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<!-- 产品型号过滤 -->
			<if test="productModelNumber != null and productModelNumber != '' ">
				AND  (bp.product_model_number like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
				      or bp.product_code like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
					  OR bb.brand_name LIKE CONCAT(CONCAT('%', #{productModelNumber,jdbcType=VARCHAR}), '%')
				)
			</if>
<!-- 			<if test="designTempletId != null and designProductId != null and designProductId > 0"> -->
<!-- 				ORDER BY CONVERT(t3.matching_degree,SIGNED) DESC -->
<!-- 			</if> -->
	</select>
	
	<select id="findRecommendResultCount" resultType="int"
			parameterType="com.nork.product.model.ProductCategoryRel">
			SELECT count(DISTINCT(T.product_id)) FROM (
	    	SELECT DISTINCT bp.id as product_id FROM  
	    	<if test="categoryIdList ==  null or  categoryIdList.size == 0  ">
				(select product_id from product_category_rel 
				where category_id in (select pc.id FROM pro_category pc where pc.is_deleted = 0 
				and pc.long_code LIKE CONCAT(CONCAT('%',#{categoryCode,jdbcType=VARCHAR}),'%'))) t1
			</if>
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				(SELECT prc.product_id,GROUP_CONCAT(pc.code) groupCode FROM product_category_rel prc 
				LEFT JOIN pro_category pc ON pc.id = prc.category_id and prc.is_deleted =0 GROUP BY prc.product_id) t1
			</if>
			LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
			LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
			LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
			<!-- 产品属性过滤 -->
			<if test="attributeConditionList !=  null and  attributeConditionList.size > 0 ">
				RIGHT JOIN (
					SELECT id AS product_id FROM (
					<foreach collection="attributeConditionList" index="index" item="item" open="" separator="UNION ALL" close="">
						select pa.product_id AS id from product_attribute pa
						LEFT JOIN product_props pp ON pp.id = pa.attribute_value_id
						WHERE 1=1
						and ${item}
					</foreach>
					) products group by products.id having count(products.id) &gt;= #{attributeConditionSize,jdbcType=INTEGER}
				) t4 ON t4.product_id = bp.id
			</if>
			<!-- 查询推荐产品 -->
<!-- 			<if test="designTempletId != null and designProductId != null and designProductId > 0">
				RIGHT JOIN (SELECT pr.matching_degree,pr.product_id FROM product_recommendation pr 
				WHERE pr.id IS NOT NULL
				AND pr.is_deleted = 0
				AND pr.templetProduct_id = #{designProductId,jdbcType=INTEGER}
				AND pr.design_templet_id = #{designTempletId,jdbcType=INTEGER}
				) t3 ON t3.product_id = bp.id
			</if> -->
			WHERE bp.id IS NOT NULL
			AND   bp.is_deleted = 0
			AND  LOCATE('baimo',bp.product_code)=0
			<!--diy分类搜索过滤同类型新增产品只显示主产品-->
			AND ( bp.parent_id IS NULL OR bp.parent_id = bp.id)
<!-- 			AND bp.bm_ids IS NULL -->
			<!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
			<if test="isInternalUser != null and isInternalUser == 'yes'">
				<!-- AND   (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
				and bp.putaway_state in (1, 2, 3, 5)
			</if>
			<if test="isInternalUser == null or isInternalUser == ''">
<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
			</if>
			<if test="houseTypeList !=  null and  houseTypeList.size > 0  ">
				and (
				<foreach collection="houseTypeList" index="index" item="item">
					<choose>
						<when test="index== 0">
							CONCAT(',', bp.house_type_values, ',') like CONCAT('%,',#{item,jdbcType=VARCHAR},',%')
						</when>
						<otherwise>
							or CONCAT(',', bp.house_type_values, ',') like CONCAT('%,',#{item,jdbcType=VARCHAR},',%')
						</otherwise>
					</choose>
				</foreach>
				)
			</if>
			<!-- 产品大类过滤 -->
			<!-- <if test="productTypeValue != null and productTypeValue != 0 ">
				and bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
			</if> -->
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				<foreach collection="categoryIdList" index="index" item="item">
					and FIND_IN_SET(#{item},t1.groupCode) > 0
				</foreach>
			</if>
			<!-- <if test="brandIds !=  null and  brandIds.size > 0  ">
				and bb.id in
				<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if> -->
			<!-- 新过滤逻辑(品牌,大类,小类,产品idList) -->
			<if test="baseProduct !=  null and  baseProduct.size > 0  ">
				and (
				<foreach collection="baseProduct" index="index" item="item">
					<choose>
						<when test="index== 0">
							<choose>
								<when test="item.productIdList!=null and item.productIdList.size>0">
									(bp.id in
										 <foreach collection="item.productIdList" index="indexProductId" item="itemProductId" open="(" separator="," close=")">
										 	#{itemProductId}
										 </foreach>
									)
								</when>
								<otherwise>
									<!-- 品牌&&大小类 -->
									(<!-- 1=1  -->
									<if test="item.brandId != null and item.brandId != 0 ">
										<!-- and  -->bp.brand_id=#{item.brandId}
									</if>
									<if test="item.productTypeValue != null and item.productTypeValue != '' ">
										and bp.product_type_value=#{item.productTypeValue}
									</if>
									<if test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
										and bp.product_small_type_value=#{item.productSmallTypeValue}
									</if>
									)
									<!-- 品牌||大小类 -->
								</otherwise>
							</choose>
						</when>
						<otherwise>
							or 
							<choose>
								<when test="item.productIdList!=null and item.productIdList.size>0">
									(bp.id in
										 <foreach collection="item.productIdList" index="indexProductId" item="itemProductId" open="(" separator="," close=")">
										 	#{itemProductId}
										 </foreach>
									)
								</when>
								<otherwise>
									<!-- 品牌&&大小类 -->
									(<!-- 1=1  -->
									<if test="item.brandId != null and item.brandId != 0 ">
										<!-- and  -->bp.brand_id=#{item.brandId}
									</if>
									<if test="item.productTypeValue != null and item.productTypeValue != '' ">
										and bp.product_type_value=#{item.productTypeValue}
									</if>
									<if test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
										and bp.product_small_type_value=#{item.productSmallTypeValue}
									</if>
									)
									<!-- 品牌||大小类 -->
								</otherwise>
							</choose>
						</otherwise>
					</choose>

				</foreach>
				)
			</if>
			<!-- 新过滤逻辑(品牌,大类,小类,产品idList)->end -->
<!-- 		<if test="productId != null and productId != ''"> -->
<!-- 			and T.product_id != #{productId,jdbcType=INTEGER} -->
<!-- 		</if> -->
			<!-- 特殊分类处理，如果是特殊分类只显示它本身分类，不是则不显示该大类下所配置的所有分类 -->
			<!-- <if test="specialProductType != null and specialProductType != '' ">
				<if test="productSmallTypeKey != null and productSmallTypeKey != ''">
					AND FIND_IN_SET(bp.product_small_type_mark, #{productSmallTypeKey,jdbcType=VARCHAR})
				</if>
				<if test="productSmallTypeKey == null or productSmallTypeKey == ''">
					AND !FIND_IN_SET(bp.product_small_type_mark, #{specialProductType,jdbcType=VARCHAR})
				</if>
			</if> -->
			<!-- 过滤特殊分类的产品长和高 如：门、门框-->
			<if test="productLength != null and productLength != '' and productHeight != null and productHeight != '' ">
				AND bp.product_length = #{productLength,jdbcType=VARCHAR}
				AND bp.product_height = #{productHeight,jdbcType=VARCHAR}
			</if>
			<!-- 过滤特殊分类的产品长和宽 如：地毯-->
			<if test="productLength != null and productLength != '' and productWidth != null and productWidth != '' ">
				AND bp.product_length &lt;= #{productLength,jdbcType=VARCHAR}
				AND bp.product_width &lt;= #{productWidth,jdbcType=VARCHAR}
			</if>
			<!-- 2016.10.16-黑名单分类list -->
			<if test="blacklistSet !=  null and  blacklistSet.size > 0  ">
				AND (SELECT  b.valuekey FROM sys_dictionary a ,sys_dictionary b 
			         WHERE a.type ='productType' 
			         AND   a.value = bp.product_type_value
			         AND   b.type = a.valuekey 
               AND   b.value = bp.product_small_type_value) not in 
				<foreach collection="blacklistSet" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<!-- 产品型号过滤 -->
			<if test="productModelNumber != null and productModelNumber != '' ">
				AND  (bp.product_model_number like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
				      or bp.product_code like CONCAT(CONCAT('%',#{productModelNumber,jdbcType=VARCHAR}),'%')
					  OR bb.brand_name LIKE CONCAT(CONCAT('%', #{productModelNumber,jdbcType=VARCHAR}), '%')
				    )
			</if>
			) as T
	</select>
	
	<!-- 其他Map等查询方式 -->
    	<!-- 
	//分类code和商品名称查询商品
	//是否只显示推荐产品(显示推荐+同类型数据，只显示推荐数据；不排除推荐数据，排除推荐数据；
    //空房模式，强制使用显示推荐+同类型数据模式，排除推荐数据（推荐中无数据）;硬装强制使用（推荐+全部）模式，排除根据实际配置执行)
    //不包含推荐数据 ,排除推荐标志为true的数据，即为 exceptRecommend == true； 包含推荐数据,即排除推荐标识为false的数据 exceptRecommend == false
    //是否显示推荐数据的标志onlyShowRecommend == false， 默认是false，只显示推荐数据=false，意思即为显示全部数据,onlyShowRecommend == true只看得到推荐数据
    //业务中显示数据的两种模式
    //一种场景是只显示推荐的产品数据,肯定是包含推荐数据，配置为(onlyShowRecommend == true,exceptRecommend == false)
    //只显示推荐数据，同时排除数据时，数据肯定为空，不考虑
    //另外一种是显示所有，包含两种可能，如下：
    //显示全部数据，同时包含推荐数据，配置为(onlyShowRecommend=false,exceptRecommend == false)
    //显示全部数据, 同时不包含推荐数据         (onlyShowRecommend=false,exceptRecommend == true)
	 -->
	<select id="oldfindProductByCategoryCode" resultMap="categoryProductSearchResultMap"
			parameterType="com.nork.product.model.ProductCategoryRel">
	<!-- case1 start 只显示推荐，只包含推荐-->	
	<if test="onlyShowRecommend == true and exceptRecommend == false" >
	SELECT DISTINCT
			 T.product_id,
			 T.product_code,
			 T.product_name,
			 T.brand_name,
			 T.sale_price,
			 T.pro_style_id,
			 T.color_id,
			 T.product_spec,
			 T.pic_path,
			 T.collectState,
			 T.material_pic_ids,
			 T.parent_id,
			 T.brand_id
		FROM (
		SELECT  
		r.product_id,r.product_name,r.brand_name,r.sale_price,r.pro_style_id,r.color_id,r.product_spec,r.pic_path,r.collectState,r.material_pic_ids,
    r.parent_id,r.brand_id
		FROM 
		(
		<!-- 1.1 -->
		SELECT t1.product_id,bp.product_name,bb.brand_name,bb.brand_id,bp.sale_price,bp.pro_style_id,bp.color_id,bp.product_spec,bp.material_pic_ids
		         ,bp.parent_id,bp.material_pic_ids,bp.parent_id,rp.pic_path
			     ,case when upc1.id is not null then 1 else 0 end collectState , 1 as type
	     FROM
             (  SELECT prc.product_id,GROUP_CONCAT(pc.code) groupCode FROM product_category_rel prc 
				LEFT JOIN pro_category pc ON pc.id = prc.category_id and prc.is_deleted =0 GROUP BY prc.product_id) t1
				LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
				LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
				LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
		        left join (select upc.id,upc.user_id,upc.product_id from user_product_collect upc where upc.is_deleted = 0
	            and upc.user_id = #{userId,jdbcType=INTEGER}
		     ) upc1  on upc1.product_id = t1.product_id
			<!-- 	RIGHT JOIN product_recommendation pr ON pr.product_id = bp.id
				AND pr.id IS NOT NULL
				AND pr.is_deleted = 0
				AND pr.templetProduct_id = #{designProductId,jdbcType=INTEGER}
				AND pr.design_templet_id = #{designTempletId,jdbcType=INTEGER} -->
			WHERE bp.id IS NOT NULL
		    AND   bp.is_deleted = 0
		    <!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
		    AND   ( 
		            (ifnull(#{isInternalUser,jdbcType=VARCHAR},'no')  = 'yes' or bp.putaway_state in (1,2,3,5)) 
<!-- 		    	 or (ifnull(#{isInternalUser,jdbcType=VARCHAR},'no') != 'yes' or bp.putaway_state in (1)) 以前已经上架显示，现在是已发布的显示-->
		    	  or (ifnull(#{isInternalUser,jdbcType=VARCHAR},'no') != 'yes' or bp.putaway_state in (3))
		        )
			<if test="productName != null and productName != ''">
				AND bp.product_name LIKE CONCAT('%',#{productName,jdbcType=VARCHAR},'%')
			</if>
			<if test="houseTypeValues != null and houseTypeValues != ''">
				and CONCAT(',',bp.house_type_values, ',') like CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR},',%')
			</if>
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				<foreach collection="categoryIdList" index="index" item="item">
					and FIND_IN_SET(#{item},t1.groupCode) > 0
				</foreach>
			</if>
			<if test="brandIds !=  null and  brandIds.size > 0  ">
				and bb.id in
				<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<if test="designTempletId != null and designProductId != null ">
				ORDER BY CONVERT(pr.matching_degree,SIGNED) DESC
			</if>
		<!-- 1.2 -->
	     ) as r
		   order by r.type,r.product_id 
		) AS T
		<if test="start !=-1 and limit !=-1"> LIMIT #{start}, #{limit}</if>
	</if>		
	<!-- case1 end-->	
	<!-- case2 start  显示全部，包括推荐-->	
	<if test="onlyShowRecommend == false and exceptRecommend == false" >
	SELECT DISTINCT
			 T.product_id,
			 T.product_code,
			 T.product_name,
			 T.brand_name,
			 T.sale_price,
			 T.pro_style_id,
			 T.color_id,
			 T.product_spec,
			 T.pic_path,
			 T.collectState,
			 T.material_pic_ids,
			 T.parent_id,
			 T.brand_id
		FROM (
			SELECT  
			 r.product_id,r.product_name,r.brand_name,r.sale_price,r.pro_style_id,r.color_id,r.product_spec,r.pic_path,r.collectState,r.material_pic_ids
	        ,r.parent_id,r.brand_id
			FROM 
		(
		<!-- 2.1 -->
		(SELECT t1.product_id,bp.product_name,bb.brand_name,bb.brand_id,bp.sale_price,bp.pro_style_id,bp.color_id,bp.product_spec,bp.material_pic_ids,
        bp.parent_id,bp.material_pic_ids,bp.parent_id,rp.pic_path,
	        case when upc1.id is not null then 1 else 0 end collectState , 1 as type
	        FROM
			(SELECT prc.product_id,GROUP_CONCAT(pc.code) groupCode FROM product_category_rel prc 
			LEFT JOIN pro_category pc ON pc.id = prc.category_id and prc.is_deleted =0 GROUP BY prc.product_id) t1
			LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
			LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
			LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
	        left join (select upc.id,upc.user_id,upc.product_id from user_product_collect upc where upc.is_deleted = 0
	    	and upc.user_id = #{userId,jdbcType=INTEGER}
           ) upc1  on upc1.product_id = t1.product_id
	<!-- 		<if test="designTempletId != null  and designProductId != null">
				RIGHT JOIN product_recommendation pr ON pr.product_id = bp.id
				AND pr.id IS NOT NULL
				AND pr.is_deleted = 0
				AND pr.templetProduct_id = #{designProductId,jdbcType=INTEGER}
				AND pr.design_templet_id = #{designTempletId,jdbcType=INTEGER}
			</if>  -->
			WHERE bp.id IS NOT NULL
		    AND   bp.is_deleted = 0
		    <!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
		    AND   ( 
		            (ifnull(#{isInternalUser,jdbcType=VARCHAR},'no')  = 'yes' or bp.putaway_state in (1,2,3,5)) 
<!-- 		    	 or (ifnull(#{isInternalUser,jdbcType=VARCHAR},'no') != 'yes' or bp.putaway_state in (1)) 以前已经上架显示，现在是已发布的显示 -->
					or (ifnull(#{isInternalUser,jdbcType=VARCHAR},'no') != 'yes' or bp.putaway_state in (3))
		        )
			<if test="productName != null and productName != ''">
				AND bp.product_name LIKE CONCAT('%',#{productName,jdbcType=VARCHAR},'%')
			</if>
			<if test="houseTypeValues != null and houseTypeValues != ''">
				and CONCAT(',',bp.house_type_values, ',') like CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR},',%')
			</if>
			<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
				<foreach collection="categoryIdList" index="index" item="item">
					and FIND_IN_SET(#{item},t1.groupCode) > 0
				</foreach>
			</if>
			<if test="brandIds !=  null and  brandIds.size > 0  ">
				and bb.id in
				<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<if test="designTempletId != null and designProductId != null ">
				ORDER BY CONVERT(pr.matching_degree,SIGNED) DESC
			</if>
		)
		<!-- 2.1 -->
	     union 
	   	<!-- 3.1 定制产品  -->
		(SELECT t1.product_id,bp.product_name,bb.brand_name,bp.sale_price,bp.pro_style_id,bp.color_id,bp.product_spec,bp.material_pic_ids
                ,bp.parent_id,rp.pic_path
		        ,case when upc1.id is not null then 1 else 0 end collectState 
		        <if test="productTypeValue != null and productTypeValue != '' and productSmallTypeValue != null"> 
		         , case when bp.spaceComon_id is not null 
					       AND EXISTS
						  (SELECT 1  
						  FROM sys_dictionary a ,sys_dictionary b 
						  WHERE a.type='productType' 
						  AND a.value = #{productTypeValue,jdbcType=VARCHAR} 
						  AND a.valuekey = b.type 
						  AND b.value = #{productSmallTypeValue,jdbcType=INTEGER} 
						  AND b.att4 = '1')  
						 and  bp.bm_ids is not null 
						 and  CONCAT(',',bp.bm_ids,',') like CONCAT(',',#{templateProductId,jdbcType=VARCHAR},',')
					 then 21
					 when 
					 bp.bm_ids is not null
					 AND EXISTS 
					 (SELECT  1 
					 FROM sys_dictionary a ,sys_dictionary b 
					 WHERE a.type='productType' 
					 AND a.value = #{productTypeValue,jdbcType=VARCHAR} 
					 AND a.valuekey = b.type 
					 AND b.value = #{productSmallTypeValue,jdbcType=INTEGER} 
					 and b.att4 = '2')  
					 and CONCAT(',',bp.bm_ids,',') like CONCAT(',',#{templateProductId,jdbcType=VARCHAR},',') 
					 then 22
					 when bp.product_small_type_value is not null and bp.product_small_type_value = #{productSmallTypeValue,jdbcType=INTEGER}
					 then 23
					 else 24 end as type
					</if>
				   <if test="productTypeValue == null or productTypeValue == '' or productSmallTypeValue == null"> 
				   ,2 as type
				   </if>
		        FROM
				(   SELECT prc.product_id,GROUP_CONCAT(pc.code) groupCode FROM product_category_rel prc 
				    LEFT JOIN pro_category pc ON pc.id = prc.category_id and prc.is_deleted =0 GROUP BY prc.product_id) t1
					LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
					LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
					LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
			        LEFT JOIN (SELECT upc.id,upc.user_id,upc.product_id 
		                       FROM  user_product_collect upc 
		                       WHERE upc.is_deleted = 0
		                         AND upc.user_id = #{userId,jdbcType=INTEGER}
		        ) upc1  ON upc1.product_id = t1.product_id
				WHERE bp.id IS NOT NULL
			    AND   bp.is_deleted = 0
			    <!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
				AND   ( 
		            (ifnull(#{isInternalUser,jdbcType=VARCHAR},'no')  = 'yes' or bp.putaway_state in (1,2,3,5)) 
<!-- 		    	 or (ifnull(#{isInternalUser,jdbcType=VARCHAR},'no') != 'yes' or bp.putaway_state in (1)) 以前已经上架显示，现在是已发布的显示 -->
					or (ifnull(#{isInternalUser,jdbcType=VARCHAR},'no') != 'yes' or bp.putaway_state in (3)) 
		        )
			    <if test="productTypeValue != null and productTypeValue != '' and productSmallTypeValue != null"> 
			    AND (
			    (
			               bp.spaceComon_id IS NOT NULL 
				  	 AND   bp.spaceComon_id = #{spaceCommonId,jdbcType=INTEGER}
					 AND   bp.bm_ids IS NOT NULL
					 AND   CONCAT(',',bp.bm_ids,',') like CONCAT(',',#{templateProductId,jdbcType=VARCHAR},',')
					 AND   EXISTS 
					(SELECT  1 
					 FROM sys_dictionary a ,sys_dictionary b 
			         WHERE a.type ='productType' 
			         AND   a.value = #{productTypeValue,jdbcType=VARCHAR} 
			         AND   b.type  = a.valuekey 
                     AND   b.value = #{productSmallTypeValue,jdbcType=INTEGER}
                     AND   b.att4= '1') 
				) or (
			         bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
			         AND EXISTS 
			         (SELECT  1 
			          FROM sys_dictionary a ,sys_dictionary b 
			          WHERE a.type ='productType' 
			          AND   a.value = #{productTypeValue,jdbcType=VARCHAR} 
			          AND   b.type =a.valuekey  
			          AND   b.value =  #{productSmallTypeValue,jdbcType=INTEGER}
			          AND   b.att4 = '2')      
				  )
				)
				</if>
				<if test="productName != null and productName != ''">
					AND bp.product_name LIKE CONCAT(CONCAT('%',#{productName,jdbcType=VARCHAR}),'%')
				</if>
				<if test="houseTypeValues != null and houseTypeValues != ''">
					and CONCAT(',',bp.house_type_values, ',') like CONCAT(CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR}),',%')
				</if>
				<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
					<foreach collection="categoryIdList" index="index" item="item">
						and FIND_IN_SET(#{item},t1.groupCode) > 0
					</foreach>
				</if>
				<if test="brandIds !=  null and  brandIds.size > 0  ">
					and bb.id in
					<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
						#{item}
					</foreach>
				</if>
				ORDER BY bp.product_type_value,bp.product_small_type_value )
			) as r
		order by r.type,r.product_id 
		) AS T
		<if test="start !=-1 and limit !=-1"> LIMIT #{start}, #{limit}</if>
	</if>	
	<!-- case2 end-->	
	<!-- case3 start-->
	<if test="onlyShowRecommend == false and exceptRecommend == true" >
	SELECT DISTINCT
			 T.product_id,
			 T.product_code,
			 T.product_name,
			 T.brand_name,
			 T.sale_price,
			 T.pro_style_id,
			 T.color_id,
			 T.product_spec,
			 T.pic_path,
			 T.collectState,
			 T.material_pic_ids,
			 T.parent_id,
			 T.brand_id
		FROM (
		SELECT  
		r.product_id,r.product_name,r.brand_name,r.sale_price,r.pro_style_id,r.color_id,r.product_spec,r.pic_path,r.collectState,r.material_pic_ids,
    r.parent_id,r.brand_id
		FROM 
		(
		<!-- 3.1  -->
	    (SELECT t1.product_id,bp.product_name,bb.brand_name,bp.sale_price,bp.pro_style_id,bp.color_id,bp.product_spec,bp.material_pic_ids,
        bp.parent_id,rp.pic_path,
		case when upc1.id is not null then 1 else 0 end collectState 
		<if test="productTypeValue != null and productTypeValue != '' and productSmallTypeValue != null"> 
		        ,    case 
					 when 
					 bp.spaceComon_id is not null 
					 AND EXISTS
					 (SELECT 1  
					  FROM sys_dictionary a ,sys_dictionary b 
					  WHERE a.type='productType' 
					  AND a.value = #{productTypeValue,jdbcType=VARCHAR} 
					  AND a.valuekey = b.type 
					  AND b.value = #{productSmallTypeValue,jdbcType=INTEGER} 
					  AND b.att4 = '1')  
					 and  bp.bm_ids is not null 
					 and CONCAT(CONCAT(',',bp.bm_ids),',') like CONCAT(CONCAT(',',#{templateProductId,jdbcType=VARCHAR}),',')
					 then 21
					 when 
					 bp.bm_ids is not null
					 AND EXISTS 
					 (SELECT  1 
					 FROM sys_dictionary a ,sys_dictionary b 
					 WHERE a.type='productType' 
					 AND a.value = #{productTypeValue,jdbcType=VARCHAR} 
					 AND a.valuekey = b.type 
					 AND b.value = #{productSmallTypeValue,jdbcType=INTEGER} 
					 and b.att4 = '2')  
					 and CONCAT(CONCAT(',',bp.bm_ids),',') like CONCAT(CONCAT(',',#{templateProductId,jdbcType=VARCHAR}),',') 
					 then 22
					 when bp.product_small_type_value is not null and bp.product_small_type_value = #{productSmallTypeValue,jdbcType=INTEGER}
					 then 23
					 else 24 end as type
					 </if>
				   <if test="productTypeValue == null or productTypeValue == '' or productSmallTypeValue == null"> 
				   ,2 as type
				   </if>
		        FROM
				(SELECT prc.product_id,GROUP_CONCAT(pc.code) groupCode FROM product_category_rel prc LEFT JOIN pro_category pc ON pc.id = prc.category_id and prc.is_deleted =0 GROUP BY prc.product_id) t1
				LEFT JOIN base_product bp  ON t1.product_id = bp.id and bp.is_deleted = 0
				LEFT JOIN base_brand bb ON bb.id = bp.brand_id and bb.is_deleted = 0
				LEFT JOIN res_pic rp ON bp.pic_id = rp.id and rp.is_deleted = 0
		        left join (select upc.id,upc.user_id,upc.product_id from user_product_collect upc where upc.is_deleted = 0
		        and upc.user_id = #{userId,jdbcType=INTEGER}
		        ) upc1  on upc1.product_id = t1.product_id
				WHERE bp.id IS NOT NULL
			    AND   bp.is_deleted = 0
			    <!-- 内部用户有两个上架状态 1上架，2测试上架状态 -->
				<if test="isInternalUser != null and isInternalUser == 'yes'">
					<!-- AND   (bp.putaway_state = 1 or bp.putaway_state = 2 or bp.putaway_state = 3) -->
					and bp.putaway_state in (1, 2, 3, 5)
				</if>
				<if test="isInternalUser == null or isInternalUser == ''">
					<!-- 			以前已经上架显示，现在是已发布的显示 -->
<!-- 				AND  bp.putaway_state = 1 -->
					AND  bp.putaway_state in (1, 3, 5)
				</if>
			    <if test="productTypeValue != null and productTypeValue != '' and productSmallTypeValue != null"> 
			    AND (
			    (
			               bp.spaceComon_id IS NOT NULL 
				  	 AND   bp.spaceComon_id = #{spaceCommonId,jdbcType=INTEGER}
					 AND   bp.bm_ids IS NOT NULL
					 AND   CONCAT(CONCAT(',',bp.bm_ids),',') like CONCAT(CONCAT(',',#{templateProductId,jdbcType=VARCHAR}),',')
					 AND   EXISTS(SELECT  1 FROM sys_dictionary a ,sys_dictionary b 
			         WHERE a.type ='productType' 
			         AND   a.value = #{productTypeValue,jdbcType=VARCHAR} 
			         AND   b.type = a.valuekey 
                     AND   b.value =#{productSmallTypeValue,jdbcType=INTEGER}
                     AND   b.att4= '1') 
				) or (
			         bp.product_type_value = #{productTypeValue,jdbcType=VARCHAR}
			         AND EXISTS 
			         (SELECT  1 
			          FROM sys_dictionary a ,sys_dictionary b 
			          WHERE a.type ='productType' 
			          AND   a.value = #{productTypeValue,jdbcType=VARCHAR} 
			          AND   b.type =a.valuekey  
			          AND   b.value =  #{productSmallTypeValue,jdbcType=INTEGER}
			          AND   b.att4 = '2')      
				  )
				)
				</if>
				<if test="productName != null and productName != ''">
					AND bp.product_name LIKE CONCAT(CONCAT('%',#{productName,jdbcType=VARCHAR}),'%')
				</if>
				<if test="houseTypeValues != null and houseTypeValues != ''">
					and CONCAT(',',bp.house_type_values, ',') like CONCAT(CONCAT('%,',#{houseTypeValues,jdbcType=VARCHAR}),',%')
				</if>
				<if test="categoryIdList !=  null and  categoryIdList.size > 0  ">
					<foreach collection="categoryIdList" index="index" item="item">
						and FIND_IN_SET(#{item},t1.groupCode) > 0
					</foreach>
				</if>
				<if test="brandIds !=  null and  brandIds.size > 0  ">
					and bb.id in
					<foreach collection="brandIds" index="index" item="item" open="(" separator="," close=")">
						#{item}
					</foreach>
				</if>
				ORDER BY bp.product_type_value,bp.product_small_type_value )
			) as r
		order by r.type,r.product_id 
		) AS T
		WHERE 1=1
	    <if test="start !=-1 and limit !=-1"> LIMIT #{start}, #{limit}</if>
	</if>	
	<!-- case3 end-->		
	</select>

	<select id="selectXingxCategoryProductInfo" resultType="com.nork.repair.model.ProductCategoryInfo">
		select
			DISTINCT
			bp.id  						as productId,
			bp.product_code				as productCode,
			bp.product_type_value		as bigTypeValue,
			bp.product_small_type_value as smallTypeValue,
			pc.name						as name,
			pcr.status					as status
 		from
 		 product_category_rel pcr,
 		 base_product bp,
 		 pro_category pc
		where
			bp.id = pcr.product_id
		and pcr.category_id = pc.id
		and bp.product_small_type_value in(1,2,3,4,17)
		and pc.long_code like '.root.jiancai.qiangm.xingx.xingx01.%'
		and pcr.is_deleted = 0
		and bp.is_deleted = 0
		<if test="productId != null and productId > 0">
			and bp.id = #{productId}
		</if>
		order by bp.id  desc
		<if test="limit != null and limit > 0">
			limit #{start}, #{limit}
		</if>
	</select>

	<select id = "getCategoryProductInfo" resultType="com.nork.repair.model.CategoryProductRel">
		select
			a.id  		as categoryId,
			count(b.id) as productCount
		  from pro_category a
		LEFT JOIN product_category_rel b on a.id = b.category_id
			and b.product_id = #{productId} and b.is_deleted = 0
 		where
 			a.long_code like CONCAT(#{longCode},'%')
		and a.name like CONCAT(CONCAT('%',#{name}),'%')
		and a.is_deleted = 0
		limit 1
	</select>

	<insert id="batchAdd" useGeneratedKeys="true" parameterType="java.util.List">
		<selectKey resultType="long" keyProperty="id" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into product_category_rel (
		sys_code,
		creator,
		gmt_create,
		modifier,
		gmt_modified,
		is_deleted,
		product_id,
		category_id,
		status,
		remark
		)
		values
		<foreach collection="list" item="item" index="index" separator="," >
			(
			#{item.sysCode,jdbcType=VARCHAR},
			#{item.creator,jdbcType=VARCHAR},
			#{item.gmtCreate,jdbcType=TIMESTAMP},
			#{item.modifier,jdbcType=VARCHAR},
			#{item.gmtModified,jdbcType=TIMESTAMP},
			#{item.isDeleted,jdbcType=INTEGER},
			#{item.productId,jdbcType=INTEGER},
			#{item.categoryId,jdbcType=INTEGER},
			#{item.status,jdbcType=INTEGER},
			#{item.remark,jdbcType=VARCHAR}
			)
		</foreach>

	</insert>

</mapper>
