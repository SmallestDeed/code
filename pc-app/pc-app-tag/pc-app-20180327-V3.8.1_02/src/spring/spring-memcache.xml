<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    
    xsi:schemaLocation="  
        http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans.xsd">  
  
    <bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="false" />
		<property name="locations">
			<list>
				<value>classpath:memcache.properties</value>
			</list>
		</property>
</bean> 
<bean id="memcachedPool" class="com.danga.MemCached.SockIOPool" factory-method="getInstance" 
      init-method="initialize" destroy-method="shutDown">
		<constructor-arg><value>memCachedPool</value></constructor-arg>
		<property name="servers"><list><value>${memcache.server}</value></list></property>
		<property name="weights"><list><value>${memcache.weights}</value></list></property>
		<property name="initConn"><value>${memcache.initConn}</value></property>
		<property name="minConn"><value>${memcache.minConn}</value></property>
		<property name="maxConn"><value>${memcache.maxConn}</value></property>
		<property name="maintSleep"><value>${memcache.maintSleep}</value></property>
		<property name="nagle"><value>${memcache.nagle}</value></property>
		<property name="socketTO"><value>${memcache.socketTO}</value></property>
</bean>

<bean id="memCacheClient" class="com.danga.MemCached.MemCachedClient">
        <constructor-arg><value>memCachedPool</value></constructor-arg>
</bean> 
<bean id="cacheManager" class="com.nork.common.memcached.MemcachedCacheManager">  
    <property name="memcachedClient" ref="memcachedClient" />  
    <!-- 配置缓存时间 -->  
    <property name="configMap">   
           <map>  
                <entry key="myCache" value="3600" /> <!-- key缓存对象名称   value缓存过期时间 -->  
           </map>  
        </property>  
</bean>  
</beans> 
