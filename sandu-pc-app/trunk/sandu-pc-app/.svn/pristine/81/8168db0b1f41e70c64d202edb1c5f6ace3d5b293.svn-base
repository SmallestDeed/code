package com.sandu.onekey.service;

import java.util.List;
import java.util.Map;

import com.sandu.design.model.DesignPlanRecommendedProduct;
import com.sandu.design.model.DesignTemplet;
import com.sandu.design.model.DesignTempletProduct;
import com.sandu.onekey.model.ProductListByTypeInfo;
import com.sandu.onekey.model.ProductListByTypeInfo.PlanGroupInfo;
import com.sandu.onekey.model.ProductListByTypeInfo.PlanProductInfo;
import com.sandu.onekey.model.ProductListByTypeInfo.PlanStructureInfo;
import com.sandu.onekey.service.exception.IntelligenceDecorationException;

public interface IntelligenceDecorationService {

	/**
	 * 遍历推荐方案产品列表
	 * 将单品/结构/组合分类放置
	 * 
	 * @author huangsongbo
	 * @param designPlanRecommendedProductList
	 * @return
	 * @throws IntelligenceDecorationException 
	 */
	public ProductListByTypeInfo getProductListByTypeInfo(
			List<DesignPlanRecommendedProduct> designPlanRecommendedProductList) throws IntelligenceDecorationException;

	/**
	 * 遍历样板房产品列表
	 * 讲单品/结构/组合分类放置
	 * 
	 * @author huangsongbo
	 * @param designTempletProductList
	 * @param matchType 0:全屋替换;1:硬装替换
	 * @param planRecommendedId 
	 * 检测推荐方案中有没有定制浴室柜,如果有的话,会进行特殊逻辑处理:样板房的浴室柜组合变成单品匹配逻辑 
	 * add by huangsongbo 2018.01.03
	 * @return
	 */
	ProductListByTypeInfo getProductListByTypeInfo(
			List<DesignTempletProduct> designTempletProductList,
			Integer matchType, Integer planRecommendedId);
	
	/**
	 * 匹配结构
	 * 
	 * @author huangsongbo
	 * @param productListByTypeInfo 样板房所有结构信息
	 * @param planStructureInfoRecommended 推荐方案中所有结构信息
	 * @param planId 设计方案id,为了保存一建生成方案的产品列表
	 * @param username 创建人,为了保存一建生成方案的产品列表
	 * @param opType 是否是自动渲染:0:自动渲染
	 * @param productListmap 匹配失败,自行搜索的结构,可能产品明细匹配不上,做的备用方案(当单品匹配)
	 * @param spaceCode 空间编码(用于识别房间类型,来决定启用哪种房间类型的一件装修逻辑)
	 * @param designTemplet 样板房信息
	 * @return
	 * @throws IntelligenceDecorationException 
	 */
	public Map<String, Object> structureListMatch(
			ProductListByTypeInfo productListByTypeInfo,
			PlanStructureInfo planStructureInfoRecommended,
			Integer planId, String username, Integer opType,
			Map<String, List<PlanProductInfo>> productListmap,
			String spaceCode, DesignTemplet designTemplet) throws IntelligenceDecorationException;
	
	/**
	 * 匹配组合
	 *
	 * @author huangsongbo
	 * @param productListByTypeInfo 样板房中的所有组合/单品/结构信息
	 * @param planGroupInfoRecommended 推荐方案中的所有组合信息
	 * @param planId 设计方案id,为了保存一建生成方案的产品列表
	 * @param username 创建人,为了保存一建生成方案的产品列表
	 * @param opType 是否是自动渲染:0:自动渲染
	 * @return
	 */
	public Map<String, Object> groupListMatch(
			ProductListByTypeInfo productListByTypeInfo, PlanGroupInfo planGroupInfoRecommended, Integer planId, String username,
			Integer opType
	);
	
	/**
	 * 卧室一建装修匹配单品(单品/天花/背景墙)
	 *
	 * @param templetProductList 样板房中的单品List
	 * @param map 推荐方案中的单品
	 * @param recommendedPlanStructureInfo 推荐方案中结构信息
	 * @param planId 设计方案id,为了保存一建生成方案的产品列表
	 * @param username 创建人,为了保存一建生成方案的产品列表
	 * @param matchType 0:全屋替换/1:硬装替换
	 * @param opType 是否是自动渲染:0:自动渲染
	 * @param designTemplet 一键装修样板房信息
	 * @param planRecommendedId 推荐方案id
	 * @return
	 * @throws IntelligenceDecorationException
	 */
	public Map<String, Object> productListMatch(
			List<PlanProductInfo> templetProductList,
			Map<String, List<PlanProductInfo>> map,
			PlanStructureInfo recommendedPlanStructureInfo, 
			Integer planId, String username,
			Integer matchType, Integer opType,
			DesignTemplet designTemplet,
			Integer planRecommendedId
	) throws IntelligenceDecorationException;

	/**
	 * 匹配单品验证更多的属性(比如产品的长宽高)
	 * 
	 * @author huangsongbo
	 * @param planProductInfo 待匹配的产品信息
	 * @param planProductInfoCheck 待匹配的属性(产品长宽高等)
	 * @return
	 */
	boolean productMatchCheckMoreInfo(PlanProductInfo planProductInfo, PlanProductInfo planProductInfoCheck);
	
}
