package com.sandu.decorate.service.impl.biz;

import com.github.pagehelper.PageInfo;
import com.google.common.base.Splitter;
import com.google.common.base.Strings;
import com.sandu.common.util.DecorateUtil;
import com.sandu.decorate.input.PlanDecoratePriceAdd;
import com.sandu.decorate.input.PlanDecoratePriceQuery;
import com.sandu.decorate.input.PlanDecoratePriceUpdate;
import com.sandu.decorate.model.PlanDecoratePrice;
import com.sandu.decorate.service.PlanDecoratePriceService;
import com.sandu.decorate.service.biz.PlanDecoratePriceBizService;
import com.sandu.system.model.SysDictionary;
import com.sandu.system.model.SysDictionaryConstant;
import com.sandu.system.service.SysDictionaryService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * CopyRight (c) 2018 Sandu Technology Inc.
 * <p>
 *
 * @author sandu <dev@sanduspace.cn>
 * @datetime 2018-Aug-08 15:37
 */
@Slf4j
@Service("planDecoratePriceBizService")
public class PlanDecoratePriceBizServiceImpl implements PlanDecoratePriceBizService {

    @Autowired
    private PlanDecoratePriceService planDecoratePriceService;
    @Autowired
    private SysDictionaryService sysDictionaryService;

    @Override
    public int create(PlanDecoratePriceAdd input) {
        PlanDecoratePrice.PlanDecoratePriceBuilder builder = PlanDecoratePrice.builder();
        PlanDecoratePrice planDecoratePrice = builder.build();

        //获取对应的价格区间并得到价格对应的区间的value值
        List<SysDictionary> priceRangeList = this.getPriceRangeByType(input.getDecoratePriceType());
        int priceRangeValue = DecorateUtil.getMatchPriceRangeOfDecorate(input.getDecoratePrice(), priceRangeList);

        Date date = new Date();
        input.setGmtCreate(date);
        input.setGmtModified(date);
        input.setIsDeleted(0);
        input.setDecoratePriceRange(priceRangeValue);
        BeanUtils.copyProperties(input, planDecoratePrice);

        return planDecoratePriceService.insert(planDecoratePrice);
    }

    @Override
    public int update(PlanDecoratePriceUpdate input) {
        PlanDecoratePrice.PlanDecoratePriceBuilder builder = PlanDecoratePrice.builder();
        PlanDecoratePrice planDecoratePrice = builder.build();

        BeanUtils.copyProperties(input, planDecoratePrice);
        //转换原字段ID
        planDecoratePrice.setId(input.getId());
        return planDecoratePriceService.update(planDecoratePrice);
    }

    @Override
    public int delete(String planDecoratePriceId) {
        if (Strings.isNullOrEmpty(planDecoratePriceId)) {
            return 0;
        }

        Set<Integer> planDecoratePriceIds = new HashSet<>();
        List<String> list = Splitter.on(",").omitEmptyStrings().splitToList(planDecoratePriceId);
        list.stream().forEach(id -> planDecoratePriceIds.add(Integer.valueOf(id)));

        if (planDecoratePriceIds.size() == 0) {
            return 0;
        }
        return planDecoratePriceService.delete(planDecoratePriceIds);
    }

    @Override
    public PlanDecoratePrice getById(int planDecoratePriceId) {
        return planDecoratePriceService.getById(planDecoratePriceId);
    }

    @Override
    public PageInfo<PlanDecoratePrice> query(PlanDecoratePriceQuery query) {

        return planDecoratePriceService.findAll(query);
    }

    @Override
    public List<SysDictionary> getDecoratePriceType() {
        String decoratePriceType = SysDictionaryConstant.DECORATE_PRICE_TYPE;
        return sysDictionaryService.findAllByType(decoratePriceType);
    }

    @Override
    public List<SysDictionary> getAllDecoratePriceType() {
        String decoratePriceType = SysDictionaryConstant.DECORATE_PRICE_TYPE;
        return sysDictionaryService.getAllRelationshipData(decoratePriceType);
    }

    /**
     * 根据装修类型找出对应的报价
     * @param decorateTypeValue
     * @return
     */
    private List<SysDictionary> getPriceRangeByType(Integer decorateTypeValue) {
        if (decorateTypeValue <= 0) {
            throw new RuntimeException("装修报价分类值错误，value="+decorateTypeValue);
        }
        List<SysDictionary> priceRangeList =  sysDictionaryService.getByTypeAndValue(SysDictionaryConstant.DECORATE_PRICE_TYPE,decorateTypeValue);
        if (priceRangeList == null || priceRangeList.size() == 0) {
            throw new RuntimeException("装修报价区间列表为空，请检查对应的装修类型值，decorateType="+decorateTypeValue);
        }
        return priceRangeList;
    }
}
