package com.sandu.designplan.service.impl;

import com.google.gson.Gson;
import com.sandu.design.model.DesignPlanProduct;
import com.sandu.design.model.DesignPlanRecommendedProduct;
import com.sandu.design.model.ProductsCost;
import com.sandu.design.model.ProductsCostType;
import com.sandu.designplan.dao.DesignPlanRecommendedProductMapper;
import com.sandu.designplan.model.DesignPlanRecommended;
import com.sandu.designplan.model.DesignPlanSummaryInfo;
import com.sandu.designplan.service.DesignPlanLikeService;
import com.sandu.designplan.service.DesignPlanRecommendedProductService;
import com.sandu.designplan.service.DesignPlanRecommendedService;
import com.sandu.designplan.vo.RecommendedPlanProductRelatedVo;
import com.sandu.product.model.ProductCostDetail;
import com.sandu.user.model.LoginUser;
import com.sandu.user.model.UserTypeCode;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service("designPlanRecommendedProductService")
public class DesignPlanRecommendedProductServiceImpl implements DesignPlanRecommendedProductService {

    private final static Gson GSON = new Gson();
    private final static String CLASS_LOG_PREFIX = "[推荐方案产品服务]:";
    private static Logger logger = LoggerFactory.getLogger(DesignPlanRecommendedProductServiceImpl.class);

    @Autowired
    private DesignPlanRecommendedService designPlanRecommendedService;
    @Autowired
    private DesignPlanRecommendedProductMapper designPlanRecommendedProductMapper;
    @Autowired
    private DesignPlanLikeService designPlanLikeService;

    @Override
    public int add(DesignPlanRecommendedProduct DesignPlanRecommendedProduct) {
        return designPlanRecommendedProductMapper.insertSelective(DesignPlanRecommendedProduct);
    }

    @Override
    public int costTypeListCount(DesignPlanProduct designPlanProduct) {
        return designPlanRecommendedProductMapper.costTypeListCount(designPlanProduct);
    }

    @Override
    public List<ProductsCostType> costTypeList(DesignPlanProduct designPlanProduct) {
        return designPlanRecommendedProductMapper.costTypeList(designPlanProduct);
    }

    @Override
    public List<ProductsCost> costList(ProductsCostType productsCostType) {
        return designPlanRecommendedProductMapper.costList(productsCostType);
    }

    @Override
    public List<ProductCostDetail> costDetail(ProductsCost cost) {
        return designPlanRecommendedProductMapper.costDetail(cost);
    }

    @Override
    public int getCount(DesignPlanRecommendedProduct DesignPlanRecommendedProduct) {
        return designPlanRecommendedProductMapper.selectCount(DesignPlanRecommendedProduct);
    }

    @Override
    public List<RecommendedPlanProductRelatedVo> queryRecommendedPlanOfProductRelatedByProductId(Integer productId, List<Integer> brandList, Integer platformId, LoginUser loginUser) {
        if (null == productId || productId == 0 || null == brandList || 0 == brandList.size()) {
            logger.warn(CLASS_LOG_PREFIX + "查询产品相关推荐方案失败,ProductId or brandList is null.productId:{}, brandList:{}", productId, brandList);
            return null;
        }
        if (null == loginUser) {
            loginUser = new LoginUser();
            loginUser.setId(0);
            loginUser.setUserType(UserTypeCode.USER_TYPE_OUTER_B2C);
        }
        Integer userId = loginUser.getId();
        logger.info(CLASS_LOG_PREFIX + "查询产品相关推荐方案--ProductId:{}", productId);
        List<RecommendedPlanProductRelatedVo> recommendedPlanProductRelatedList = designPlanRecommendedProductMapper.queryRecommendedPlanOfProductRelatedByProductId(productId, brandList, platformId, userId);
        logger.info(CLASS_LOG_PREFIX + "查询产品相关推荐方案完成--List<RecommendedPlanProductRelatedVo>:{}", GSON.toJson(recommendedPlanProductRelatedList));

        //拼接图片HOST前缀
        if (null != recommendedPlanProductRelatedList && recommendedPlanProductRelatedList.size() > 0) {
            recommendedPlanProductRelatedList.forEach(recommendedPlanProductRelatedVo -> {
                //拼接封面图片
                recommendedPlanProductRelatedVo.setRecommendPlanCover(recommendedPlanProductRelatedVo.getRecommendPlanCover());

                //从缓存中获取最新的方案点赞收藏数量信息、
                //从缓存中获取最新的用户对方案是否点赞，是否收藏
                DesignPlanSummaryInfo summaryInfo =
                        designPlanLikeService.getPlanInfoOfCache(userId, recommendedPlanProductRelatedVo.getRecommendPlanId());
                if (null != summaryInfo) {
                    if (null != summaryInfo.getLikeNum()) {
                        recommendedPlanProductRelatedVo.setLikeNum(summaryInfo.getLikeNum());
                    }
                    if (null != summaryInfo.getCollectNum()) {
                        recommendedPlanProductRelatedVo.setCollectNum(summaryInfo.getCollectNum());
                    }
                    if (null != summaryInfo.getIsLike()) {
                        recommendedPlanProductRelatedVo.setIsLike(summaryInfo.getIsLike());
                    }
                    if (null != summaryInfo.getIsFavorite()) {
                        recommendedPlanProductRelatedVo.setIsFavorite(summaryInfo.getIsFavorite());
                    }
                }

                //获取渲染数据
                logger.info(CLASS_LOG_PREFIX + "查询产品相关推荐方案--查询推荐方案的渲染数据:RecommendPlanId:{}", recommendedPlanProductRelatedVo.getRecommendPlanId());
                DesignPlanRecommended designPlanRecommend = designPlanRecommendedService.getAllRenderFromDesignPlanRecommend(recommendedPlanProductRelatedVo.getRecommendPlanId(), recommendedPlanProductRelatedVo.getRecommendPlanCoverPicId());
                logger.info(CLASS_LOG_PREFIX + "查询产品相关推荐方案--查询推荐方案的渲染数据完成:DesignPlanRecommended:{}", designPlanRecommend.toString());
                if (null != designPlanRecommend) {
                    recommendedPlanProductRelatedVo.setRenderMap(designPlanRecommend.getRenderMap());
                }
            });
        }

        return recommendedPlanProductRelatedList;
    }
}
