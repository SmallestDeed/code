package com.sandu.user.service.impl;/**
 * @ Author     ：weisheng.
 * @ Date       ：Created in AM 10:08 2018/5/14 0014
 * @ Description：${description}
 * @ Modified By：
 * @Version: $version$
 */

import com.sandu.user.dao.UserPrivateMessageMapper;
import com.sandu.user.model.UserPrivateMessage;
import com.sandu.user.model.input.UserPrivateMessageAdd;
import com.sandu.user.model.view.UserPrivateMessageVo;
import com.sandu.user.service.UserPrivateMessageService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;

/**
 * @Title: 用户留言
 * @Package
 * @Description:
 * @author weisheng
 * @date 2018/5/14 0014AM 10:08
 */
@Service("userPrivateMessageService")
public class UserPrivateMessageServiceImpl implements UserPrivateMessageService{

    @Autowired
    private UserPrivateMessageMapper userPrivateMessageMapper;

    @Override
    public List<UserPrivateMessageVo> getUserPrivateMessageList(UserPrivateMessageAdd userPrivateMessageAdd) {

        return userPrivateMessageMapper.selectUserPrivateMessageList(userPrivateMessageAdd);
    }

    @Override
    public List<UserPrivateMessageVo> getUserPrivateMessageInfoList(UserPrivateMessageAdd userPrivateMessageAdd) {
        return userPrivateMessageMapper.selectUserPrivateMessageInfoList(userPrivateMessageAdd);
    }

    @Override
    public Integer delUserPrivateMessage(UserPrivateMessageAdd userPrivateMessageAdd) {
        return userPrivateMessageMapper.delUserPrivateMessage(userPrivateMessageAdd);
    }

    @Override
    public Integer addUserPrivateMessage(UserPrivateMessageAdd userPrivateMessageAdd) {
        UserPrivateMessage userPrivateMessage = new UserPrivateMessage();
        userPrivateMessage.setUserId(userPrivateMessageAdd.getUserId());
        userPrivateMessage.setFriendId(userPrivateMessageAdd.getFriendId());
        userPrivateMessage.setIsDeleted(0);
        userPrivateMessage.setMessageContent(userPrivateMessageAdd.getMessageContent());
        userPrivateMessage.setMessageType(userPrivateMessageAdd.getMessageType());
        userPrivateMessage.setStatus(new Integer(1).byteValue());
        userPrivateMessage.setReceiverId(userPrivateMessageAdd.getFriendId());
        userPrivateMessage.setSenderId(userPrivateMessageAdd.getUserId());
        userPrivateMessage.setSendTime(new Date());
        int count = userPrivateMessageMapper.insertSelective(userPrivateMessage);
        if(count>0){
            UserPrivateMessage userPrivateMessage2 = new UserPrivateMessage();
            userPrivateMessage2.setUserId(userPrivateMessageAdd.getUserId());
            userPrivateMessage2.setFriendId(userPrivateMessageAdd.getUserId());
            userPrivateMessage2.setIsDeleted(0);
            userPrivateMessage2.setMessageContent(userPrivateMessageAdd.getMessageContent());
            userPrivateMessage2.setMessageType(userPrivateMessageAdd.getMessageType());
            userPrivateMessage2.setStatus(new Integer(1).byteValue());
            userPrivateMessage2.setReceiverId(userPrivateMessageAdd.getFriendId());
            userPrivateMessage2.setSenderId(userPrivateMessageAdd.getUserId());
            userPrivateMessage2.setSendTime(new Date());
            int count2 = userPrivateMessageMapper.insertSelective(userPrivateMessage);
            if(count2==0){
                return 0;
            }
        }else{
            return 0;
        }
        return userPrivateMessage.getId();
    }
}
