### 上传流程

1. 点击上传
        
        调用 batchAddPage方法 进入 batchAdd.jsp中
        fileKey=product.baseBrand.logo  # 用于匹配 res.properties中的地址定义
                                        # 例如: design.designTemplet.effectPlan 匹配 design.designTemplet.effectPlan.upload.path
        businessId=0   #添加时为 0  编辑是 为当时编辑的东西的id
        opType=simple  # simple 表示单文件上传  不写应该代表多文件上传
        sysCode=1514171136374   # 在添加时默认时间毫秒数.编辑时 时对应记录的sysCode
        watermarkState=undefined  #水印 用在户型和空间上传是生成水印? 不确定     
        
2. 选择文件,插入文件/图片列表 调用 batchSave方法, 返回结果还是进入 batchAdd.jsp

        请求参数:
        fileKey=product.baseBrand.logo  # 用于匹配 res.properties中的地址定义
                                        # 例如: design.designTemplet.effectPlan 匹配 design.designTemplet.effectPlan.upload.path
        businessId=0   #添加时为 0  编辑是 为当时编辑的东西的id
        opType=simple  # simple 表示单文件上传  不写应该代表多文件上传
        sysCode=1514171136374   # 在添加时默认时间毫秒数.编辑时 时对应记录的sysCode
        watermarkState=undefined  #水印 用在户型和空间上传是生成水印? 不确定    
        
        返回结果:  
        
        文件列表信息
        
3. 选择*文件列表确定*之后 

        访问 /system/resPic/listAll.htm
        传递参数
        fileKey : fileKey
        businessId : businessId
        sysCode : businessCode
        查询 数据库表中的记录 显示文件数量,并返回文件在表中的id.

4. 保存记录

      __添加时上传,保存记录后.还要通过文件库中的id查询取回文件信息__
      
      **将文件的sysCode修改成当前记录的code在保存回去.**
      
      **这个是个问题**
      
      
        
### res_design  设计方案资源
没找到哪儿使用了,就只在 ResController 里面使用了一些方法做资源修复的.

ResDesignController 中只有两个列表方法.

ResDesignService中add方法没有被调用过

### res_design_render_scene 设计方案配置文件副本

没找到...

### res_file 文件资源库

暂时发现与商家后台无关 
与系统版本文件 安装包文件相关.样板房配置文件相关.

### res_file_store 文件仓库

与户型相关 暂时不考虑

### res_house_pic 户型图片

与户型相关暂时不考虑

### res_model 模型资源库

__添加模型资源时需要更新产品信息,添加产品又要更改模型信息 相互依赖
这也是个问题.__

    
        
    //保存资源和业务之间的关联关系
    	public boolean saveIncidenceRelation(String modelKey,Integer businessId,Integer modelId){
    		//产品3dMax文件
    		if( "product.baseProduct.model".equals(modelKey) ){
    			BaseProduct baseProduct = baseProductService.get(businessId);
    			if(baseProduct != null){
    				BaseProduct newBaseProduct = new BaseProduct();
    				newBaseProduct.setId(baseProduct.getId());
    				newBaseProduct.setModelId(modelId);
    				int i = baseProductService.update(newBaseProduct);
    				if( i > 0 ){
    					return true;
    				}
    			}
    		}
    		//产品windowsPc U3d模型文件
    		if( "product.baseProduct.u3dmodel.windowsPc".equals(modelKey) ){
    			BaseProduct baseProduct = baseProductService.get(businessId);
    			if(baseProduct != null){
    				BaseProduct newBaseProduct = new BaseProduct();
    				newBaseProduct.setId(baseProduct.getId());
    				newBaseProduct.setWindowsU3dModelId(modelId);
    				int i = baseProductService.update(newBaseProduct);
    				if( i > 0 ){
    					return true;
    				}
    			}
    		}
    		//产品ios u3d模型文件
    		if( "product.baseProduct.u3dmodel.ios".equals(modelKey) ){
    			BaseProduct baseProduct = baseProductService.get(businessId);
    			if(baseProduct != null){
    				BaseProduct newBaseProduct = new BaseProduct();
    				newBaseProduct.setId(baseProduct.getId());
    				newBaseProduct.setIosU3dModelId(modelId);
    				int i = baseProductService.update(newBaseProduct);
    				if( i > 0 ){
    					return true;
    				}
    			}
    		}
    		//产品android u3d模型文件
    		if( "product.baseProduct.u3dmodel.android".equals(modelKey) ){
    			BaseProduct baseProduct = baseProductService.get(businessId);
    			if(baseProduct != null){
    				BaseProduct newBaseProduct = new BaseProduct();
    				newBaseProduct.setId(baseProduct.getId());
    				newBaseProduct.setAndroidU3dModelId(modelId);
    				int i = baseProductService.update(newBaseProduct);
    				if( i > 0 ){
    					return true;
    				}
    			}
    		}
    		//空间灯光文件
    		if( "home.spaceCommon.3dmodel".equals(modelKey) ){
    			SpaceCommon spaceCommon = spaceCommonService.get(businessId);
    			if( spaceCommon != null ){
    				SpaceCommon newSpaceCommon = new SpaceCommon();
    				newSpaceCommon.setId(spaceCommon.getId());
    				newSpaceCommon.setModel3dId(String.valueOf(modelId));
    				int i = spaceCommonService.update(newSpaceCommon);
    				if( i > 0 ){
    					return true;
    				}
    			}
    		}
    		//空间场景文件
    		if( "home.spaceCommon.3dscene".equals(modelKey) ){
    			SpaceCommon spaceCommon = spaceCommonService.get(businessId);
    			if( spaceCommon != null ){
    				SpaceCommon newSpaceCommon = new SpaceCommon();
    				newSpaceCommon.setId(spaceCommon.getId());
    				newSpaceCommon.setScene3dId(modelId);
    				int i = spaceCommonService.update(newSpaceCommon);
    				if( i > 0 ){
    					return true;
    				}
    			}
    		}
    		//空间灯光白天u3d模型文件
    		if( "home.spaceCommon.u3dmodel.daylight".equals(modelKey) ){
    			SpaceCommon spaceCommon = spaceCommonService.get(businessId);
    			if( spaceCommon != null ){
    				SpaceCommon newSpaceCommon = new SpaceCommon();
    				newSpaceCommon.setId(spaceCommon.getId());
    				newSpaceCommon.setDaylightU3dModelId(modelId);
    				int i = spaceCommonService.update(newSpaceCommon);
    				if( i > 0 ){
    					return true;
    				}
    			}
    		}
    		//空间灯光黄昏u3d模型文件
    		if( "home.spaceCommon.u3dmodel.dusklight".equals(modelKey) ){
    			SpaceCommon spaceCommon = spaceCommonService.get(businessId);
    			if( spaceCommon != null ){
    				SpaceCommon newSpaceCommon = new SpaceCommon();
    				newSpaceCommon.setId(spaceCommon.getId());
    				newSpaceCommon.setDusklightU3dModelId(modelId);
    				int i = spaceCommonService.update(newSpaceCommon);
    				if( i > 0 ){
    					return true;
    				}
    			}
    		}
    		//空间灯光黑夜u3d模型文件
    		if( "home.spaceCommon.u3dmodel.nightlight".equals(modelKey) ){
    			SpaceCommon spaceCommon = spaceCommonService.get(businessId);
    			if( spaceCommon != null ){
    				SpaceCommon newSpaceCommon = new SpaceCommon();
    				newSpaceCommon.setId(spaceCommon.getId());
    				newSpaceCommon.setNightlightU3dModelId(modelId);
    				int i = spaceCommonService.update(newSpaceCommon);
    				if( i > 0 ){
    					return true;
    				}
    			}
    		}
    		//样板房windowsPc u3d模型文件
    		if( "design.designTemplet.u3dmodel.windowsPc".equals(modelKey) ){
    			DesignTemplet designTemplet = designTempletService.get(businessId);
    			if( designTemplet != null ){
    				DesignTemplet newDesignTemplet = new DesignTemplet();
    				newDesignTemplet.setId(designTemplet.getId());
    				newDesignTemplet.setPcModelU3dId(modelId);
    				int i = designTempletService.update(newDesignTemplet);
    				if( i > 0 ){
    					return true;
    				}
    			}
    		}
    		//样板房Ios u3d模型文件
    		if( "design.designTemplet.u3dmodel.ios".equals(modelKey) ){
    			DesignTemplet designTemplet = designTempletService.get(businessId);
    			if( designTemplet != null ){
    				DesignTemplet newDesignTemplet = new DesignTemplet();
    				newDesignTemplet.setId(designTemplet.getId());
    				newDesignTemplet.setIosModelU3dId(modelId);
    				int i = designTempletService.update(newDesignTemplet);
    				if( i > 0 ){
    					return true;
    				}
    			}
    		}
    		//样板房android u3d模型文件
    		if( "design.designTemplet.u3dmodel.android".equals(modelKey) ){
    			DesignTemplet designTemplet = designTempletService.get(businessId);
    			if( designTemplet != null ){
    				DesignTemplet newDesignTemplet = new DesignTemplet();
    				newDesignTemplet.setId(designTemplet.getId());
    				newDesignTemplet.setAndroidModelU3dId(modelId);
    				int i = designTempletService.update(newDesignTemplet);
    				if( i > 0 ){
    					return true;
    				}
    			}
    		}
    		return false;
    	}
### res_pic 图片资源库

包含以下几个部分的图片上传

1. 品牌图片
2. 产品图片
3. 产品组合图片
4. 产品结构图片

### res_render_pic  渲染图片资源库

渲染模块

### res_render_pic_group_ref 渲染图片分组管理表

渲染模块

### res_render_video 渲染视频资源库

渲染视频模块

### res_texture 材质库

材质模块

### res_used_products 已使用产品资源库



### res_version 版本人资源库

版本文件

