package com.nork.render.service.impl;


import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.nork.common.exception.GeneratePanoramaException;
import com.nork.common.model.LoginUser;
import com.nork.common.model.ResponseEnvelope;
import com.nork.common.util.StringUtils;
import com.nork.common.util.Utils;
import com.nork.design.model.*;
import com.nork.design.service.*;
import com.nork.home.model.SpaceCommon;
import com.nork.home.service.SpaceCommonService;
import com.nork.pay.metadata.ProductType;
import com.nork.pay.service.PayOrderService;
import com.nork.platform.model.BasePlatform;
import com.nork.platform.service.BasePlatformService;
import com.nork.product.model.AutoRenderTaskConstant;
import com.nork.system.model.ResRenderPic;
import com.nork.system.model.SysUser;
import com.nork.system.service.SysUserService;
import com.nork.user.service.UserFinanceService;

import net.sf.json.JSONObject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Description: 移动端和网站运营逻辑抽象类
 * @author 何文
 * @version 1.0
 * Company:Sandu
 * Copyright:Copyright(c)2017
 * @date 2017/12/8
 */
public abstract class AbstractAutoRenderProcessor {

    protected Logger logger = LoggerFactory.getLogger(AbstractAutoRenderProcessor.class);
    private static final Gson GSON = new Gson();
    @Autowired
    protected DesignTempletService designTempletService;

    @Autowired
    protected SpaceCommonService spaceCommonService;

    @Autowired
    protected DesignPlanRecommendedService designPlanRecommendedService;

    @Autowired
    protected DesignPlanRenderSceneService designPlanRenderSceneService;

    @Autowired
    protected PayOrderService payOrderService;

    @Autowired
    protected SysUserService sysUserService;

    @Autowired
    private UserFinanceService userFinanceService;
    @Autowired
    private BasePlatformService basePlatformService;
    @Autowired
    protected DesignPlanAutoRenderService designPlanAutoRenderServiceImpl;
    @Autowired
    protected FullHousePlanService fullHousePlanService;
    @Value("${app.core.url}")
    private String coreUrl;
    @Value("${app.onekey.url}")
    private String appOnekeyUrl;

    /**
     * 适配构造自动渲染任务对象
     * @return
     * @throws GeneratePanoramaException
     */
    protected AutoRenderTask getAutoRenderTask(ResRenderPic resRenderPic) throws GeneratePanoramaException {

        // 用户ID
        Integer userId = resRenderPic.getUserId();
        // 房型ID
        Integer houseId = resRenderPic.getHouseId();
        // 效果图ID
        Integer designPlanSceneId = resRenderPic.getDesignPlanSceneId();
        // 方案推荐ID
        Integer planRecommendedId = resRenderPic.getPlanRecommendedId();
        // 样板房ID
        Integer templateId = resRenderPic.getTemplateId();
        // 操作来源（0：我的设计效果图 1：方案推荐）
        Integer operationSource = resRenderPic.getOperationSource();
        // 渲染任务类型 （详见ProductType常量类）
        String renderTaskType = resRenderPic.getRenderTaskType();
        // 任务类型（0：自动渲染 1：产品替换）
        Integer taskType = resRenderPic.getTaskType();
        // 任务来源 （0：web 1：APP）
        Integer taskSource = resRenderPic.getTaskSource();
        //订单号
        String orderNo = resRenderPic.getOrderNo();
        //全屋方案id
        Integer fullHousePlanId = resRenderPic.getPlanRecommendedId();
        //方案组合主方案id
        Integer groupPrimaryId = resRenderPic.getGroupPrimaryId();

        if(StringUtils.isEmpty(orderNo)){
        	throw new GeneratePanoramaException(false, "订单号为空");
        }
        BasePlatform basePlatform = basePlatformService.getByCode(resRenderPic.getPlatformCode());
        if (basePlatform == null) {
        	throw new GeneratePanoramaException(false,"平台数据错误！");
		}
        //平台Id
        Integer platformId = basePlatform.getId();

        Integer spaceCommonId = null;
        String templateCode = null;
        String designCode = null;
        String designName = null;
        InetAddress addr = null;

        AutoRenderTask autoRenderTask = new AutoRenderTask();
        autoRenderTask.setOrderNumber(orderNo);
        autoRenderTask.setPlatformId(platformId);
        //
        autoRenderTask.setOverlapResolve(resRenderPic.getOverlapResolve());
        // 校验用户信息
//        LoginUser loginUser = checkSysUserData(userId, houseId, totalFee);
        SysUser sysUser = sysUserService.get(userId);
        LoginUser loginUser = sysUser.toLoginUser();

        try {
            addr = InetAddress.getLocalHost();
        } catch (UnknownHostException e) {
            logger.error("获取IP地址发生异常");
            throw new GeneratePanoramaException(false, "获取IP地址发生异常");
        }
        String hostIp=addr.getHostAddress().toString();

        if (AutoRenderTaskConstant.PLAN_FULL_HOUSE_TYPE.equals(resRenderPic.getPlanHouseType())) {
            //全屋方案
            FullHouseDesignPlan fullHouseDesignPlan = fullHousePlanService.get(fullHousePlanId);
            if (null == fullHouseDesignPlan) {
                logger.error("get by fullHousePlan:{}",fullHousePlanId+" not found FullHouseDesignPlan data");
                throw new GeneratePanoramaException(false, "未找到全屋方案信息");
            }
            designCode = fullHouseDesignPlan.getPlanCode();
            designName = fullHouseDesignPlan.getPlanName();
            autoRenderTask.setFullHousePlanId(fullHousePlanId);
            autoRenderTask.setPlanId(fullHousePlanId);
            autoRenderTask.setTemplateId(-1);

        }else {
            //单空间方案
            if (operationSource.intValue() == AutoRenderTaskConstant.OPERATION_SOURCE_MY_DESIGN) {
                //来源是我的设计
                DesignPlanRenderScene designPlanRenderScene = designPlanRenderSceneService.get(designPlanSceneId);
                if(null == designPlanRenderScene){
                    logger.error("get by designPlanSceneId:{}", designPlanSceneId+" not found DesignPlanRenderScene data");
                    throw new GeneratePanoramaException(false,"未找到方案效果图信息");
                }
                spaceCommonId = designPlanRenderScene.getSpaceCommonId();
                designCode = designPlanRenderScene.getPlanCode();
                designName = designPlanRenderScene.getPlanName();
                autoRenderTask.setPlanId(designPlanSceneId);
            }else if (operationSource.intValue() == AutoRenderTaskConstant.OPERATION_SOURCE_REMMONED) {
                //来源是推荐方案
                if (groupPrimaryId != null && groupPrimaryId != 0 && groupPrimaryId.equals(planRecommendedId)) {
                    //如果装进我家的方案是组合方案的子方案，则去获取最适合的方案适配
                    planRecommendedId = this.getMatchPlanOfGroup(planRecommendedId,templateId);
                }
                DesignPlanRecommended designPlanRecommended = designPlanRecommendedService.get(planRecommendedId);
                if(null == designPlanRecommended){
                    logger.error("get by planRecommendedId:{}", planRecommendedId+" not found DesignPlanRecommended data");
                    throw new GeneratePanoramaException(false, "未找到推荐方案信息");
                }
                spaceCommonId = designPlanRecommended.getSpaceCommonId();
                designCode = designPlanRecommended.getPlanCode();
                designName = designPlanRecommended.getPlanName();
                autoRenderTask.setPlanId(planRecommendedId);
            }

            SpaceCommon spaceCommon = getSpaceCommon(spaceCommonId);
            String spaceCode = spaceCommon.getSpaceCode();
            autoRenderTask.setSpaceCode(spaceCode);

            if (templateId != null && templateId.intValue() > 0) {
                DesignTemplet designTemplet = designTempletService.selectByPrimaryKey(templateId);
                if(null == designTemplet){
                    logger.error("templateId:{},not found data", templateId);
                    throw new GeneratePanoramaException(false, "未找到样板房信息");
                }
                templateCode = designTemplet.getDesignCode();
                autoRenderTask.setTemplateCode(templateCode);
            }

            // 0:自动渲染 1：替换
            if(taskType.intValue() == AutoRenderTaskConstant.TASK_TYPE_AUTO_RENDER){
                autoRenderTask.setTemplateId(templateId);
            }else if(taskType.intValue() == AutoRenderTaskConstant.TASK_TYPE_REPLACE){
                autoRenderTask.setTemplateId(-1);
                autoRenderTask.setPriority(99);
            }

        }

        autoRenderTask.setPlanHouseType(resRenderPic.getPlanHouseType());
        if (houseId != null && houseId > 0) {
            autoRenderTask.setHouseId(houseId);
        }

        autoRenderTask.setOperationSource(operationSource);
        autoRenderTask.setCreator(loginUser.getName());
        autoRenderTask.setModifier(loginUser.getName());
        autoRenderTask.setGmtCreate(new Date());
        autoRenderTask.setGmtModified(new Date());
        autoRenderTask.setTaskType(taskType.intValue());

        autoRenderTask.setOperationUserId(loginUser.getId());
        autoRenderTask.setOperationUserName(loginUser.getName());
        autoRenderTask.setDesignCode(designCode);
        autoRenderTask.setDesignName(designName);
        autoRenderTask.setTaskSource(taskSource);
        autoRenderTask.setHostIp(hostIp);
        //c端的自动渲染设置houseId的值？？？？需要这个干什么
        if (taskSource.intValue() == 0 && taskType.intValue() == 0) {
        	autoRenderTask.setHouseId(houseId);
		}
        if (ProductType.COMMON_RENDER.equals(renderTaskType)) {
            // 普通照片级
            autoRenderTask.setRenderTypesStr(ProductType.PHOTO);
            autoRenderTask.setRenderPic(AutoRenderTaskConstant.NO_RENDER_TASK);
        } else if (ProductType.PANORAMA_RENDER.equals(renderTaskType)) {
            // 720全景
            autoRenderTask.setRenderTypesStr(ProductType.ROAM720);
            autoRenderTask.setRender720(AutoRenderTaskConstant.NO_RENDER_TASK);
        } else if (ProductType.ROAM_VIDEO_RENDER.equals(renderTaskType)) {
            // 漫游视频
            autoRenderTask.setRenderTypesStr(ProductType.VIDEO);
            autoRenderTask.setRenderVideo(AutoRenderTaskConstant.NO_RENDER_TASK);
        } else if (ProductType.ROAM_PANORAMA_RENDER.equals(renderTaskType)) {
            // 720多点
            autoRenderTask.setRenderTypesStr(ProductType.ROAMN720);
            autoRenderTask.setRenderN720(AutoRenderTaskConstant.NO_RENDER_TASK);
        }else{
            throw new GeneratePanoramaException(false, "未知渲染类型");
        }
        return autoRenderTask;
    }

    /**
     * 根据主方案id和样板房id获取最适配的子方案
     * @param planRecommendedId
     * @param templateId
     * @return
     * @throws GeneratePanoramaException
     */
    protected Integer getMatchPlanOfGroup(Integer planRecommendedId, Integer templateId) throws GeneratePanoramaException{
        String url = appOnekeyUrl + "/online/web/design/intelligenceDecoration/getBestMatchInPlanGroup.htm?designTemplateId=" + templateId + "&recommendedPlanId=" + planRecommendedId;
        logger.error("getMatchPlan----------- url : {}", url);
        //远程调用获取最适配子方案
        String result = Utils.doGetMethod(url);
        logger.error("getMatchPlan -------- onekey result = {}", result);

        if (result == null || "".equals(result)) {
            throw new GeneratePanoramaException(false, "组合方案远程获取适配子方案失败,result is null");
        }
        ResponseEnvelope responseEnvelope = GSON.fromJson(result, ResponseEnvelope.class);
        if (!responseEnvelope.isSuccess()) {
            throw new GeneratePanoramaException(false, "组合方案远程获取适配子方案失败,isSuccess="+responseEnvelope.isSuccess());
        }
        if (responseEnvelope.getObj() == null) {
            throw new GeneratePanoramaException(false, "组合方案远程获取适配子方案失败,obj="+responseEnvelope.getObj());
        }
        planRecommendedId = ((Double) responseEnvelope.getObj()).intValue();
        if (null == planRecommendedId || planRecommendedId.intValue() == 0) {
            throw new GeneratePanoramaException(false, "组合方案远程获取适配子方案失败,planRecommendedId="+planRecommendedId);
        }
        logger.error("getMatchPlan -------- get the bast match plan id success = {}", planRecommendedId);

        return planRecommendedId;
    }

    private SpaceCommon getSpaceCommon(Integer spaceCommonId) throws GeneratePanoramaException {
        SpaceCommon spaceCommon = spaceCommonService.get(spaceCommonId);
        if(null == spaceCommon){
            logger.error("spaceCommonId:{},not found data", spaceCommonId);
            throw new GeneratePanoramaException(false, "未找到空间信息");
        }
        return spaceCommon;
    }

    private LoginUser checkSysUserData(Integer userId, Integer houseId, Double totalFee) throws GeneratePanoramaException {
        SysUser sysUser = sysUserService.get(userId);
        LoginUser loginUser = sysUser.toLoginUser();
        //判断用户余额是不是充足
//        if(sysUser.getBalanceAmount().intValue() < totalFee.intValue()) {
//            logger.error("用户：",loginUser.getLoginName()+"余额不足，当前余额：{}",sysUser.getBalanceAmount()+"--订单需要付款金额:{}",totalFee);
//            throw new GeneratePanoramaException(false, "您的余额不足，请到PC端充值！");
//        }

        if(null != houseId && houseId > 0){
            //检查用户户型是否可用(已购买的户型不算入户型数计算) 移动端不需要校验数量
            logger.info("检查用户户型是否可用(已购买的户型不算入户型数计算):userId:{}, houseId:{}.", userId, houseId);
            boolean houseIsAbleUse = userFinanceService.checkUserHouseIsAbleUse(userId, houseId);
            logger.info("检查用户户型是否可用(已购买的户型不算入户型数计算)完成:houseIsAbleUse:{}", houseIsAbleUse);

            if (!houseIsAbleUse) {
                logger.warn("用户：{}，账户互相不足，请购买户型",sysUser.getUserName());
                throw new GeneratePanoramaException(false, "账户户型不足，请购买户型.");
            }
        }
        return loginUser;
    }

    //传入单个taskId的回调
    public  boolean backFillTaskId( String orderNo,Integer taskId,String token,String platformCode){
    	String payPath = Utils.getPropertyName("app","pay.server.url","");
    	String url = payPath+"/web/pay/payOrder/updatePayoOrder?orderNo="+orderNo+"&taskId="+taskId;
    	Map<String,String> params=new HashMap<String,String>();
    	params.put("orderNo", orderNo);
		params.put("taskId", taskId.toString());
		try {
			String result = Utils.doPostMethod(url, params,token,platformCode);
			JSONObject jsonObject = JSONObject.fromObject(result);
        	boolean status = (boolean) jsonObject.get("status");
			return status;
		} catch (Exception e) {
		    logger.error("backFillTaskId========>exception:"+e);
			return false;
		}
    }


    protected List<AutoRenderTask> getSubtaskList(AutoRenderTask mainTask) throws GeneratePanoramaException {

        //调用远程服务获取全屋方案适配的样板房及方案集合-----
        String url = coreUrl + "/v1/core/fullHouse/getMatchInfo";
        Integer houseId = mainTask.getHouseId();
        if (houseId == null || houseId <= 0) {
            logger.error("getSubtaskList ===> 主任务houseId为空");
            throw new GeneratePanoramaException(false,"全屋方案自动渲染，主任务houseId为空");
        }
        url += "?houseId="+houseId+"&fullHousePlanId="+mainTask.getPlanId();
        logger.error("远程调用core获取样板房列表 url="+url);
        String jsonResult = Utils.doGetMethod(url);
        logger.error("远程调用core获取样板房列表 jsonResult="+jsonResult);
        if (StringUtils.isBlank(jsonResult)) {
            logger.error("getSubtaskList ===> 远程调用获取子任务方案id和样板房id有误");
            throw new GeneratePanoramaException(false,"远程调用获取子任务方案id和样板房id有误");
        }


        ResponseEnvelope<MatchInfoVO> response = GSON.fromJson(jsonResult,new TypeToken<ResponseEnvelope<MatchInfoVO>>(){}.getType());
        logger.error("远程调用core获取样板房列表 response="+response);
        List<MatchInfoVO> datalist = response.getDatalist();
        if (datalist==null || datalist.size() == 0) {
            logger.error("getSubtaskList ===> 远程调用获取子任务方案id和样板房id集合为空");
            throw new GeneratePanoramaException(false,"远程调用获取子任务方案id和样板房id集合为空");
        }

        List<AutoRenderTask> autoRenderTaskList = new ArrayList<>();
        AutoRenderTask autoRenderTask;

        for (MatchInfoVO matchInfoVO : datalist) {
            autoRenderTask = new AutoRenderTask();
            BeanUtils.copyProperties(mainTask,autoRenderTask);
            //主子任务不一样的值
            autoRenderTask.setId(null);
            autoRenderTask.setPlanId(matchInfoVO.getDesignRecommendedPlanId());
            autoRenderTask.setTemplateId(matchInfoVO.getDesignTempletId());
            autoRenderTask.setSpaceFunctionId(matchInfoVO.getSpaceFunctionId());
            autoRenderTask.setGmtCreate(new Date());
            autoRenderTask.setGmtModified(new Date());
            autoRenderTask.setMainTaskId(mainTask.getId());
            autoRenderTask.setSpaceCode(matchInfoVO.getSpaceCode());
            autoRenderTask.setTemplateCode(matchInfoVO.getTemplateCode());

            autoRenderTaskList.add(autoRenderTask);
        }
        return autoRenderTaskList;
    }

    protected ResponseEnvelope handleFullHouseAutoRenderTask(ResRenderPic resRenderPic) {
        AutoRenderTask autoRenderTask = null;
        try {
            // 构造全屋渲染主任务对象
            autoRenderTask = getAutoRenderTask(resRenderPic);
        } catch (GeneratePanoramaException e) {
            return new ResponseEnvelope(e.isFlag(), e.getMessage());
        }
        //全屋方案主任务添加到db(先添加到db，子任务要回填)
        Integer taskId = designPlanAutoRenderServiceImpl.add(autoRenderTask);
        autoRenderTask.setId(taskId);
        autoRenderTask.setMainTaskId(taskId);

        List<AutoRenderTask> subtaskList;
        try {
            // 构造全屋渲染子任务对象集合
            subtaskList = getSubtaskList(autoRenderTask);
        } catch (GeneratePanoramaException e) {
            return new ResponseEnvelope(e.isFlag(), e.getMessage());
        }
        if (subtaskList == null || subtaskList.size() == 0) {
            return new ResponseEnvelope(false, "获取子任务集合为空");
        }

        autoRenderTask.setSubtaskCount(subtaskList.size());
        Integer res = designPlanAutoRenderServiceImpl.updateAutoRenderTask(autoRenderTask);
        if (res <= 0) {
            return new ResponseEnvelope(false, "回填主任务相关字段失败");
        }

        //全屋方案子任务集合添加到db
        designPlanAutoRenderServiceImpl.addSubtaskList(subtaskList);
        //全屋方案主任务添加到redis
        Integer result = designPlanAutoRenderServiceImpl.addRedisLists(autoRenderTask);
        //全屋方案子任务集合添加到redis
        boolean listStatus = designPlanAutoRenderServiceImpl.addListToRedisLists(subtaskList);

        String token = resRenderPic.getToken();
        String platformCode = resRenderPic.getPlatformCode();
        Boolean flag = false;

        boolean status = backFillTaskId(autoRenderTask.getOrderNumber(), taskId, token, platformCode);

        if (result > 0 && status && listStatus) {
            flag = true;
            return new ResponseEnvelope<>(flag, "创建渲染任务成功！");
        }
        logger.error("全屋方案装进我家创建渲染任务失败===>result:" + result + ",status:" + status + ",listStatus:" + listStatus);
        return new ResponseEnvelope<>(flag, "创建渲染任务失败！");
    }
}
