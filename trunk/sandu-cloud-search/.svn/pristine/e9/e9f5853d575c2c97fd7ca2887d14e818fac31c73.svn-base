import com.sandu.search.SearchProvider;
import com.sandu.search.common.constant.IndexInfoQueryConfig;
import com.sandu.search.common.tools.JsonUtil;
import com.sandu.search.entity.elasticsearch.constant.IndexConstant;
import com.sandu.search.entity.elasticsearch.constant.TypeConstant;
import com.sandu.search.entity.elasticsearch.dto.DeleteRequestDTO;
import com.sandu.search.entity.elasticsearch.dto.GetRequestDTO;
import com.sandu.search.entity.elasticsearch.dto.IndexRequestDTO;
import com.sandu.search.entity.elasticsearch.response.BulkStatistics;
import com.sandu.search.entity.elasticsearch.response.SearchObjectResponse;
import com.sandu.search.entity.product.dto.ProductDTO;
import com.sandu.search.exception.ElasticSearchException;
import com.sandu.search.service.elasticsearch.ElasticSearchService;
import org.elasticsearch.common.unit.Fuzziness;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/*
* 搜索测试方法
*
* */
@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest(classes = SearchProvider.class)
public class ElasticSearchTest {

    @Autowired
    private ElasticSearchService elasticSearchService;

    @Test
    public void indexTest() throws ElasticSearchException {

        ProductDTO productDTO = new ProductDTO();
        productDTO.setId(2);
        productDTO.setProductCode("BBBBBB");

        IndexRequestDTO indexRequestDTO = new IndexRequestDTO(
                IndexConstant.INDEX_PRODUCT,
                TypeConstant.TYPE_BED,
                "2",
                JsonUtil.toJson(productDTO)
        );


        boolean indexStatus = elasticSearchService.index(indexRequestDTO);
    }

    @Test
    public void getTest() throws ElasticSearchException {

        GetRequestDTO getRequestDTO = new GetRequestDTO(
                IndexConstant.INDEX_PRODUCT,
                TypeConstant.TYPE_BED,
                "2"
        );


        ProductDTO productDTO = (ProductDTO) elasticSearchService.get(getRequestDTO, ProductDTO.class);
        ProductDTO productDTOAndHead = (ProductDTO) elasticSearchService.get(getRequestDTO, ProductDTO.class, null);
    }

    @Test
    public void deleteTest() throws ElasticSearchException {

        DeleteRequestDTO deleteRequestDTO = new DeleteRequestDTO(
                IndexConstant.INDEX_PRODUCT,
                TypeConstant.TYPE_BED,
                "2"
        );

        elasticSearchService.delete(deleteRequestDTO);
    }

    @Test
    public void bulkTest() throws ElasticSearchException {

        List<Object> requestList = new ArrayList<>(3);
        /*######################## CREATE ########################*/
        ProductDTO productDTO = new ProductDTO();
        productDTO.setId(4);
        productDTO.setProductCode("D");

        IndexRequestDTO indexRequestDTO = new IndexRequestDTO(
                IndexConstant.INDEX_PRODUCT,
                TypeConstant.TYPE_BED,
                "4",
                JsonUtil.toJson(productDTO)
        );
        requestList.add(indexRequestDTO);

        /*######################## UPDATE ########################*/
        ProductDTO updateProductDTO = new ProductDTO();
        updateProductDTO.setId(1);
        updateProductDTO.setProductCode("A");
        IndexRequestDTO updateRequestDTO = new IndexRequestDTO(
                IndexConstant.INDEX_PRODUCT,
                TypeConstant.TYPE_BED,
                "1",
                JsonUtil.toJson(updateProductDTO)
        );
        requestList.add(updateRequestDTO);

        /*######################## DELETE ########################*/
        DeleteRequestDTO deleteRequestDTO = new DeleteRequestDTO(
                IndexConstant.INDEX_PRODUCT,
                TypeConstant.TYPE_BED,
                "3"
        );
        requestList.add(deleteRequestDTO);

        //Invoke
        BulkStatistics bulkStatistics = elasticSearchService.bulk(requestList);
        System.out.println(bulkStatistics.toString());
    }

    @Test
    public void searchTest() throws ElasticSearchException{
        QueryBuilder matchQueryBuilder = QueryBuilders.matchQuery("productBrandName", "制造");
        //单词匹配查询
        matchQueryBuilder = QueryBuilders.matchQuery("productBrandName", "乐居").fuzziness(Fuzziness.ZERO);

        //段落匹配
        //matchQueryBuilder = QueryBuilders.matchPhraseQuery("productBrandName", "乐居");
        //多匹配查询
        //matchQueryBuilder = QueryBuilders.multiMatchQuery("乐居", new String[]{"productBrandName", "productName"});

        //相似查询
        //matchQueryBuilder = QueryBuilders.moreLikeThisQuery(new String[]{"乐居"});

        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
        boolQueryBuilder.must(matchQueryBuilder);
        SearchObjectResponse searchObjectResponse = elasticSearchService.productCategorySearch(Arrays.asList(matchQueryBuilder), IndexInfoQueryConfig.DEFAULT_SEARCH_DATA_START, 10);

        String a = "";
    }
}


