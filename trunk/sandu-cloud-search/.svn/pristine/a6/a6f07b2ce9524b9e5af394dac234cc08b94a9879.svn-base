package com.sandu.search.initialize;

import com.sandu.search.common.constant.IndexInfoQueryConfig;
import com.sandu.search.common.tools.JsonUtil;
import com.sandu.search.config.ElasticSearchConfig;
import com.sandu.search.entity.elasticsearch.constant.IndexConstant;
import com.sandu.search.entity.elasticsearch.constant.TypeConstant;
import com.sandu.search.entity.elasticsearch.dto.IndexRequestDTO;
import com.sandu.search.entity.elasticsearch.po.GroupProductPO;
import com.sandu.search.entity.elasticsearch.response.BulkStatistics;
import com.sandu.search.exception.CategoryProductIndexException;
import com.sandu.search.exception.ElasticSearchException;
import com.sandu.search.service.elasticsearch.ElasticSearchService;
import com.sandu.search.service.index.GroupProductIndexService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import java.util.ArrayList;
import java.util.List;

/**
 * 搜索引擎组合产品索引初始化
 *
 * @date 20171225
 * @auth zhengyoucai
 */
@Slf4j
@Component
public class ElasticSearchGroupProductIndex {

    private final static String CLASS_LOG_PREFIX = "搜索引擎组合产品索引初始化:";
    @Autowired
    private ElasticSearchConfig elasticSearchConfig;
    //搜索引擎服务
    @Autowired
    private ElasticSearchService elasticSearchService;
    //分类产品索引服务
    @Autowired
    private GroupProductIndexService groupProductIndexService;

    //@PostConstruct
    public void initElasticSearchGroupProductIndex() {
        //开始时间
        long startTime = System.currentTimeMillis();
        log.info(CLASS_LOG_PREFIX + "是否需要组合产品索引初始化:", elasticSearchConfig.isInitGroupProductIndex());
        //检查是否需要初始化索引
        if (elasticSearchConfig.isInitGroupProductIndex()) {
            //数据查询初始位
            int start = 0;
            //每次数据量
            int limit = IndexInfoQueryConfig.DEFAULT_QUERY_PRODUCTPOINFO_LIMIT;

            //是否继续处理
            boolean isContinueHandler = true;
            //总数据量
            int totalProductCount = 0;
            //总索引量
            int totalIndexCount = 0;
            //异常数据
            int totalExceptionCount = 0;

            while (isContinueHandler) {

                List<GroupProductPO> groupProductPoList;
                /********************************** 查询产品信息 *********************************/
                try {
                    groupProductPoList = groupProductIndexService.queryGroupProductList(start, limit);
                } catch (CategoryProductIndexException e) {
                    log.error(CLASS_LOG_PREFIX + "查询组合产品信息失败:CategoryProductIndexException:{}", e);
                    return;
                }
                //无数据中断操作
                if (null == groupProductPoList || 0 == groupProductPoList.size()) {
                    log.info(CLASS_LOG_PREFIX + "查询组合产品息数据为空：start:{},limit:{}.", start, limit);
                    return;
                }
                //数据不足指定数据量表示已查询出最后一条数据,终止循环
                if (groupProductPoList.size() < IndexInfoQueryConfig.DEFAULT_QUERY_PRODUCTPOINFO_LIMIT) {
                    isContinueHandler = false;
                }

                //批量提交数据对象
                List<Object> bulkIndexList = new ArrayList<>(IndexInfoQueryConfig.DEFAULT_QUERY_PRODUCTPOINFO_LIMIT);

                int failCount = 0;
                /********************************** 处理产组合产品信息数据 *********************************/
                for (GroupProductPO groupProduct : groupProductPoList) {
                    IndexRequestDTO indexRequestDTO = new IndexRequestDTO(
                            IndexConstant.INDEX_GROUP_PRODUCTS,
                            TypeConstant.TYPE_GROUP_PRODUCT,
                            groupProduct.getId().toString(),
                            JsonUtil.toJson(groupProduct)
                    );
                    //加入批量对象
                    bulkIndexList.add(indexRequestDTO);
                }

                //索引数据
                BulkStatistics bulkStatistics;
                try {
                    bulkStatistics = elasticSearchService.bulk(bulkIndexList);
                } catch (ElasticSearchException e) {
                    log.error(CLASS_LOG_PREFIX + "索引组合产品数据异常:ElasticSearchException:{}", e);
                    continue;
                }
                log.info(CLASS_LOG_PREFIX + "索引组合产品数据成功:成功索引数:{},无效索引数:{},BulkStatistics:{}", new String[]{
                        bulkIndexList.size() + "",
                        failCount + "",
                        bulkStatistics.toString()
                });

                //递增start下标
                start = start + limit;

                //累加数据量
                totalProductCount += groupProductPoList.size();
                totalIndexCount += bulkIndexList.size();
                totalExceptionCount += failCount;
            }

            log.info(CLASS_LOG_PREFIX + "索引所有组合产品数据完成!!!产品数据量:{}, 索引数据量:{},失败数:{},共耗时:{}ms", new String[]{
                    totalProductCount + "",
                    totalIndexCount + "",
                    totalExceptionCount + "",
                    (System.currentTimeMillis() - startTime) + ""
            });
        }
    }
}
