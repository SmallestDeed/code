package com.sandu.search.storage.product;

import com.sandu.search.common.constant.ProductAttributeTypeConstant;
import com.sandu.search.entity.elasticsearch.po.metadate.ProductAttributePo;
import com.sandu.search.exception.MetaDataException;
import com.sandu.search.service.metadata.MetaDataService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 产品属性元数据存储
 *
 * @date 20180301
 * @auth pengxuangang
 */
@Slf4j
@Component
public class ProductAttributeMetaDataStorage {

    private final static String CLASS_LOG_PREFIX = "产品属性元数据存储:";
    //产品属性-过滤类型Map
    private static Map<Integer, Map<String, String>> productAttributeFilterMap = new HashMap<>();
    //产品属性-排序类型Map
    private static Map<Integer, Map<String, String>> productAttributeOrderMap = new HashMap<>();
    //元数据服务
    @Autowired
    private MetaDataService metaDataService;

    /**
     * 销毁数据,降低内存占用
     */
    public void destory() {
        if (null != productAttributeFilterMap) {
            productAttributeFilterMap = null;
        }
        if (null != productAttributeOrderMap) {
            productAttributeOrderMap = null;
        }
    }

    /**
     * 更新数据
     *
     * @param isEnforceLoad 是否强制更新
     */
    public void updateData(boolean isEnforceLoad) {

        //若无强制更新则更新前判断是否已有数据
        if (!isEnforceLoad) {
            if (null != productAttributeFilterMap && 0 < productAttributeFilterMap.size()
                    && null != productAttributeOrderMap && 0 < productAttributeOrderMap.size()) {
                return;
            }
        }

        //产品属性元数据
        List<ProductAttributePo> productAttributePoList;
        try {
            //获取数据
            log.info(CLASS_LOG_PREFIX + "开始获取产品属性元数据....");
            productAttributePoList = metaDataService.queryProductAttrMetaData();
            log.info(CLASS_LOG_PREFIX + "获取产品属性元数据完成,总条数:{}", (null == productAttributePoList ? 0 : productAttributePoList.size()));
        } catch (MetaDataException e) {
            log.error(CLASS_LOG_PREFIX + "获取产品属性元数据失败: MetaDataException:{}", e);
            throw new NullPointerException(CLASS_LOG_PREFIX + "获取产品属性元数据失败,List<ProductAttributePo> is null.MetaDataException:" + e);
        }

        //临时对象
        Map<Integer, Map<String, String>> tempProductAttributeFilterMap = new HashMap<>();
        Map<Integer, Map<String, String>> tempProductAttributeOrderMap = new HashMap<>();

        //转换Map
        if (null != productAttributePoList && 0 != productAttributePoList.size()) {
            productAttributePoList.forEach(productAttributePo -> {
                if (null != productAttributePo) {
                    //产品ID
                    Integer productId = productAttributePo.getProductId();
                    //属性Map
                    Map<String, String> attributeMap = new HashMap<>();
                    //插入值
                    attributeMap.put(productAttributePo.getAttributeCode(), productAttributePo.getAttributeValue());
                    //过滤属性
                    if (ProductAttributeTypeConstant.PRODUCT_ATTRIBUTE_TYPE_FILTER.equals(productAttributePo.getAttributeType())) {
                        //更新属性
                        if (tempProductAttributeFilterMap.containsKey(productId)) {
                            //加入原对象
                            attributeMap.putAll(tempProductAttributeFilterMap.get(productId));
                        }
                        //装回对象
                        tempProductAttributeFilterMap.put(productId, attributeMap);
                    } else {
                        //除过滤属性类型的其他均为排序属性
                        //更新属性
                        if (tempProductAttributeOrderMap.containsKey(productId)) {
                            //加入原对象
                            attributeMap.putAll(tempProductAttributeOrderMap.get(productId));
                        }
                        //装回对象
                        tempProductAttributeOrderMap.put(productId, attributeMap);
                    }
                }
            });
        }

        //装回对象
        productAttributeFilterMap = null;
        productAttributeFilterMap = tempProductAttributeFilterMap;
        productAttributeOrderMap = null;
        productAttributeOrderMap = tempProductAttributeOrderMap;
    }

    /**
     * 获取产品过滤属性集合
     *
     * @param productId 产品ID
     * @return
     */
    public Map<String, String> getProductFilterAttributeMap(Integer productId) {
        if (null == productId || 0 >= productId) {
            return null;
        }

        if (null == productAttributeFilterMap || 0 >= productAttributeFilterMap.size()) {
            //更新数据
            updateData(false);
        }

        if (productAttributeFilterMap.containsKey(productId)) {
            return productAttributeFilterMap.get(productId);
        }
        return null;
    }

    /**
     * 获取产品排序属性集合
     *
     * @param productId 产品ID
     * @return
     */
    public Map<String, String> getProductOrderAttributeMap(Integer productId) {
        if (null == productId || 0 >= productId) {
            return null;
        }

        if (null == productAttributeOrderMap || 0 >= productAttributeOrderMap.size()) {
            //更新数据
            updateData(false);
        }

        if (productAttributeOrderMap.containsKey(productId)) {
            return productAttributeOrderMap.get(productId);
        }
        return null;
    }
}
