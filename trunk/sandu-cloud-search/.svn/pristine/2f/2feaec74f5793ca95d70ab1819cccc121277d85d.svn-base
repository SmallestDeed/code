package com.sandu.search.storage.product;

import com.sandu.search.entity.elasticsearch.po.metadate.ProductUsagePo;
import com.sandu.search.exception.MetaDataException;
import com.sandu.search.service.metadata.MetaDataService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 产品使用次数元数据存储
 *
 * @date 20171214
 * @auth pengxuangang
 */
@Slf4j
@Component
public class ProductUsageCountMetaDataStorage {

    private final static String CLASS_LOG_PREFIX = "产品使用次数元数据存储:";
    //产品使用次数元数据Map<productId,Map<userId, usageCount>>
    private static Map<Integer, Map<Integer, Integer>> productUsageCountMap = new HashMap<>();
    //元数据服务
    @Autowired
    private MetaDataService metaDataService;

    /**
     * 更新数据
     *
     * @param isEnforceLoad 是否强制更新
     */
    public void updateData(boolean isEnforceLoad) {

        //若无强制更新则更新前判断是否已有数据
        if (!isEnforceLoad) {
            if (null != productUsageCountMap && 0 < productUsageCountMap.size()) {
                return;
            }
        }

        //产品使用次数元数据
        List<ProductUsagePo> productUsagePoList;
        try {
            //获取数据
            log.info(CLASS_LOG_PREFIX + "开始获取产品使用次数元数据....");
            productUsagePoList = metaDataService.queryProductUsageCountSatatistics();
            log.info(CLASS_LOG_PREFIX + "获取产品使用次数元数据完成,总条数:{}", (null == productUsagePoList ? 0 : productUsagePoList.size()));
        } catch (MetaDataException e) {
            log.error(CLASS_LOG_PREFIX + "获取产品使用次数元数据失败: MetaDataException:{}", e);
            throw new NullPointerException(CLASS_LOG_PREFIX + "获取产品使用次数元数据失败,List<ProductTexturePo> is null.MetaDataException:" + e);
        }

        //临时对象
        Map<Integer, Map<Integer, Integer>> tempProductUsageCountMap = new HashMap<>();

        //转换Map
        if (null != productUsagePoList && 0 != productUsagePoList.size()) {
            productUsagePoList.forEach(productUsagePo -> {

                //产品ID
                Integer productId = productUsagePo.getProductId();
                //用户ID
                int userId = productUsagePo.getUserId();
                //使用次数
                int productUsageCount = productUsagePo.getProductUsageCount();

                //用户产品使用次数集合
                Map<Integer, Integer> userUsageCountMap = new HashMap<>();
                userUsageCountMap.put(userId, productUsageCount);
                if (tempProductUsageCountMap.containsKey(productId)) {
                    userUsageCountMap.putAll(tempProductUsageCountMap.get(productId));
                }

                tempProductUsageCountMap.put(productId, userUsageCountMap);
            });
        }

        //装回对象
        productUsageCountMap = null;
        productUsageCountMap = tempProductUsageCountMap;
    }

    /**
     * 获取产品使用次数元数据Map
     *
     * @return
     */
    public Map<Integer, Integer> getProductUsageCountMetaDataMap(Integer productId) {

        if (null == productId || 0 >= productId) {
            return null;
        }

        if (null == productUsageCountMap || 0 >= productUsageCountMap.size()) {
            //更新数据
            updateData(false);
        }

        if (productUsageCountMap.containsKey(productId)) {
            return productUsageCountMap.get(productId);
        }

        return null;
    }
}
