package com.sandu.search.storage.resource;

import com.sandu.search.common.constant.RedisConstant;
import com.sandu.search.entity.elasticsearch.po.metadate.ResPicPo;
import com.sandu.search.exception.MetaDataException;
import com.sandu.search.service.metadata.MetaDataService;
import com.sandu.search.service.redis.RedisService;
import com.sandu.search.storage.StorageComponent;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 渲染图片资源元数据存储
 *
 * @date 2018/5/31
 * @auth pengxuangang
 * @mail xuangangpeng@gmail.com
 */
@Slf4j
@Component
public class RenderPicMetaDataStorage {

    private final static String CLASS_LOG_PREFIX = "渲染图片资源元数据存储:";
    //默认缓存模式
    private static Integer STORAGE_MODE = StorageComponent.CACHE_MODE;

    private final RedisService redisService;
    private final MetaDataService metaDataService;

    @Autowired
    public RenderPicMetaDataStorage(MetaDataService metaDataService, RedisService redisService) {
        this.metaDataService = metaDataService;
        this.redisService = redisService;
    }

    private static Map<String, String> renderPicMap = null;

    //切换存储模式
    public void changeStorageMode(Integer storageMode) {
        //缓存模式
        if (StorageComponent.CACHE_MODE == storageMode) {
            //清空内存占用
            renderPicMap = null;
            //切换
            STORAGE_MODE = storageMode;
            //内存模式
        } else if(StorageComponent.MEMORY_MODE == storageMode) {
            //切换
            STORAGE_MODE = storageMode;
            //写入内存
            //图片数据过多，太占用内存，所以取消图片数据的内存策略
            //updateData();
            //renderPicMap = redisService.getMap(RedisConstant.RENDER_PIC_DATA);
        }
        log.info(CLASS_LOG_PREFIX + "渲染图片资源存储模式切换成功，当前存储:{}.", StorageComponent.CACHE_MODE == STORAGE_MODE ? "缓存" : "内存");
    }

    //获取Map数据方法兼容
    private String getMap(String mapName, String keyName) {
        //缓存模式
        if (StorageComponent.CACHE_MODE == STORAGE_MODE) {
            return redisService.getMap(mapName, keyName);
            //内存模式
        } else if (StorageComponent.MEMORY_MODE == STORAGE_MODE) {
            if (RedisConstant.RENDER_PIC_DATA.equals(mapName)) {
                //图片数据过多，太占用内存，所以取消图片数据的内存策略
                //return renderPicMap.get(keyName);
                return redisService.getMap(mapName, keyName);
            }
        }
        return null;
    }

    //更新数据
    public void updateData() {
        log.info(CLASS_LOG_PREFIX + "查询渲染图片资源元数据....");

        List<ResPicPo> resPicList;
        try {
            resPicList = metaDataService.queryRenderPicMetaData();
        } catch (MetaDataException e) {
            log.error(CLASS_LOG_PREFIX + "查询渲染图片资源元数据失败: MetaDataException:{}", e);
            throw new NullPointerException(CLASS_LOG_PREFIX + "查询渲染图片资源元数据失败,List<ResPicPo> is null.MetaDataException:" + e);
        }
        log.info(CLASS_LOG_PREFIX + "查询渲染图片资源元数据完成,总条数:{}", (null == resPicList ? 0 : resPicList.size()));

        //Map对象
        Map<String, String> tempRenderPicMap = new HashMap<>();

        //转换为Map元数据
        if (null != resPicList && 0 != resPicList.size()) {
            resPicList.forEach(resPicPo -> tempRenderPicMap.put(resPicPo.getId() + "", resPicPo.getPicPath()));
        }
        log.info(CLASS_LOG_PREFIX + "转换渲染图片资源元数据完成");

        //缓存装载
        redisService.addMapCompatible(RedisConstant.RENDER_PIC_DATA, tempRenderPicMap);
        log.info(CLASS_LOG_PREFIX + "缓存装载渲染图片资源元数据完成");

        //内存模式
        if (StorageComponent.MEMORY_MODE == STORAGE_MODE) {
            renderPicMap = tempRenderPicMap;
            log.info(CLASS_LOG_PREFIX + "内存装载渲染图片资源元数据完成....");
        }
    }

    /**
     * 根据图片ID获取图片路径
     *
     * @param picId 图片ID
     * @return
     */
    public String getPicPathByPicId(Integer picId) {
        if (null == picId || 0 == picId) {
            return null;
        }
        return getMap(RedisConstant.RENDER_PIC_DATA, picId + "");
    }

    /**
     * 根据图片ID列表获取图片路径列表
     *
     * @param picIdList 图片IDList
     * @return
     */
    public List<String> queryPicPathListByPicIdList(List<Integer> picIdList) {

        if (null == picIdList || 0 == picIdList.size()) {
            return null;
        }
        //Del repeat
        picIdList = (List<Integer>)picIdList.stream().distinct();

        List<String> picPathList = new ArrayList<>(picIdList.size());
        for (Integer picId : picIdList) {
            String picPath = getMap(RedisConstant.RENDER_PIC_DATA, picId + "");
            if (!StringUtils.isEmpty(picPath)) {
                picPathList.add(picPath);
            }
        }
        return picPathList;
    }
}
