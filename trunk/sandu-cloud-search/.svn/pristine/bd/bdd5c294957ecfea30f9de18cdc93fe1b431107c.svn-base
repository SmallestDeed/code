package com.sandu.search.storage.resource;

import com.sandu.search.entity.elasticsearch.po.metadate.ResPicPo;
import com.sandu.search.exception.MetaDataException;
import com.sandu.search.service.metadata.MetaDataService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 图片资源元数据存储
 *
 * @date 20171220
 * @auth pengxuangang
 */
@Slf4j
@Component
public class ResPicMetaDataStorage {

    private final static String CLASS_LOG_PREFIX = "图片资源元数据存储:";
    //图片资源元数据Map<picId, PicPath>
    private static Map<Integer, String> resPicMap = new HashMap<>();
    //元数据服务
    @Autowired
    private MetaDataService metaDataService;

    /**
     * 更新数据
     * @param isEnforceLoad 是否强制更新
     */
    public void updateData(boolean isEnforceLoad) {

        //若无强制更新则更新前判断是否已有数据
        if (!isEnforceLoad) {
            if (null != resPicMap && 0 < resPicMap.size()) {
                return;
            }
        }

        List<ResPicPo> resPicList;

        log.info(CLASS_LOG_PREFIX + "开始获取图片资源元数据元数据....");
        try {
            //获取数据
            resPicList = metaDataService.queryResPicMetaData();
        } catch (MetaDataException e) {
            log.error(CLASS_LOG_PREFIX + "获取图片资源元数据失败: MetaDataException:{}", e);
            throw new NullPointerException(CLASS_LOG_PREFIX + "获取图片资源元数据失败,List<ResPicPo> is null.MetaDataException:" + e);
        }
        log.info(CLASS_LOG_PREFIX + "获取图片资源元数据完成,总条数:{}", (null == resPicList ? 0 : resPicList.size()));

        //临时对象
        Map<Integer, String> tempResPicMap = new HashMap<>();

        //转换为Map元数据
        if (null != resPicList && 0 != resPicList.size()) {
            resPicList.forEach(resPicPo -> tempResPicMap.put(resPicPo.getId(), resPicPo.getPicPath()));
        }

        //装回对象
        resPicMap = null;
        resPicMap = tempResPicMap;
    }

    /**
     * 根据图片ID获取图片路径
     *
     * @param picId 图片ID
     * @return
     */
    public String getProductBrandMapMetaData(Integer picId) {
        if (null == resPicMap || 0 >= resPicMap.size()) {
            //更新数据
            updateData(false);
        }
        String picPath = null;
        if (null != picId && 0 != picId && resPicMap.containsKey(picId)) {
            picPath = resPicMap.get(picId);
        }
        return picPath;
    }

    /**
     * 根据图片ID列表获取图片路径列表
     *
     * @param picIdList 图片IDList
     * @return
     */
    public List<String> queryProductBrandMapMetaData(List<Integer> picIdList) {
        if (null == resPicMap || 0 >= resPicMap.size()) {
            //更新数据
            updateData(false);
        }

        List<String> picPathList = null;
        if (null != picIdList && 0 < picIdList.size()) {
            picPathList = new ArrayList<>(picIdList.size());
            for (Integer picId : picIdList) {
                if (resPicMap.containsKey(picId)) {
                    String picPath = resPicMap.get(picId);
                    if (!StringUtils.isEmpty(picPath)) {
                        picPathList.add(picPath);
                    }
                }
            }
        }
        return picPathList;
    }
}
