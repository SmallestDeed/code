package com.sandu.search.storage.product;

import com.sandu.search.entity.elasticsearch.po.ProductCategoryPo;
import com.sandu.search.exception.MetaDataException;
import com.sandu.search.service.metadata.MetaDataService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

import java.util.*;

import static java.util.stream.Collectors.toList;

/**
 * 产品分类元数据存储
 *
 * @date 20171213
 * @auth pengxuangang
 */
@Slf4j
@Component
public class ProductCategoryMetaDataStorage {

    private final static String CLASS_LOG_PREFIX = "产品分类元数据存储:";
    //产品分类元数据
    private static List<ProductCategoryPo> productCategoryPoList = null;
    //产品分类Map元数据
    private static Map<Integer, ProductCategoryPo> productCategoryPoMap = new HashMap<>();
    //产品分类名称Map元数据<categoryId, categoryName>
    private static Map<Integer, String> productCategoryNameMap = new HashMap<>();
    //产品父子分类关系Map元数据<parentCategoryId, List<childrenCategoryId>>
    private static Map<Integer, List<Integer>> parentChildrenCategotyMap = new HashMap<>();
    //元数据服务
    @Autowired
    private MetaDataService metaDataService;

    /**
     * 更新数据
     * @param isEnforceLoad 是否强制更新
     */
    public void updateData(boolean isEnforceLoad) {

        //若无强制更新则更新前判断是否已有数据
        if (!isEnforceLoad) {
            if (null != productCategoryPoList && 0 < productCategoryPoList.size()
                    && null != productCategoryPoMap && 0 < productCategoryPoMap.size()
                    && null != productCategoryNameMap && 0 < productCategoryNameMap.size()
                    && null != parentChildrenCategotyMap && 0 < parentChildrenCategotyMap.size()) {
                return;
            }
        }

        try {
            //获取数据
            log.info(CLASS_LOG_PREFIX + "开始获取产品分类元数据....");
            productCategoryPoList = metaDataService.queryProductCategoryMetaData();
            log.info(CLASS_LOG_PREFIX + "获取产品分类元数据完成,总条数:{}", (null == productCategoryPoList ? 0 : productCategoryPoList.size()));
        } catch (MetaDataException e) {
            log.error(CLASS_LOG_PREFIX + "获取产品分类元数据失败: MetaDataException:{}", e);
            throw new NullPointerException(CLASS_LOG_PREFIX + "获取产品分类元数据失败,List<ProductCategoryPo> is null.MetaDataException:" + e);
        }

        if (null == productCategoryPoList || 0 == productCategoryPoList.size()) {
            log.error(CLASS_LOG_PREFIX + "获取产品分类元数据失败,List<ProductCategoryPo> is null.");
            throw new NullPointerException(CLASS_LOG_PREFIX + "获取产品分类元数据失败,List<ProductCategoryPo> is null.");
        }

        //整理数据
        productCategoryPoList.forEach(productCategoryPo -> {
            //产品分类Map元数据
            productCategoryPoMap.put(productCategoryPo.getId(), productCategoryPo);
            //产品分类名称Map元数据<categoryId, categoryName>
            productCategoryNameMap.put(productCategoryPo.getId(), productCategoryPo.getCategoryName());
            //产品父子分类关系Map元数据<parentCategoryId, List<childrenCategoryId>>
            if (parentChildrenCategotyMap.containsKey(productCategoryPo.getParentCategoryId())) {
                List<Integer> childrenCategoryIdList = new ArrayList<>();
                childrenCategoryIdList.add(productCategoryPo.getId());
                childrenCategoryIdList.addAll(parentChildrenCategotyMap.get(productCategoryPo.getParentCategoryId()));
                parentChildrenCategotyMap.put(productCategoryPo.getParentCategoryId(), childrenCategoryIdList);
            } else {
                parentChildrenCategotyMap.put(productCategoryPo.getParentCategoryId(), Arrays.asList(productCategoryPo.getId()));
            }
        });
    }

    /**
     * 根据分类ID获取产品分类数据
     *
     * @return
     */
    public ProductCategoryPo getProductCategory(int productCategoryId) {
        if (0 == productCategoryId) {
            return null;
        }

        if (null == productCategoryPoMap || 0 >= productCategoryPoMap.size()) {
            //更新数据
            updateData(false);
        }

        if (productCategoryPoMap.containsKey(productCategoryId)) {
            return productCategoryPoMap.get(productCategoryId);
        }

        return null;
    }

    /**
     * 根据分类编码获取产品分类数据
     *
     * @return
     */
    public ProductCategoryPo getProductCategoryByCategoryCode(String productCategoryCode) {
        if (StringUtils.isEmpty(productCategoryCode)) {
            return null;
        }

        if (null == productCategoryPoList || 0 >= productCategoryPoList.size()) {
            //更新数据
            updateData(false);
        }

        for(ProductCategoryPo ProductCategoryPo : productCategoryPoList) {
            if (ProductCategoryPo.getProductCategoryCode().equals(productCategoryCode)) {
                return ProductCategoryPo;
            }
        }

        return null;
    }

    /**
     * 根据产品分类ID列表获取产品分类长编码列表
     *
     * @param categoryIdList 产品分类ID列表
     * @return
     */
    public List<String> queryProductCategoryLongCodeByCategoryIdList(List<Integer> categoryIdList) {

        if (null == categoryIdList || 0 == categoryIdList.size()) {
            return null;
        }

        if (null == productCategoryPoMap || 0 >= productCategoryPoMap.size()) {
            //更新数据
            updateData(false);
        }

        List<String> categoryLongCodeList = new ArrayList<>(categoryIdList.size());
        categoryIdList.forEach(categoryId -> {
            if (null != categoryId && 0 != categoryId && productCategoryPoMap.containsKey(categoryId)) {
                ProductCategoryPo productCategoryPo = productCategoryPoMap.get(categoryId);
                if (null != productCategoryPo) {
                    String productCategoryLongCode = productCategoryPo.getProductCategoryLongCode();
                    if (!StringUtils.isEmpty(productCategoryLongCode)) {
                        categoryLongCodeList.add(productCategoryLongCode);
                    }
                }
            }
        });

        return categoryLongCodeList;
    }

    /**
     * 根据产品分类ID获取所有分类名
     *
     * @param categoryIdList 分类IDList
     * @return
     */
    public List<String> queryProductCategoryIdByProductId(List<Integer> categoryIdList) {
        if (null == categoryIdList || 0 == categoryIdList.size()) {
            return null;
        }

        if (null == productCategoryNameMap || 0 >= productCategoryNameMap.size()) {
            //更新数据
            updateData(false);
        }

        List<String> categoryNameList = new ArrayList<>(categoryIdList.size());
        categoryIdList.forEach(categoryId -> {
            if (null != categoryId && 0 != categoryId && productCategoryNameMap.containsKey(categoryId)) {
                categoryNameList.add(productCategoryNameMap.get(categoryId));
            }
        });

        return categoryNameList;
    }

    /**
     * 根据部分分类长编码名查询所有包含分类长编码名
     *
     * @param codeName
     * @return
     */
    public List<String> queryAllCategoryCodeByCodeName(String codeName) {

        if (StringUtils.isEmpty(codeName)) {
            return null;
        }

        if (null == productCategoryNameMap || 0 >= productCategoryNameMap.size()) {
            //更新数据
            updateData(false);
        }

        //使用Map结构是为了去除重复--查询后合并
        Map<String, String> categoryCodeMap = new HashMap<>();

        String[] codeNameArr = codeName.split(",");
        for (String nowCodeName : codeNameArr) {
            productCategoryPoList.forEach(productCategoryPo -> {
                //分类长编码
                String productCategoryLongCode = productCategoryPo.getProductCategoryLongCode();
                if (!StringUtils.isEmpty(productCategoryLongCode) && productCategoryLongCode.contains("." + nowCodeName + ".")) {
                    categoryCodeMap.put(productCategoryLongCode, productCategoryLongCode);
                }
            });
        }

        List<String> categoryCodeList = new ArrayList<>(categoryCodeMap.size());
        //转换为List
        if (null != categoryCodeMap && 0 < categoryCodeMap.size()) {
            for (Map.Entry<String, String> entries : categoryCodeMap.entrySet()) {
                categoryCodeList.add(entries.getKey());
            }
        }
        return categoryCodeList;
    }

    /**
     * 根据分类ID列表查询可用分类长编码列表
     * <p>
     * Step：
     * 1.根据3级分类查询出4级，5级所有分类
     * 2.将5级分类的兄弟节点分类去掉(仅保留已选择同级分类)
     * 3.查询公司可使用的分类
     * 4.去掉结果中不包含在公司分类中的分类(合并需要查询的分类和已配置分类)
     *
     * @param thirdLevelCategoryId                产品三级分类ID
     * @param fifthLevelCategoryIdConditionList   产品五级分类ID列表
     * @param companyAliveCategoryIdConditionList 公司有效分类ID列表
     * @return
     */
    public List<Integer> queryAliveCategoryLongCodeByCategoryIdList(int thirdLevelCategoryId, List<Integer> fifthLevelCategoryIdConditionList, List<Integer> companyAliveCategoryIdConditionList) {

        if (null == fifthLevelCategoryIdConditionList || 0 >= fifthLevelCategoryIdConditionList.size() || 0 == thirdLevelCategoryId) {
            return null;
        }

        if (null == productCategoryPoList || 0 >= productCategoryPoList.size()) {
            //更新数据
            updateData(false);
        }

        //可用分类Id列表
        List<Integer> categoryIdList = new ArrayList<>();

        /***************************** 1.根据3级分类查询出4级，5级所有分类 ***************************************/
        //四级分类ID列表
        List<Integer> fourthLevelCategoryIdList = queryCategoryIdListByParentCategoryIdList(Arrays.asList(thirdLevelCategoryId));
        //五级分类ID列表
        List<Integer> fifthLevelCategoryIdList = queryCategoryIdListByParentCategoryIdList(fifthLevelCategoryIdConditionList);

        //将结果全装入总结果集
        categoryIdList.add(thirdLevelCategoryId);
        categoryIdList.addAll(fourthLevelCategoryIdList);
        categoryIdList.addAll(fifthLevelCategoryIdList);

        /***************************** 2.将5级分类的兄弟节点分类去掉(仅保留已选择同级分类) ***************************************/
        fifthLevelCategoryIdConditionList.forEach(fifthLevelCategoryIdCondition -> {
            //当前选中条件父分类ID
            Integer parentCategoryId = getParentCategoryIdByChildrenCategoryId(fifthLevelCategoryIdCondition);
            //查询出父类下有哪些子分类
            List<Integer> childrenCategoryIdList = queryCategoryIdListByParentCategoryIdList(Arrays.asList(parentCategoryId));
            //遍历子节点
            if (null != childrenCategoryIdList && 0 < childrenCategoryIdList.size()) {
                //遍历节点，将子节点全部删除
                childrenCategoryIdList.forEach(childrenCategoryId -> {
                    for (Integer categoryId : categoryIdList) {
                        if (categoryId.equals(childrenCategoryId)) {
                            categoryIdList.remove(categoryId);
                            break;
                        }
                    }
                });
                //增加参与条件子节点(这样做每次少遍历一遍列表,提高性能)
                categoryIdList.add(fifthLevelCategoryIdCondition);
            }
        });

        /***************************** 3.查询公司可使用的分类 ***************************************/
        List<Integer> companyAliveCategoryIdList = new ArrayList<>();
        if (null != companyAliveCategoryIdConditionList && 0 < companyAliveCategoryIdConditionList.size()) {
            //加入已配置父分类
            companyAliveCategoryIdList.addAll(companyAliveCategoryIdConditionList);
            //遍历父分类，加入子分类
            companyAliveCategoryIdConditionList.forEach(companyAliveCategoryIdCondition -> {
                //查询第一级分类
                List<Integer> firstCategoryIdList = queryCategoryIdListByParentCategoryIdList(Arrays.asList(companyAliveCategoryIdCondition));
                if (null != firstCategoryIdList && 0 < firstCategoryIdList.size()) {
                    companyAliveCategoryIdList.addAll(firstCategoryIdList);
                    //查询第二级分类
                    List<Integer> twoCategoryIdList = queryCategoryIdListByParentCategoryIdList(firstCategoryIdList);
                    if (null != twoCategoryIdList && 0 < twoCategoryIdList.size()) {
                        companyAliveCategoryIdList.addAll(twoCategoryIdList);
                        //查询第三级分类
                        List<Integer> threeCategoryIdList = queryCategoryIdListByParentCategoryIdList(twoCategoryIdList);
                        if (null != threeCategoryIdList && 0 < threeCategoryIdList.size()) {
                            companyAliveCategoryIdList.addAll(threeCategoryIdList);
                            //查询第四级分类
                            List<Integer> fourCategoryIdList = queryCategoryIdListByParentCategoryIdList(threeCategoryIdList);
                            if (null != fourCategoryIdList && 0 < fourCategoryIdList.size()) {
                                companyAliveCategoryIdList.addAll(fourCategoryIdList);
                                //查询第五级分类
                                List<Integer> fiveCategoryIdList = queryCategoryIdListByParentCategoryIdList(fourCategoryIdList);
                                if (null != fiveCategoryIdList && 0 < fiveCategoryIdList.size()) {
                                    companyAliveCategoryIdList.addAll(fiveCategoryIdList);
                                }
                            }
                        }
                    }
                }

            });
        }

        /***************************** 4.返回去掉结果中不包含在公司分类中的分类(合并需要查询的分类和已配置分类) ***************************************/
        return categoryIdList.stream().filter(item -> companyAliveCategoryIdList.contains(item)).collect(toList());
    }

    /**
     * 根据分类ID查询分类层级
     *
     * @param categoryId    分类ID
     * @return
     */
    public Integer getCategoryLevelByCategoryId(Integer categoryId) {
        if (null == categoryId) {
            return null;
        }

        if (null == productCategoryPoMap || 0 >= productCategoryPoMap.size()) {
            //更新数据
            updateData(false);
        }

        if (productCategoryPoMap.containsKey(categoryId)) {
            return productCategoryPoMap.get(categoryId).getCategoryLevel();
        }

        return null;
    }

    /**
     * 根据父分类ID查询子分类IDList
     *
     * @param parentCategoryIdList
     * @return
     */
    private List<Integer> queryCategoryIdListByParentCategoryIdList(List<Integer> parentCategoryIdList) {

        if (null == parentCategoryIdList || 0 >= parentCategoryIdList.size()) {
            return null;
        }

        if (null == parentChildrenCategotyMap || 0 >= parentChildrenCategotyMap.size()) {
            //更新数据
            updateData(false);
        }

        List<Integer> childrenCategoryIdList = new ArrayList<>();
        parentCategoryIdList.forEach(parentCategoryId -> {
            if (parentChildrenCategotyMap.containsKey(parentCategoryId)) {
                childrenCategoryIdList.addAll(parentChildrenCategotyMap.get(parentCategoryId));
            }
        });

        return childrenCategoryIdList;
    }

    /**
     * 根据子分类ID查询父分类ID
     *
     * @param childrenId    子分类ID
     * @return
     */
    private Integer getParentCategoryIdByChildrenCategoryId(Integer childrenId) {

        if (null == childrenId) {
            return null;
        }

        if (null == productCategoryPoMap || 0 >= productCategoryPoMap.size()) {
            //更新数据
            updateData(false);
        }

        if (productCategoryPoMap.containsKey(childrenId)) {
            return productCategoryPoMap.get(childrenId).getParentCategoryId();
        }
        return null;
    }


    /**
     * 根据分类ID查询分类编码
     *
     * @param categoryIds    分类ID组
     * @return
     */
    public List<String> queryCategoryCodeByCategoryIds(String[] categoryIds) {

        if (null == categoryIds || 0 >= categoryIds.length) {
            return null;
        }

        if (null == productCategoryPoMap || 0 >= productCategoryPoMap.size()) {
            //更新数据
            updateData(false);
        }

        //分类code列表
        List<String> categoryCodeList = new ArrayList<>(categoryIds.length);

        for (String categoryIdStr : categoryIds) {
            if (!StringUtils.isEmpty(categoryIdStr)) {
                //分类ID
                int categoryId = Integer.parseInt(categoryIdStr);
                if (productCategoryPoMap.containsKey(categoryId)) {
                    categoryCodeList.add(productCategoryPoMap.get(categoryId).getProductCategoryCode());
                }
            }
        }

        return categoryCodeList;
    }
}