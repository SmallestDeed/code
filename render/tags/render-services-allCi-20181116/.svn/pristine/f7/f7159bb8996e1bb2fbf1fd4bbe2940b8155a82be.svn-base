<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.nork.product.dao.PrepProductSearchInfoMapper">
	<!-- **插入定义** -->
	<insert id="insertSelective" parameterType="com.nork.product.model.PrepProductSearchInfo"  useGeneratedKeys="true" keyProperty="id">
		insert into prep_product_search_info
		<trim prefix="(" suffix=")" suffixOverrides=",">
		<if test="productId!= null">product_id, </if>
		<if test="categoryLongCode!= null">category_long_code, </if>
		<if test="firstStageCode!= null">first_stage_code, </if>
		<if test="secondStageCode!= null">second_stage_code, </if>
		<if test="thirdStageCode!= null">third_stage_code, </if>
		<if test="fourthStageCode!= null">fourth_stage_code, </if>
		<if test="fifthStageCode!= null">fifth_stage_code, </if>
		<if test="bigTypeValue!= null">big_type_value, </if>
		<if test="smallTypeValue!= null">small_type_value, </if>
		<if test="brandId!= null">brand_id, </if>
		<if test="houseTypeValue!= null">house_type_value, </if>
		<if test="isCustom!= null">is_custom, </if>
		<if test="baimoId!= null">baimo_id, </if>
		<if test="spaceCommonId!= null">space_common_id, </if>
		<if test="designTempletId!= null">design_templet_id, </if>
		<if test="usageAmount!= null">usage_amount, </if>
		<if test="price!= null">price, </if>
		<if test="sysCode!= null">sys_code, </if>
		<if test="creator!= null">creator, </if>
		<if test="gmtCreate!= null">gmt_create, </if>
		<if test="modifier!= null">modifier, </if>
		<if test="gmtModified!= null">gmt_modified, </if>
		<if test="isDeleted!= null">is_deleted, </if>
		<if test="att1!= null">att1, </if>
		<if test="att2!= null">att2, </if>
		<if test="numa1!= null">numa1, </if>
		<if test="numa2!= null">numa2, </if>
		<if test="remark!= null">remark, </if>
		<if test="styleId!= null">style_id, </if>
		<if test="measureCode!= null">measure_code, </if>
		<if test="productSmallpoxIdentify!= null">product_smallpox_identify_str, </if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
		<if test="productId!= null">  #{productId,jdbcType=INTEGER}, </if>
		<if test="categoryLongCode!= null">  #{categoryLongCode,jdbcType=VARCHAR}, </if>
		<if test="firstStageCode!= null">  #{firstStageCode,jdbcType=VARCHAR}, </if>
		<if test="secondStageCode!= null">  #{secondStageCode,jdbcType=VARCHAR}, </if>
		<if test="thirdStageCode!= null">  #{thirdStageCode,jdbcType=VARCHAR}, </if>
		<if test="fourthStageCode!= null">  #{fourthStageCode,jdbcType=VARCHAR}, </if>
		<if test="fifthStageCode!= null">  #{fifthStageCode,jdbcType=VARCHAR}, </if>
		<if test="bigTypeValue!= null">  #{bigTypeValue,jdbcType=INTEGER}, </if>
		<if test="smallTypeValue!= null">  #{smallTypeValue,jdbcType=INTEGER}, </if>
		<if test="brandId!= null">  #{brandId,jdbcType=INTEGER}, </if>
		<if test="houseTypeValue!= null">  #{houseTypeValue,jdbcType=VARCHAR}, </if>
		<if test="isCustom!= null">  #{isCustom,jdbcType=INTEGER}, </if>
		<if test="baimoId!= null">  #{baimoId,jdbcType=INTEGER}, </if>
		<if test="spaceCommonId!= null">  #{spaceCommonId,jdbcType=INTEGER}, </if>
		<if test="designTempletId!= null">  #{designTempletId,jdbcType=INTEGER}, </if>
		<if test="usageAmount!= null">  #{usageAmount,jdbcType=INTEGER}, </if>
		<if test="price!= null">  #{price,jdbcType=DOUBLE}, </if>
		<if test="sysCode!= null">  #{sysCode,jdbcType=VARCHAR}, </if>
		<if test="creator!= null">  #{creator,jdbcType=VARCHAR}, </if>
		<if test="gmtCreate!= null">  #{gmtCreate,jdbcType=TIMESTAMP}, </if>
		<if test="modifier!= null">  #{modifier,jdbcType=VARCHAR}, </if>
		<if test="gmtModified!= null">  #{gmtModified,jdbcType=TIMESTAMP}, </if>
		<if test="isDeleted!= null">  #{isDeleted,jdbcType=INTEGER}, </if>
		<if test="att1!= null">  #{att1,jdbcType=VARCHAR}, </if>
		<if test="att2!= null">  #{att2,jdbcType=VARCHAR}, </if>
		<if test="numa1!= null">  #{numa1,jdbcType=INTEGER}, </if>
		<if test="numa2!= null">  #{numa2,jdbcType=INTEGER}, </if>
		<if test="remark!= null">  #{remark,jdbcType=VARCHAR}, </if>	
		<if test="styleId!= null">  #{styleId,jdbcType=INTEGER}, </if>
		<if test="measureCode!= null">  #{measureCode,jdbcType=VARCHAR}, </if>
		<if test="productSmallpoxIdentify!= null">  #{productSmallpoxIdentify,jdbcType=VARCHAR}, </if>
		</trim>
	</insert>

	<!-- **更新定义** -->
	<update id="updateByPrimaryKeySelective" parameterType="com.nork.product.model.PrepProductSearchInfo">
		update prep_product_search_info
		<set>
		<if test="productId!= null">  product_id = #{productId,jdbcType=INTEGER}, </if>
		<if test="categoryLongCode!= null">  category_long_code = #{categoryLongCode,jdbcType=VARCHAR}, </if>
		<if test="firstStageCode!= null">  first_stage_code = #{firstStageCode,jdbcType=VARCHAR}, </if>
		<if test="secondStageCode!= null">  second_stage_code = #{secondStageCode,jdbcType=VARCHAR}, </if>
		<if test="thirdStageCode!= null">  third_stage_code = #{thirdStageCode,jdbcType=VARCHAR}, </if>
		<if test="fourthStageCode!= null">  fourth_stage_code = #{fourthStageCode,jdbcType=VARCHAR}, </if>
		<if test="fifthStageCode!= null">  fifth_stage_code = #{fifthStageCode,jdbcType=VARCHAR}, </if>
		<if test="bigTypeValue!= null">  big_type_value = #{bigTypeValue,jdbcType=INTEGER}, </if>
		<if test="smallTypeValue!= null">  small_type_value = #{smallTypeValue,jdbcType=INTEGER}, </if>
		<if test="brandId!= null">  brand_id = #{brandId,jdbcType=INTEGER}, </if>
		<if test="houseTypeValue!= null">  house_type_value = #{houseTypeValue,jdbcType=VARCHAR}, </if>
		<if test="isCustom!= null">  is_custom = #{isCustom,jdbcType=INTEGER}, </if>
		<if test="baimoId!= null">  baimo_id = #{baimoId,jdbcType=INTEGER}, </if>
		<if test="spaceCommonId!= null">  space_common_id = #{spaceCommonId,jdbcType=INTEGER}, </if>
		<if test="designTempletId!= null">  design_templet_id = #{designTempletId,jdbcType=INTEGER}, </if>
		<if test="usageAmount!= null">  usage_amount = #{usageAmount,jdbcType=INTEGER}, </if>
		<if test="price!= null">  price = #{price,jdbcType=DOUBLE}, </if>
		<if test="sysCode!= null">  sys_code = #{sysCode,jdbcType=VARCHAR}, </if>
		<if test="creator!= null">  creator = #{creator,jdbcType=VARCHAR}, </if>
		<if test="gmtCreate!= null">  gmt_create = #{gmtCreate,jdbcType=TIMESTAMP}, </if>
		<if test="modifier!= null">  modifier = #{modifier,jdbcType=VARCHAR}, </if>
		<if test="gmtModified!= null">  gmt_modified = #{gmtModified,jdbcType=TIMESTAMP}, </if>
		<if test="isDeleted!= null">  is_deleted = #{isDeleted,jdbcType=INTEGER}, </if>
		<if test="att1!= null">  att1 = #{att1,jdbcType=VARCHAR}, </if>
		<if test="att2!= null">  att2 = #{att2,jdbcType=VARCHAR}, </if>
		<if test="numa1!= null">  numa1 = #{numa1,jdbcType=INTEGER}, </if>
		<if test="numa2!= null">  numa2 = #{numa2,jdbcType=INTEGER}, </if>
		<if test="remark!= null">  remark = #{remark,jdbcType=VARCHAR}, </if>
		<if test="styleId!= null">  style_id = #{styleId,jdbcType=INTEGER}, </if>
		<if test="measureCode!= null">  measure_code = #{measureCode,jdbcType=VARCHAR}, </if>
		<if test="productSmallpoxIdentify!= null">  product_smallpox_identify_str = #{productSmallpoxIdentify,jdbcType=VARCHAR}, </if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>

	<!-- **删除定义** -->
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from prep_product_search_info
		where id = #{id,jdbcType=INTEGER}
	</delete>
	
	<!-- **常量定义** -->
	<sql id="All_Column_List">
		id,product_id,category_long_code,first_stage_code,second_stage_code,third_stage_code,fourth_stage_code,fifth_stage_code,big_type_value,small_type_value,brand_id,house_type_value,is_custom,baimo_id,space_common_id,design_templet_id,usage_amount,price,sys_code,creator,gmt_create,modifier,gmt_modified,is_deleted,att1,att2,numa1,numa2,remark,style_id,measure_code,product_smallpox_identify_str
	</sql>
	
	<!-- **结果定义** -->
	<resultMap id="AllResultMap" type="com.nork.product.model.PrepProductSearchInfo">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result  column="product_id" property="productId" jdbcType="INTEGER" />
		<result  column="category_long_code" property="categoryLongCode" jdbcType="VARCHAR" />
		<result  column="product_code" property="productCode" jdbcType="VARCHAR" />
		<result  column="first_stage_code" property="firstStageCode" jdbcType="VARCHAR" />
		<result  column="second_stage_code" property="secondStageCode" jdbcType="VARCHAR" />
		<result  column="third_stage_code" property="thirdStageCode" jdbcType="VARCHAR" />
		<result  column="fourth_stage_code" property="fourthStageCode" jdbcType="VARCHAR" />
		<result  column="fifth_stage_code" property="fifthStageCode" jdbcType="VARCHAR" />
		<result  column="big_type_value" property="bigTypeValue" jdbcType="INTEGER" />
		<result  column="small_type_value" property="smallTypeValue" jdbcType="INTEGER" />
		<result  column="brand_id" property="brandId" jdbcType="INTEGER" />
		<result  column="house_type_value" property="houseTypeValue" jdbcType="VARCHAR" />
		<result  column="is_custom" property="isCustom" jdbcType="INTEGER" />
		<result  column="baimo_id" property="baimoId" jdbcType="INTEGER" />
		<result  column="space_common_id" property="spaceCommonId" jdbcType="INTEGER" />
		<result  column="design_templet_id" property="designTempletId" jdbcType="INTEGER" />
		<result  column="usage_amount" property="usageAmount" jdbcType="INTEGER" />
		<result  column="price" property="price" jdbcType="DOUBLE" />
		<result  column="sys_code" property="sysCode" jdbcType="VARCHAR" />
		<result  column="creator" property="creator" jdbcType="VARCHAR" />
		<result  column="gmt_create" property="gmtCreate" jdbcType="TIMESTAMP" />
		<result  column="modifier" property="modifier" jdbcType="VARCHAR" />
		<result  column="gmt_modified" property="gmtModified" jdbcType="TIMESTAMP" />
		<result  column="is_deleted" property="isDeleted" jdbcType="INTEGER" />
		<result  column="att1" property="att1" jdbcType="VARCHAR" />
		<result  column="att2" property="att2" jdbcType="VARCHAR" />
		<result  column="numa1" property="numa1" jdbcType="INTEGER" />
		<result  column="numa2" property="numa2" jdbcType="INTEGER" />
		<result  column="remark" property="remark" jdbcType="VARCHAR" />
		<result  column="product_length" property="productLength" jdbcType="INTEGER" />
		<result  column="product_width" property="productWidth" jdbcType="INTEGER" />
		<result  column="product_height" property="productHeight" jdbcType="INTEGER" />
		<result  column="brand_name" property="brandName" jdbcType="VARCHAR" />
		<result  column="product_model" property="productModel" jdbcType="VARCHAR" />
		<result  column="product_status" property="productStatus" jdbcType="INTEGER" />
		<result  column="style_id" property="styleId" jdbcType="INTEGER" />
		<result  column="measure_code" property="measureCode" jdbcType="VARCHAR" />
		<result  column="product_smallpox_identify_str" property="productSmallpoxIdentify" jdbcType="VARCHAR" />
	</resultMap>
	
	<!-- **查询定义** -->
	<!-- 按主键查询 -->
	<select id="selectByPrimaryKey" resultMap="AllResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="All_Column_List" />
		from prep_product_search_info
		where id = #{id,jdbcType=INTEGER}
	</select>
	
	<!-- 查询所有，可排序 -->
    <select id="selectList" resultMap="AllResultMap"
		parameterType="com.nork.product.model.PrepProductSearchInfo">
		select
		<include refid="All_Column_List" />
		<if test="levelLimitCount>=0">
			 from ( select * from prep_product_search_info limit #{levelLimitCount}  ) A
		</if>
		<if test="levelLimitCount &lt; 0">
			 from prep_product_search_info
		</if>
         where 1=1
		<if test="productId!= null">  and product_id = #{productId,jdbcType=INTEGER} </if>
		<if test="categoryLongCode!= null">  and category_long_code = #{categoryLongCode,jdbcType=VARCHAR} </if>
		<if test="firstStageCode!= null">  and first_stage_code = #{firstStageCode,jdbcType=VARCHAR} </if>
		<if test="secondStageCode!= null">  and second_stage_code = #{secondStageCode,jdbcType=VARCHAR} </if>
		<if test="thirdStageCode!= null">  and third_stage_code = #{thirdStageCode,jdbcType=VARCHAR} </if>
		<if test="fourthStageCode!= null">  and fourth_stage_code = #{fourthStageCode,jdbcType=VARCHAR} </if>
		<if test="fifthStageCode!= null">  and fifth_stage_code = #{fifthStageCode,jdbcType=VARCHAR} </if>
		<if test="bigTypeValue!= null">  and big_type_value = #{bigTypeValue,jdbcType=INTEGER} </if>
		<if test="smallTypeValue!= null">  and small_type_value = #{smallTypeValue,jdbcType=INTEGER} </if>
		<if test="brandId!= null">  and brand_id = #{brandId,jdbcType=INTEGER} </if>
		<if test="houseTypeValue!= null">  and house_type_value = #{houseTypeValue,jdbcType=VARCHAR} </if>
		<if test="isCustom!= null">  and is_custom = #{isCustom,jdbcType=INTEGER} </if>
		<if test="baimoId!= null">  and baimo_id = #{baimoId,jdbcType=INTEGER} </if>
		<if test="spaceCommonId!= null">  and space_common_id = #{spaceCommonId,jdbcType=INTEGER} </if>
		<if test="designTempletId!= null">  and design_templet_id = #{designTempletId,jdbcType=INTEGER} </if>
		<if test="usageAmount!= null">  and usage_amount = #{usageAmount,jdbcType=INTEGER} </if>
		<if test="price!= null">  and price = #{price,jdbcType=DOUBLE} </if>
		<if test="sysCode!= null">  and sys_code = #{sysCode,jdbcType=VARCHAR} </if>
		<if test="creator!= null">  and creator = #{creator,jdbcType=VARCHAR} </if>
		<if test="gmtCreate!= null">  and gmt_create = #{gmtCreate,jdbcType=TIMESTAMP} </if>
		<if test="modifier!= null">  and modifier = #{modifier,jdbcType=VARCHAR} </if>
		<if test="gmtModified!= null">  and gmt_modified = #{gmtModified,jdbcType=TIMESTAMP} </if>
		<if test="isDeleted!= null">  and is_deleted = #{isDeleted,jdbcType=INTEGER} </if>
		<if test="att1!= null">  and att1 = #{att1,jdbcType=VARCHAR} </if>
		<if test="att2!= null">  and att2 = #{att2,jdbcType=VARCHAR} </if>
		<if test="numa1!= null">  and numa1 = #{numa1,jdbcType=INTEGER} </if>
		<if test="numa2!= null">  and numa2 = #{numa2,jdbcType=INTEGER} </if>
		<if test="remark!= null">  and remark = #{remark,jdbcType=VARCHAR} </if>
		<if test="order != null and  order !=''  ">
			order by ${order}
			<if test="orderNum != null and  orderNum !='' ">
				${orderNum}
			</if>
		</if>
		<if test="orders != null and  orders !=''  ">
		   order by ${orders}
		</if>
	</select>
	
	<!-- 分页汇总 -->
	<select id="selectCount" resultType="int"
		parameterType="com.nork.product.model.search.PrepProductSearchInfoSearch">
		select count(*)
		<if test="levelLimitCount>=0">
			 from ( select * from prep_product_search_info limit #{levelLimitCount}  ) A
		</if>
		<if test="levelLimitCount &lt; 0">
			 from prep_product_search_info
		</if>
		where 1=1
		<if test="productId !=  null  ">			and product_id  = #{productId,jdbcType=INTEGER} </if>
		<if test="categoryLongCode !=  null and categoryLongCode !=  ''   "> and category_long_code  = #{categoryLongCode,jdbcType=VARCHAR} </if>
		<if test="sch_CategoryLongCode_ !=  null and sch_CategoryLongCode_ !=  ''   ">
			and category_long_code  like CONCAT(CONCAT('%',#{sch_CategoryLongCode_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_CategoryLongCode !=  null and sch_CategoryLongCode !=  ''   ">
			and category_long_code  like CONCAT('%',#{sch_CategoryLongCode,jdbcType=VARCHAR})
		 </if>
		<if test="schCategoryLongCode_ !=  null and schCategoryLongCode_ !=  ''   ">
			and category_long_code  like CONCAT(#{schCategoryLongCode_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="categoryLongCodeStart !=  null and categoryLongCodeEnd!= null  ">
			and category_long_code between #{categoryLongCodeStart,jdbcType=VARCHAR} and #{categoryLongCodeEnd,jdbcType=VARCHAR}
		 </if>
		<if test="firstStageCode !=  null and firstStageCode !=  ''   "> and first_stage_code  = #{firstStageCode,jdbcType=VARCHAR} </if>
		<if test="sch_FirstStageCode_ !=  null and sch_FirstStageCode_ !=  ''   ">
			and first_stage_code  like CONCAT(CONCAT('%',#{sch_FirstStageCode_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_FirstStageCode !=  null and sch_FirstStageCode !=  ''   ">
			and first_stage_code  like CONCAT('%',#{sch_FirstStageCode,jdbcType=VARCHAR})
		 </if>
		<if test="schFirstStageCode_ !=  null and schFirstStageCode_ !=  ''   ">
			and first_stage_code  like CONCAT(#{schFirstStageCode_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="firstStageCodeStart !=  null and firstStageCodeEnd!= null  ">
			and first_stage_code between #{firstStageCodeStart,jdbcType=VARCHAR} and #{firstStageCodeEnd,jdbcType=VARCHAR}
		 </if>
		<if test="secondStageCode !=  null and secondStageCode !=  ''   "> and second_stage_code  = #{secondStageCode,jdbcType=VARCHAR} </if>
		<if test="sch_SecondStageCode_ !=  null and sch_SecondStageCode_ !=  ''   ">
			and second_stage_code  like CONCAT(CONCAT('%',#{sch_SecondStageCode_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_SecondStageCode !=  null and sch_SecondStageCode !=  ''   ">
			and second_stage_code  like CONCAT('%',#{sch_SecondStageCode,jdbcType=VARCHAR})
		 </if>
		<if test="schSecondStageCode_ !=  null and schSecondStageCode_ !=  ''   ">
			and second_stage_code  like CONCAT(#{schSecondStageCode_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="secondStageCodeStart !=  null and secondStageCodeEnd!= null  ">
			and second_stage_code between #{secondStageCodeStart,jdbcType=VARCHAR} and #{secondStageCodeEnd,jdbcType=VARCHAR}
		 </if>
		<if test="thirdStageCode !=  null and thirdStageCode !=  ''   "> and third_stage_code  = #{thirdStageCode,jdbcType=VARCHAR} </if>
		<if test="sch_ThirdStageCode_ !=  null and sch_ThirdStageCode_ !=  ''   ">
			and third_stage_code  like CONCAT(CONCAT('%',#{sch_ThirdStageCode_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_ThirdStageCode !=  null and sch_ThirdStageCode !=  ''   ">
			and third_stage_code  like CONCAT('%',#{sch_ThirdStageCode,jdbcType=VARCHAR})
		 </if>
		<if test="schThirdStageCode_ !=  null and schThirdStageCode_ !=  ''   ">
			and third_stage_code  like CONCAT(#{schThirdStageCode_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="thirdStageCodeStart !=  null and thirdStageCodeEnd!= null  ">
			and third_stage_code between #{thirdStageCodeStart,jdbcType=VARCHAR} and #{thirdStageCodeEnd,jdbcType=VARCHAR}
		 </if>
		<if test="fourthStageCode !=  null and fourthStageCode !=  ''   "> and fourth_stage_code  = #{fourthStageCode,jdbcType=VARCHAR} </if>
		<if test="sch_FourthStageCode_ !=  null and sch_FourthStageCode_ !=  ''   ">
			and fourth_stage_code  like CONCAT(CONCAT('%',#{sch_FourthStageCode_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_FourthStageCode !=  null and sch_FourthStageCode !=  ''   ">
			and fourth_stage_code  like CONCAT('%',#{sch_FourthStageCode,jdbcType=VARCHAR})
		 </if>
		<if test="schFourthStageCode_ !=  null and schFourthStageCode_ !=  ''   ">
			and fourth_stage_code  like CONCAT(#{schFourthStageCode_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="fourthStageCodeStart !=  null and fourthStageCodeEnd!= null  ">
			and fourth_stage_code between #{fourthStageCodeStart,jdbcType=VARCHAR} and #{fourthStageCodeEnd,jdbcType=VARCHAR}
		 </if>
		<if test="fifthStageCode !=  null and fifthStageCode !=  ''   "> and fifth_stage_code  = #{fifthStageCode,jdbcType=VARCHAR} </if>
		<if test="sch_FifthStageCode_ !=  null and sch_FifthStageCode_ !=  ''   ">
			and fifth_stage_code  like CONCAT(CONCAT('%',#{sch_FifthStageCode_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_FifthStageCode !=  null and sch_FifthStageCode !=  ''   ">
			and fifth_stage_code  like CONCAT('%',#{sch_FifthStageCode,jdbcType=VARCHAR})
		 </if>
		<if test="schFifthStageCode_ !=  null and schFifthStageCode_ !=  ''   ">
			and fifth_stage_code  like CONCAT(#{schFifthStageCode_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="fifthStageCodeStart !=  null and fifthStageCodeEnd!= null  ">
			and fifth_stage_code between #{fifthStageCodeStart,jdbcType=VARCHAR} and #{fifthStageCodeEnd,jdbcType=VARCHAR}
		 </if>
		<if test="bigTypeValue !=  null  ">			and big_type_value  = #{bigTypeValue,jdbcType=INTEGER} </if>
		<if test="smallTypeValue !=  null  ">			and small_type_value  = #{smallTypeValue,jdbcType=INTEGER} </if>
		<if test="brandId !=  null  ">			and brand_id  = #{brandId,jdbcType=INTEGER} </if>
		<if test="houseTypeValue !=  null and houseTypeValue !=  ''   "> and house_type_value  = #{houseTypeValue,jdbcType=VARCHAR} </if>
		<if test="sch_HouseTypeValue_ !=  null and sch_HouseTypeValue_ !=  ''   ">
			and house_type_value  like CONCAT(CONCAT('%',#{sch_HouseTypeValue_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_HouseTypeValue !=  null and sch_HouseTypeValue !=  ''   ">
			and house_type_value  like CONCAT('%',#{sch_HouseTypeValue,jdbcType=VARCHAR})
		 </if>
		<if test="schHouseTypeValue_ !=  null and schHouseTypeValue_ !=  ''   ">
			and house_type_value  like CONCAT(#{schHouseTypeValue_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="houseTypeValueStart !=  null and houseTypeValueEnd!= null  ">
			and house_type_value between #{houseTypeValueStart,jdbcType=VARCHAR} and #{houseTypeValueEnd,jdbcType=VARCHAR}
		 </if>
		<if test="isCustom !=  null  ">			and is_custom  = #{isCustom,jdbcType=INTEGER} </if>
		<if test="baimoId !=  null  ">			and baimo_id  = #{baimoId,jdbcType=INTEGER} </if>
		<if test="spaceCommonId !=  null  ">			and space_common_id  = #{spaceCommonId,jdbcType=INTEGER} </if>
		<if test="designTempletId !=  null  ">			and design_templet_id  = #{designTempletId,jdbcType=INTEGER} </if>
		<if test="usageAmount !=  null  ">			and usage_amount  = #{usageAmount,jdbcType=INTEGER} </if>
		<if test="price !=  null  ">			and price  = #{price,jdbcType=DOUBLE} </if>
		<if test="sysCode !=  null and sysCode !=  ''   "> and sys_code  = #{sysCode,jdbcType=VARCHAR} </if>
		<if test="sch_SysCode_ !=  null and sch_SysCode_ !=  ''   ">
			and sys_code  like CONCAT(CONCAT('%',#{sch_SysCode_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_SysCode !=  null and sch_SysCode !=  ''   ">
			and sys_code  like CONCAT('%',#{sch_SysCode,jdbcType=VARCHAR})
		 </if>
		<if test="schSysCode_ !=  null and schSysCode_ !=  ''   ">
			and sys_code  like CONCAT(#{schSysCode_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="sysCodeStart !=  null and sysCodeEnd!= null  ">
			and sys_code between #{sysCodeStart,jdbcType=VARCHAR} and #{sysCodeEnd,jdbcType=VARCHAR}
		 </if>
		<if test="creator !=  null and creator !=  ''   "> and creator  = #{creator,jdbcType=VARCHAR} </if>
		<if test="sch_Creator_ !=  null and sch_Creator_ !=  ''   ">
			and creator  like CONCAT(CONCAT('%',#{sch_Creator_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_Creator !=  null and sch_Creator !=  ''   ">
			and creator  like CONCAT('%',#{sch_Creator,jdbcType=VARCHAR})
		 </if>
		<if test="schCreator_ !=  null and schCreator_ !=  ''   ">
			and creator  like CONCAT(#{schCreator_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="creatorStart !=  null and creatorEnd!= null  ">
			and creator between #{creatorStart,jdbcType=VARCHAR} and #{creatorEnd,jdbcType=VARCHAR}
		 </if>
		<if test="gmtCreate !=  null  ">
			and gmt_create  = #{gmtCreate,jdbcType=TIMESTAMP}
		 </if>
		<if test="gmtCreateStart !=  null and gmtCreateEnd!= null  ">
			and gmt_create between #{gmtCreateStart,jdbcType=TIMESTAMP} and #{gmtCreateEnd,jdbcType=TIMESTAMP}
		 </if>
		<if test="modifier !=  null and modifier !=  ''   "> and modifier  = #{modifier,jdbcType=VARCHAR} </if>
		<if test="sch_Modifier_ !=  null and sch_Modifier_ !=  ''   ">
			and modifier  like CONCAT(CONCAT('%',#{sch_Modifier_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_Modifier !=  null and sch_Modifier !=  ''   ">
			and modifier  like CONCAT('%',#{sch_Modifier,jdbcType=VARCHAR})
		 </if>
		<if test="schModifier_ !=  null and schModifier_ !=  ''   ">
			and modifier  like CONCAT(#{schModifier_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="modifierStart !=  null and modifierEnd!= null  ">
			and modifier between #{modifierStart,jdbcType=VARCHAR} and #{modifierEnd,jdbcType=VARCHAR}
		 </if>
		<if test="gmtModified !=  null  ">
			and gmt_modified  = #{gmtModified,jdbcType=TIMESTAMP}
		 </if>
		<if test="gmtModifiedStart !=  null and gmtModifiedEnd!= null  ">
			and gmt_modified between #{gmtModifiedStart,jdbcType=TIMESTAMP} and #{gmtModifiedEnd,jdbcType=TIMESTAMP}
		 </if>
		<if test="isDeleted !=  null  ">			and is_deleted  = #{isDeleted,jdbcType=INTEGER} </if>
		<if test="att1 !=  null and att1 !=  ''   "> and att1  = #{att1,jdbcType=VARCHAR} </if>
		<if test="sch_Att1_ !=  null and sch_Att1_ !=  ''   ">
			and att1  like CONCAT(CONCAT('%',#{sch_Att1_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_Att1 !=  null and sch_Att1 !=  ''   ">
			and att1  like CONCAT('%',#{sch_Att1,jdbcType=VARCHAR})
		 </if>
		<if test="schAtt1_ !=  null and schAtt1_ !=  ''   ">
			and att1  like CONCAT(#{schAtt1_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="att1Start !=  null and att1End!= null  ">
			and att1 between #{att1Start,jdbcType=VARCHAR} and #{att1End,jdbcType=VARCHAR}
		 </if>
		<if test="att2 !=  null and att2 !=  ''   "> and att2  = #{att2,jdbcType=VARCHAR} </if>
		<if test="sch_Att2_ !=  null and sch_Att2_ !=  ''   ">
			and att2  like CONCAT(CONCAT('%',#{sch_Att2_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_Att2 !=  null and sch_Att2 !=  ''   ">
			and att2  like CONCAT('%',#{sch_Att2,jdbcType=VARCHAR})
		 </if>
		<if test="schAtt2_ !=  null and schAtt2_ !=  ''   ">
			and att2  like CONCAT(#{schAtt2_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="att2Start !=  null and att2End!= null  ">
			and att2 between #{att2Start,jdbcType=VARCHAR} and #{att2End,jdbcType=VARCHAR}
		 </if>
		<if test="numa1 !=  null  ">			and numa1  = #{numa1,jdbcType=INTEGER} </if>
		<if test="numa2 !=  null  ">			and numa2  = #{numa2,jdbcType=INTEGER} </if>
		<if test="remark !=  null and remark !=  ''   "> and remark  = #{remark,jdbcType=VARCHAR} </if>		<if test="sch_Remark_ !=  null and sch_Remark_ !=  ''   ">
			and remark  like CONCAT(CONCAT('%',#{sch_Remark_,jdbcType=VARCHAR}),'%')
		 </if>		<if test="sch_Remark !=  null and sch_Remark !=  ''   ">
			and remark  like CONCAT('%',#{sch_Remark,jdbcType=VARCHAR})
		 </if>		<if test="schRemark_ !=  null and schRemark_ !=  ''   ">
			and remark  like CONCAT(#{schRemark_,jdbcType=VARCHAR},'%')
		 </if>		<if test="remarkStart !=  null and remarkEnd!= null  ">
			and remark between #{remarkStart,jdbcType=VARCHAR} and #{remarkEnd,jdbcType=VARCHAR}
		 </if>
	</select>
	
	<!-- 分页查询 ,可在PrepProductSearchInfoSearch中自定义查询条件-->
	<select id="selectPaginatedList" resultMap="AllResultMap"
		parameterType="com.nork.product.model.search.PrepProductSearchInfoSearch">
		select
		<include refid="All_Column_List" />
	    <if test="levelLimitCount>=0">
			 from ( select * from prep_product_search_info limit #{levelLimitCount}  ) A
		</if>
		<if test="levelLimitCount &lt; 0">
			 from prep_product_search_info
		</if>
		where 1=1	
		<if test="productId !=  null  ">			and product_id  = #{productId,jdbcType=INTEGER} </if>
		<if test="categoryLongCode !=  null and categoryLongCode !=  ''   "> and category_long_code  = #{categoryLongCode,jdbcType=VARCHAR} </if>
		<if test="sch_CategoryLongCode_ !=  null and sch_CategoryLongCode_ !=  ''   ">
			and category_long_code  like CONCAT(CONCAT('%',#{sch_CategoryLongCode_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_CategoryLongCode !=  null and sch_CategoryLongCode !=  ''   ">
			and category_long_code  like CONCAT('%',#{sch_CategoryLongCode,jdbcType=VARCHAR})
		 </if>
		<if test="schCategoryLongCode_ !=  null and schCategoryLongCode_ !=  ''   ">
			and category_long_code  like CONCAT(#{schCategoryLongCode_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="categoryLongCodeStart !=  null and categoryLongCodeEnd!= null  ">
			and category_long_code between #{categoryLongCodeStart,jdbcType=VARCHAR} and #{categoryLongCodeEnd,jdbcType=VARCHAR}
		 </if>
		<if test="firstStageCode !=  null and firstStageCode !=  ''   "> and first_stage_code  = #{firstStageCode,jdbcType=VARCHAR} </if>
		<if test="sch_FirstStageCode_ !=  null and sch_FirstStageCode_ !=  ''   ">
			and first_stage_code  like CONCAT(CONCAT('%',#{sch_FirstStageCode_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_FirstStageCode !=  null and sch_FirstStageCode !=  ''   ">
			and first_stage_code  like CONCAT('%',#{sch_FirstStageCode,jdbcType=VARCHAR})
		 </if>
		<if test="schFirstStageCode_ !=  null and schFirstStageCode_ !=  ''   ">
			and first_stage_code  like CONCAT(#{schFirstStageCode_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="firstStageCodeStart !=  null and firstStageCodeEnd!= null  ">
			and first_stage_code between #{firstStageCodeStart,jdbcType=VARCHAR} and #{firstStageCodeEnd,jdbcType=VARCHAR}
		 </if>
		<if test="secondStageCode !=  null and secondStageCode !=  ''   "> and second_stage_code  = #{secondStageCode,jdbcType=VARCHAR} </if>
		<if test="sch_SecondStageCode_ !=  null and sch_SecondStageCode_ !=  ''   ">
			and second_stage_code  like CONCAT(CONCAT('%',#{sch_SecondStageCode_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_SecondStageCode !=  null and sch_SecondStageCode !=  ''   ">
			and second_stage_code  like CONCAT('%',#{sch_SecondStageCode,jdbcType=VARCHAR})
		 </if>
		<if test="schSecondStageCode_ !=  null and schSecondStageCode_ !=  ''   ">
			and second_stage_code  like CONCAT(#{schSecondStageCode_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="secondStageCodeStart !=  null and secondStageCodeEnd!= null  ">
			and second_stage_code between #{secondStageCodeStart,jdbcType=VARCHAR} and #{secondStageCodeEnd,jdbcType=VARCHAR}
		 </if>
		<if test="thirdStageCode !=  null and thirdStageCode !=  ''   "> and third_stage_code  = #{thirdStageCode,jdbcType=VARCHAR} </if>
		<if test="sch_ThirdStageCode_ !=  null and sch_ThirdStageCode_ !=  ''   ">
			and third_stage_code  like CONCAT(CONCAT('%',#{sch_ThirdStageCode_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_ThirdStageCode !=  null and sch_ThirdStageCode !=  ''   ">
			and third_stage_code  like CONCAT('%',#{sch_ThirdStageCode,jdbcType=VARCHAR})
		 </if>
		<if test="schThirdStageCode_ !=  null and schThirdStageCode_ !=  ''   ">
			and third_stage_code  like CONCAT(#{schThirdStageCode_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="thirdStageCodeStart !=  null and thirdStageCodeEnd!= null  ">
			and third_stage_code between #{thirdStageCodeStart,jdbcType=VARCHAR} and #{thirdStageCodeEnd,jdbcType=VARCHAR}
		 </if>
		<if test="fourthStageCode !=  null and fourthStageCode !=  ''   "> and fourth_stage_code  = #{fourthStageCode,jdbcType=VARCHAR} </if>
		<if test="sch_FourthStageCode_ !=  null and sch_FourthStageCode_ !=  ''   ">
			and fourth_stage_code  like CONCAT(CONCAT('%',#{sch_FourthStageCode_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_FourthStageCode !=  null and sch_FourthStageCode !=  ''   ">
			and fourth_stage_code  like CONCAT('%',#{sch_FourthStageCode,jdbcType=VARCHAR})
		 </if>
		<if test="schFourthStageCode_ !=  null and schFourthStageCode_ !=  ''   ">
			and fourth_stage_code  like CONCAT(#{schFourthStageCode_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="fourthStageCodeStart !=  null and fourthStageCodeEnd!= null  ">
			and fourth_stage_code between #{fourthStageCodeStart,jdbcType=VARCHAR} and #{fourthStageCodeEnd,jdbcType=VARCHAR}
		 </if>
		<if test="fifthStageCode !=  null and fifthStageCode !=  ''   "> and fifth_stage_code  = #{fifthStageCode,jdbcType=VARCHAR} </if>
		<if test="sch_FifthStageCode_ !=  null and sch_FifthStageCode_ !=  ''   ">
			and fifth_stage_code  like CONCAT(CONCAT('%',#{sch_FifthStageCode_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_FifthStageCode !=  null and sch_FifthStageCode !=  ''   ">
			and fifth_stage_code  like CONCAT('%',#{sch_FifthStageCode,jdbcType=VARCHAR})
		 </if>
		<if test="schFifthStageCode_ !=  null and schFifthStageCode_ !=  ''   ">
			and fifth_stage_code  like CONCAT(#{schFifthStageCode_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="fifthStageCodeStart !=  null and fifthStageCodeEnd!= null  ">
			and fifth_stage_code between #{fifthStageCodeStart,jdbcType=VARCHAR} and #{fifthStageCodeEnd,jdbcType=VARCHAR}
		 </if>
		<if test="bigTypeValue !=  null  ">			and big_type_value  = #{bigTypeValue,jdbcType=INTEGER} </if>
		<if test="smallTypeValue !=  null  ">			and small_type_value  = #{smallTypeValue,jdbcType=INTEGER} </if>
		<if test="brandId !=  null  ">			and brand_id  = #{brandId,jdbcType=INTEGER} </if>
		<if test="houseTypeValue !=  null and houseTypeValue !=  ''   "> and house_type_value  = #{houseTypeValue,jdbcType=VARCHAR} </if>
		<if test="sch_HouseTypeValue_ !=  null and sch_HouseTypeValue_ !=  ''   ">
			and house_type_value  like CONCAT(CONCAT('%',#{sch_HouseTypeValue_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_HouseTypeValue !=  null and sch_HouseTypeValue !=  ''   ">
			and house_type_value  like CONCAT('%',#{sch_HouseTypeValue,jdbcType=VARCHAR})
		 </if>
		<if test="schHouseTypeValue_ !=  null and schHouseTypeValue_ !=  ''   ">
			and house_type_value  like CONCAT(#{schHouseTypeValue_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="houseTypeValueStart !=  null and houseTypeValueEnd!= null  ">
			and house_type_value between #{houseTypeValueStart,jdbcType=VARCHAR} and #{houseTypeValueEnd,jdbcType=VARCHAR}
		 </if>
		<if test="isCustom !=  null  ">			and is_custom  = #{isCustom,jdbcType=INTEGER} </if>
		<if test="baimoId !=  null  ">			and baimo_id  = #{baimoId,jdbcType=INTEGER} </if>
		<if test="spaceCommonId !=  null  ">			and space_common_id  = #{spaceCommonId,jdbcType=INTEGER} </if>
		<if test="designTempletId !=  null  ">			and design_templet_id  = #{designTempletId,jdbcType=INTEGER} </if>
		<if test="usageAmount !=  null  ">			and usage_amount  = #{usageAmount,jdbcType=INTEGER} </if>
		<if test="price !=  null  ">			and price  = #{price,jdbcType=DOUBLE} </if>
		<if test="sysCode !=  null and sysCode !=  ''   "> and sys_code  = #{sysCode,jdbcType=VARCHAR} </if>
		<if test="sch_SysCode_ !=  null and sch_SysCode_ !=  ''   ">
			and sys_code  like CONCAT(CONCAT('%',#{sch_SysCode_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_SysCode !=  null and sch_SysCode !=  ''   ">
			and sys_code  like CONCAT('%',#{sch_SysCode,jdbcType=VARCHAR})
		 </if>
		<if test="schSysCode_ !=  null and schSysCode_ !=  ''   ">
			and sys_code  like CONCAT(#{schSysCode_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="sysCodeStart !=  null and sysCodeEnd!= null  ">
			and sys_code between #{sysCodeStart,jdbcType=VARCHAR} and #{sysCodeEnd,jdbcType=VARCHAR}
		 </if>
		<if test="creator !=  null and creator !=  ''   "> and creator  = #{creator,jdbcType=VARCHAR} </if>
		<if test="sch_Creator_ !=  null and sch_Creator_ !=  ''   ">
			and creator  like CONCAT(CONCAT('%',#{sch_Creator_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_Creator !=  null and sch_Creator !=  ''   ">
			and creator  like CONCAT('%',#{sch_Creator,jdbcType=VARCHAR})
		 </if>
		<if test="schCreator_ !=  null and schCreator_ !=  ''   ">
			and creator  like CONCAT(#{schCreator_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="creatorStart !=  null and creatorEnd!= null  ">
			and creator between #{creatorStart,jdbcType=VARCHAR} and #{creatorEnd,jdbcType=VARCHAR}
		 </if>
		<if test="gmtCreate !=  null  ">
			and gmt_create  = #{gmtCreate,jdbcType=TIMESTAMP}
		 </if>
		<if test="gmtCreateStart !=  null and gmtCreateEnd!= null  ">
			and gmt_create between #{gmtCreateStart,jdbcType=TIMESTAMP} and #{gmtCreateEnd,jdbcType=TIMESTAMP}
		 </if>
		<if test="modifier !=  null and modifier !=  ''   "> and modifier  = #{modifier,jdbcType=VARCHAR} </if>
		<if test="sch_Modifier_ !=  null and sch_Modifier_ !=  ''   ">
			and modifier  like CONCAT(CONCAT('%',#{sch_Modifier_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_Modifier !=  null and sch_Modifier !=  ''   ">
			and modifier  like CONCAT('%',#{sch_Modifier,jdbcType=VARCHAR})
		 </if>
		<if test="schModifier_ !=  null and schModifier_ !=  ''   ">
			and modifier  like CONCAT(#{schModifier_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="modifierStart !=  null and modifierEnd!= null  ">
			and modifier between #{modifierStart,jdbcType=VARCHAR} and #{modifierEnd,jdbcType=VARCHAR}
		 </if>
		<if test="gmtModified !=  null  ">
			and gmt_modified  = #{gmtModified,jdbcType=TIMESTAMP}
		 </if>
		<if test="gmtModifiedStart !=  null and gmtModifiedEnd!= null  ">
			and gmt_modified between #{gmtModifiedStart,jdbcType=TIMESTAMP} and #{gmtModifiedEnd,jdbcType=TIMESTAMP}
		 </if>
		<if test="isDeleted !=  null  ">			and is_deleted  = #{isDeleted,jdbcType=INTEGER} </if>
		<if test="att1 !=  null and att1 !=  ''   "> and att1  = #{att1,jdbcType=VARCHAR} </if>
		<if test="sch_Att1_ !=  null and sch_Att1_ !=  ''   ">
			and att1  like CONCAT(CONCAT('%',#{sch_Att1_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_Att1 !=  null and sch_Att1 !=  ''   ">
			and att1  like CONCAT('%',#{sch_Att1,jdbcType=VARCHAR})
		 </if>
		<if test="schAtt1_ !=  null and schAtt1_ !=  ''   ">
			and att1  like CONCAT(#{schAtt1_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="att1Start !=  null and att1End!= null  ">
			and att1 between #{att1Start,jdbcType=VARCHAR} and #{att1End,jdbcType=VARCHAR}
		 </if>
		<if test="att2 !=  null and att2 !=  ''   "> and att2  = #{att2,jdbcType=VARCHAR} </if>
		<if test="sch_Att2_ !=  null and sch_Att2_ !=  ''   ">
			and att2  like CONCAT(CONCAT('%',#{sch_Att2_,jdbcType=VARCHAR}),'%')
		 </if>
		<if test="sch_Att2 !=  null and sch_Att2 !=  ''   ">
			and att2  like CONCAT('%',#{sch_Att2,jdbcType=VARCHAR})
		 </if>
		<if test="schAtt2_ !=  null and schAtt2_ !=  ''   ">
			and att2  like CONCAT(#{schAtt2_,jdbcType=VARCHAR},'%')
		 </if>
		<if test="att2Start !=  null and att2End!= null  ">
			and att2 between #{att2Start,jdbcType=VARCHAR} and #{att2End,jdbcType=VARCHAR}
		 </if>
		<if test="numa1 !=  null  ">			and numa1  = #{numa1,jdbcType=INTEGER} </if>
		<if test="numa2 !=  null  ">			and numa2  = #{numa2,jdbcType=INTEGER} </if>
		<if test="remark !=  null and remark !=  ''   "> and remark  = #{remark,jdbcType=VARCHAR} </if>		<if test="sch_Remark_ !=  null and sch_Remark_ !=  ''   ">
			and remark  like CONCAT(CONCAT('%',#{sch_Remark_,jdbcType=VARCHAR}),'%')
		 </if>		<if test="sch_Remark !=  null and sch_Remark !=  ''   ">
			and remark  like CONCAT('%',#{sch_Remark,jdbcType=VARCHAR})
		 </if>		<if test="schRemark_ !=  null and schRemark_ !=  ''   ">
			and remark  like CONCAT(#{schRemark_,jdbcType=VARCHAR},'%')
		 </if>		<if test="remarkStart !=  null and remarkEnd!= null  ">
			and remark between #{remarkStart,jdbcType=VARCHAR} and #{remarkEnd,jdbcType=VARCHAR}
		 </if>
		<if test="order != null and  order !=''  ">
			order by ${order} <if test="orderNum != null and  orderNum !='' ">${orderNum}</if>
		</if>
		<if test="orders != null and  orders !=''  ">  order by #{orders}</if>
		<if test="order == null and  orders == null ">  order by id desc</if>
		<if test="start !=-1 and limit !=-1"> LIMIT #{start}, #{limit}</if>
	</select>

	<!-- getProductIdList -->
	<select id="getProductIdList" parameterType="com.nork.product.model.PrepProductSearchInfo" resultType="java.lang.Integer">
		select distinct(ppsi.id)  
		<if test="levelLimitCount>=0">
			 from ( select * from prep_product_search_info limit #{levelLimitCount}  ) ppsi
		</if>
		<if test="levelLimitCount &lt; 0">
			 from	prep_product_search_info ppsi
		</if>
		
		where 1=1
		
		<!-- 分类过滤->start -->
		<!-- ppsi.third_stage_code = "dim" -->
		<choose>
			<when test="firstStageCode != null and firstStageCode != ''">
				and ppsi.first_stage_code = #{firstStageCode,jdbcType=VARCHAR}
			</when>
			<otherwise>
				<choose>
					<when test="secondStageCode != null and secondStageCode != ''">
						and ppsi.second_stage_code = #{secondStageCode,jdbcType=VARCHAR}
					</when>
					<otherwise>
						<choose>
							<when test="thirdStageCode != null and thirdStageCode != ''">
								and ppsi.third_stage_code = #{thirdStageCode,jdbcType=VARCHAR}
							</when>
							<otherwise>
								<choose>
									<when test="fourthStageCode != null and fourthStageCode != ''">
										and ppsi.fourth_stage_code = #{fourthStageCode,jdbcType=VARCHAR}
									</when>
									<otherwise>
										<choose>
											<when test="fifthStageCode != null and fifthStageCode != ''">
												and ppsi.fifth_stage_code = #{fifthStageCode,jdbcType=VARCHAR}
											</when>
											<otherwise>
												and ppsi.category_long_code LIKE CONCAT('%',#{categoryLongCodeLike,jdbcType=VARCHAR},'%')
											</otherwise>
										</choose>
									</otherwise>
								</choose>
							</otherwise>
						</choose>
					</otherwise>
				</choose>
			</otherwise>
		</choose>
		<if test="bigTypeValue !=null">
			and ppsi.big_type_value = #{bigTypeValue,jdbcType=INTEGER}
		</if>
		<!-- 分类过滤->end -->
		
		<!-- 空间类型过滤->start -->
		<if test="houseTypeList != null and houseTypeList.size > 0">
			and (
			<foreach collection="houseTypeList" index="index" item="item">
				<choose>
					<when test="index== 0">
						concat("," , ppsi.house_type_value , ",") like
						concat("%," ,#{item,jdbcType=VARCHAR}, ",%")
					</when>
					<otherwise>
						or concat("," , ppsi.house_type_value , ",") like
						concat("%," ,#{item,jdbcType=VARCHAR}, ",%")
					</otherwise>
				</choose>
			</foreach>
			)
		</if>
		<!-- 空间类型过滤->end -->
		
		<!-- 授权码过滤->start -->
		
		<!-- 授权码过滤->end -->
		
		<!-- 排序定制(倒)->属性(未加入)(倒)->使用量(倒)->价格(升) -->
		order by ppsi.is_custom desc,ppsi.usage_amount desc,ppsi.price asc
		<!-- 分页 -->
		limit #{start} , #{limit}
	</select>
	
	<resultMap id="CategoryProductResultMap" type="com.nork.product.model.CategoryProductResult">
		<id column="product_id" property="productId" jdbcType="INTEGER"/>
		<result column="product_code" property="productCode" jdbcType="VARCHAR"/>
		<result column="pic_path" property="picPath" jdbcType="VARCHAR"/>
		<result column="product_type_value" property="productTypeValue" jdbcType="INTEGER"/>
		<result column="product_type_name" property="productTypeName" jdbcType="VARCHAR"/>
		<result column="product_type_code" property="productTypeCode" jdbcType="VARCHAR"/>
		<result column="product_small_type_value" property="productSmallTypeValue" jdbcType="INTEGER"/>
		<result column="product_small_type_name" property="productSmallTypeName" jdbcType="VARCHAR"/>
		<result column="product_small_type_code" property="productSmallTypeCode" jdbcType="VARCHAR"/>
		<result column="product_length" property="productLength" jdbcType="VARCHAR"/>
		<result column="product_width" property="productWidth" jdbcType="VARCHAR"/>
		<result column="product_height" property="productHeight" jdbcType="VARCHAR"/>
		<result column="u3d_model_path" property="u3dModelPath" jdbcType="VARCHAR"/>
		<result column="split_textures_info" property="splitTexturesInfoStr" jdbcType="VARCHAR"/>
<!-- 		<result column="new_windows_u3dModel_id" property="newWindowsU3dModelId" jdbcType="INTEGER"/> -->
		<result column="res_texture_id" property="materialPicId" jdbcType="INTEGER"/>
		<result column="res_texture_path" property="resTexturePath" jdbcType="INTEGER"/>
		<result column="texture_attr_value" property="textureAttrValue" jdbcType="INTEGER"/>
		<result column="texture_width" property="textureWidth" jdbcType="VARCHAR"/>
		<result column="texture_height" property="textureHeight" jdbcType="VARCHAR"/>
		<result column="lay_modes" property="laymodes" jdbcType="VARCHAR"/>
		<result column="is_customized" property="isCustomized" jdbcType="INTEGER"/>
		<result column="collect_state" property="collectState" jdbcType="INTEGER"/>
		<result column="small_type_att1" property="smallTypeAtt1" jdbcType="VARCHAR"/>
		<result column="is_main_product" property="isMainProduct" jdbcType="INTEGER"/>
		<result column="min_height" property="minHeight" jdbcType="VARCHAR"/>
		<result column="model_min_height" property="modelMinHeight" jdbcType="INTEGER"/>
		<result column="brand_id" property="brandId" jdbcType="INTEGER"/>
	</resultMap>
	
	<!-- getProductIdListV2 -->
	<select id="getProductIdListV2" parameterType="com.nork.product.model.PrepProductSearchInfo"
		resultMap="CategoryProductResultMap">
		select
		distinct(T.product_id) as product_id,
		bp.product_code as product_code,
		bp.brand_id as brand_id,
		rp.pic_path as pic_path,
		bp.product_type_value as product_type_value,
		sdbig.name as product_type_name,
		sdbig.valuekey as product_type_code,
		bp.product_small_type_value as product_small_type_value,
		sdsmall.name as product_small_type_name,
		sdsmall.valuekey as product_small_type_code,
		bp.product_length as product_length,
		bp.product_width as product_width,
		bp.product_height as product_height,
		rm.model_path as u3d_model_path,
		bp.split_textures_info as split_textures_info,
<!-- 		bp.new_windows_u3dModel_id, -->
		<!-- 单材质信息->start -->
		rt.id as res_texture_id,
		rtrp.pic_path as res_texture_path,
		rt.texture_attr_value as texture_attr_value,
		rt.file_width as texture_width,
		rt.file_height as texture_height,
		rt.lay_modes as lay_modes,
		<!-- 单材质信息->end -->
		T.is_custom as is_customized,
		case
		when upc.id is null then 0
		else 1 end as collect_state,
		sdsmall.att1 as small_type_att1,
		bp.min_height as min_height,
		case 
		when G.product_id is null then 0
		else 1 end as is_main_product,
		rm.min_height as model_min_height
		from 
		(
		select 
		ppsi.product_id as product_id,
		ppsi.is_custom as is_custom,
		case
		when ppsi.brand_id = #{brandIdWuPinPai} then 1
		else 0
		end as brand_id_sort,
		ppsi.small_type_value,
		<if test="hasOrderProps == true">
			pppiO.match_value,
		</if>
		ppsi.usage_amount,
		ppsi.price
		
		<if test="levelLimitCount>=0">
			 from ( select * from prep_product_search_info limit #{levelLimitCount}  ) ppsi
		</if>
		<if test="levelLimitCount &lt; 0">
			 from	prep_product_search_info ppsi
		</if>
		<!-- 为什么要分两张表(pppiF,pppiO),由于排序属性是根据所点击的产品,而过滤属性是要匹配点击产品对应的白膜 -->
		<if test="hasFilterProps == true">
			<!-- LEFT JOIN (
				SELECT
					pppi.id,
					pppi.match_product_id
				FROM
					prep_product_props_info pppi
				WHERE
					pppi.product_id = #{baimoProductId,jdbcType=INTEGER}
			) pppiT ON pppiT.match_product_id = ppsi.product_id -->
			LEFT JOIN prep_product_props_info pppiF on pppiF.product_id = #{baimoProductId,jdbcType=INTEGER}
			and pppiF.match_product_id = ppsi.product_id
		</if>
		<if test="hasOrderProps == true">
			LEFT JOIN prep_product_props_info pppiO on pppiO.product_id = #{productId,jdbcType=INTEGER}
			and pppiO.match_product_id = ppsi.product_id
		</if>
		where 1=1
		
		<!-- 上架状态->start -->
		<if test="productStatus != null">
			and ppsi.product_status = #{productStatus,jdbcType=INTEGER}
		</if>
		<!-- 上架状态->end -->
		
		<!-- 分类过滤->start -->
		<!-- ppsi.third_stage_code = "dim" -->
		<choose>
			<when test="firstStageCode != null and firstStageCode != ''">
				and ppsi.first_stage_code = #{firstStageCode,jdbcType=VARCHAR}
			</when>
			<otherwise>
				<choose>
					<when test="secondStageCode != null and secondStageCode != ''">
						and ppsi.second_stage_code = #{secondStageCode,jdbcType=VARCHAR}
					</when>
					<otherwise>
						<choose>
							<when test="thirdStageCode != null and thirdStageCode != ''">
								and ppsi.third_stage_code = #{thirdStageCode,jdbcType=VARCHAR}
							</when>
							<otherwise>
								<choose>
									<when test="fourthStageCode != null and fourthStageCode != ''">
										and ppsi.fourth_stage_code = #{fourthStageCode,jdbcType=VARCHAR}
									</when>
									<otherwise>
										<choose>
											<when test="fifthStageCode != null and fifthStageCode != ''">
												and ppsi.fifth_stage_code = #{fifthStageCode,jdbcType=VARCHAR}
											</when>
											<otherwise>
												and ppsi.category_long_code LIKE CONCAT('%',#{categoryLongCodeLike,jdbcType=VARCHAR},'%')
											</otherwise>
										</choose>
									</otherwise>
								</choose>
							</otherwise>
						</choose>
					</otherwise>
				</choose>
			</otherwise>
		</choose>
		<if test="bigTypeValue !=null">
			and ppsi.big_type_value = #{bigTypeValue,jdbcType=INTEGER}
		</if>
		<if test="excludeSmallTypeValue != null and excludeSmallTypeValue.size > 0">
			and ppsi.small_type_value not in
			<foreach collection="excludeSmallTypeValue" index="index" item="item" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<!-- <if test="smallTypeValue != null">
			and ppsi.small_type_value = #{smallTypeValue,jdbcType=INTEGER}
		</if> -->
		
		<!-- 修改为:小类list 2017.5.3 by huangsongbo ->start -->
		<!--<if test="smallTypeValueList != null and smallTypeValueList.size > 0">
			and ppsi.small_type_value in
			<foreach collection="smallTypeValueList" item="smallTypeValueListItem" open="(" close=")" separator=",">
				${smallTypeValueListItem}
			</foreach>
		</if>-->
		<!-- 修改为:小类list 2017.5.3 by huangsongbo ->end -->
		<!-- 修改为:小类list 2017.11.22 by xiaoxc ->start -->
		<choose>
			<when test="isProductInfoFilter == true">
				<if test="productInfoModelList != null and productInfoModelList.size > 0">
					and
					<foreach collection="productInfoModelList" item="productItem" open="(" separator="or" close=")">
						(ppsi.small_type_value = ${productItem.smallTypeValue}
						<if test="productItem.productLengthStart != null and productItem.productLengthStart > 0">
							and ppsi.product_length between ${productItem.productLengthStart} and ${productItem.productLengthEnd}
						</if>
						<if test="productItem.productHeight != null and productItem.productHeight > 0">
							and  ppsi.product_height = ${productItem.productHeight}
						</if>
						)
					</foreach>
				</if>
			</when>
			<otherwise>
				<if test="smallTypeValueList != null and smallTypeValueList.size > 0">
					and ppsi.small_type_value in
					<foreach collection="smallTypeValueList" item="smallTypeValueListItem" open="(" close=")" separator=",">
						${smallTypeValueListItem}
					</foreach>
				</if>
			</otherwise>
		</choose>
		<!-- 修改为:小类list 2017.11.22 by xiaoxc ->end -->
		<!-- 分类过滤->end -->
		
		<!-- 空间类型过滤->start -->
		<if test="houseTypeList != null and houseTypeList.size > 0">
			and (
			<foreach collection="houseTypeList" index="index" item="item">
				<choose>
					<when test="index== 0">
						concat("," , ppsi.house_type_value , ",") like
						concat("%," ,#{item,jdbcType=VARCHAR}, ",%")
					</when>
					<otherwise>
						or concat("," , ppsi.house_type_value , ",") like
						concat("%," ,#{item,jdbcType=VARCHAR}, ",%")
					</otherwise>
				</choose>
			</foreach>
			)
		</if>
		<!-- 空间类型过滤->end -->
		
		<!-- 型号/品牌名称过滤->start -->
		<if test="productModelOrBrandName != null and productModelOrBrandName != ''">
			and (ppsi.brand_name like concat("%" ,#{productModelOrBrandName,jdbcType=VARCHAR}, "%")
			or ppsi.product_model like concat("%" ,#{productModelOrBrandName,jdbcType=VARCHAR}, "%")
			or ppsi.product_code like concat("%" ,#{productModelOrBrandName,jdbcType=VARCHAR}, "%"))
		</if>
		<!-- 型号/品牌名称过滤->end -->
		
		<!-- 长宽高过滤->start -->
		<if test="productLength != null">
			and ppsi.product_length = #{productLength,jdbcType=INTEGER}
		</if>
		<if test="productWidth != null">
			and ppsi.product_width = #{productWidth,jdbcType=INTEGER}
		</if>
		<if test="productHeight != null">
			and ppsi.product_height = #{productHeight,jdbcType=INTEGER}
		</if>
		<if test="lessProductLength != null">
			and ppsi.product_length &lt;= #{lessProductLength,jdbcType=INTEGER}
		</if>
		<if test="lessProductWidth != null">
			and ppsi.product_width &lt;= #{lessProductWidth,jdbcType=INTEGER}
		</if>
		<!-- 长宽高过滤->end -->
		
		<!-- 定制过滤->start -->
		and (
			1 != 1
			<!-- 只搜素定制 -->
			<if test="isTianh == false">
				or (ppsi.is_custom = 0
				<!-- 天花按尺寸代码搜索 -->
				<if test="bigTypeValue == 1">
					<choose>
						<when test="measureCode != null and measureCode != ''">
							and ppsi.measure_code = #{measureCode,jdbcType=VARCHAR}
						</when>
						<otherwise>
							and  ppsi.id = -1
						</otherwise>
					</choose>
				</if>
				<!--背景墙过滤长高-->
				<if test="isBeijing == true">
					<if test="beijingHeight != null">
						<choose>
							<when test="beijingHeight == '30' or beijingHeight == '50'">
								and  (ppsi.product_height = #{beijingHeight,jdbcType=INTEGER})
							</when>
							<otherwise>
								and  (ppsi.product_height = #{beijingHeight,jdbcType=INTEGER} or (ppsi.product_height &lt; 230 and ppsi.product_height &gt; 50))
							</otherwise>
						</choose>
					</if>
					<if test="beijingLengthStart != null and beijingLengthEnd != null">
						and ppsi.product_length between #{beijingLengthStart,jdbcType=INTEGER} and #{beijingLengthEnd,jdbcType=INTEGER}
					</if>
				</if>
				<!--背景墙、窗帘、一字淋浴屏过滤长高-->
				<if test="isStretch == true and isProductInfoFilter == false">
					<if test="beijingHeight != null">
						and  ppsi.product_height = #{beijingHeight,jdbcType=INTEGER}
					</if>
					<if test="beijingLengthStart != null and beijingLengthEnd != null">
						and ppsi.product_length between #{beijingLengthStart,jdbcType=INTEGER} and #{beijingLengthEnd,jdbcType=INTEGER}
					</if>
				</if>
				<!--全铺长度为空不显示通用产品-->
				<if test="beijingLengthStart == 0">
					and ppsi.product_id = -1
				</if>
				)
			</if>
		
		<if test="baimoId != null">
			or 
			(ppsi.is_custom = 1 and 
			<!-- ppsi.baimo_id = #{baimoId,jdbcType=INTEGER}  -->
			<choose>
				<when test="baimoIdList != null and baimoIdList.size > 0">
					ppsi.baimo_id in
					<foreach collection="baimoIdList" index="index" item="item" open="(" separator="," close=")">
						#{item}
					</foreach>
				</when>
				<otherwise>ppsi.baimo_id = #{baimoId,jdbcType=INTEGER} </otherwise>
			</choose>
			and (ppsi.space_common_id = #{spaceCommonId,jdbcType=INTEGER} or
			ppsi.design_templet_id = #{designTempletId,jdbcType=INTEGER}))
		</if> 
		)
		<if test="hasFilterProps == true">
			AND pppiF.id IS NOT NULL
		</if>
		<!-- 定制过滤->end -->
		
		<!-- 授权码逻辑(品牌,大类,小类,产品idList) -->
		<if test="baseProductList !=  null and  baseProductList.size > 0  ">
			and
			<foreach collection="baseProductList" index="index" item="item" open="(" separator="or" close=")">
				<choose>
					<when test="item.productIdList!=null and item.productIdList.size>0">
						(ppsi.id in
						<foreach collection="item.productIdList" index="indexProductId"
							item="itemProductId" open="(" separator="," close=")">
							#{itemProductId}
						</foreach>
						)
					</when>
					<otherwise>
						<!-- 品牌&&大小类 -->
						<choose>
							<when test=						
							"
							(item.brandId == null or item.brandId == 0)
							and (item.productTypeValue != null or item.productTypeValue != '' )
							and (item.productSmallTypeValue != null or item.productSmallTypeValue != '') 
							">
							(1 != 1)
							</when>
							<otherwise>
								(<!-- 1=1 -->
									<if test="item.brandId != null and item.brandId != 0 ">
										<!-- and -->
										ppsi.brand_id=#{item.brandId}
									</if>
									<if test="item.productTypeValue != null and item.productTypeValue != '' ">
										and ppsi.big_type_value=#{item.productTypeValue}
									</if>
									<if test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
										and ppsi.small_type_value=#{item.productSmallTypeValue}
									</if>
								)
							</otherwise>
						</choose>
						<!-- 品牌||大小类 -->
						
						<!-- 20170425添加逻辑by huangsongbo ->start -->
						<!-- 比如授权码关联的东鹏公司是做墙面瓷砖的,则点击墙面搜索,瓷砖小类只显示东鹏的瓷砖+无品牌瓷砖,其他小类则显示全部 -->
						<if test="item.smallTypeValueListForShowAll != null and item.smallTypeValueListForShowAll.size > 0">
							or ppsi.small_type_value not in 
							<foreach collection="item.smallTypeValueListForShowAll" item="item2" close=")" open="(" separator=",">
								${item2}
							</foreach>
						</if> 
						<if test="isShowWu == true">
							<if test="brandIdWuPinPai != null">
								or ppsi.brand_id = #{brandIdWuPinPai}
							</if>
						</if>
						<!-- 20170425添加逻辑by huangsongbo ->end -->
						
					</otherwise>
				</choose>
			</foreach>
		</if>
		<!-- 授权码过滤逻辑(品牌,大类,小类,产品idList)->end -->
		
		<!-- 黑名单过滤 ->start -->
		<if test="prepProductSearchInfoListForBlackList != null and prepProductSearchInfoListForBlackList.size > 0">
			and
			<foreach collection="prepProductSearchInfoListForBlackList" item="prepProductSearchInfoListForBlackListItem" separator="and">
				!(ppsi.big_type_value = ${prepProductSearchInfoListForBlackListItem.bigTypeValue}
				and ppsi.small_type_value = ${prepProductSearchInfoListForBlackListItem.smallTypeValue})
			</foreach>
		</if>
		<!-- 黑名单过滤 ->end -->

		<!-- 天花布局过滤 -->
		<if test="productSmallpoxIdentify != null">
			and ppsi.product_smallpox_identify_str = #{productSmallpoxIdentify,jdbcType=VARCHAR}
		</if>
		<!-- 天花布局过滤 end -->
		<!-- 天花布局List过滤 -->
		<if test="identifyList != null and identifyList.size != 0">
			and ppsi.product_smallpox_identify_str in
			<foreach collection="identifyList" item="identifyListItem" open="(" close=")" separator=",">
				#{identifyListItem, jdbcType = VARCHAR}
			</foreach>
		</if>
		group by ppsi.product_id
		
		<!-- 排序定制(倒)->属性(未加入)(倒)->使用量(倒)->价格(升) ->start -->
		order by 
		<!-- 小类优先排序 ->start -->
		<if test="sortSmallTypeValueList != null and sortSmallTypeValueList.size > 0">
			case
			when ppsi.small_type_value in 
			<foreach collection="sortSmallTypeValueList" index="index"
							item="item" open="(" separator="," close=")">
				#{item}
			</foreach>
 			then ppsi.small_type_value 
			else 0 end desc,
		</if>
		<!-- 小类优先排序 ->end -->
		brand_id_sort,
		ppsi.is_custom desc,
		<if test="hasOrderProps == true">
			case
			when pppiO.match_value is null then 0
			else pppiO.match_value end desc,
		</if>
		ppsi.usage_amount desc,ppsi.price asc,ppsi.product_id desc
		<!-- 排序定制(倒)->属性(未加入)(倒)->使用量(倒)->价格(升) ->end -->
		
		<!-- 分页 -->
		limit #{start} , #{limit}
		) T
		left join base_product bp on T.product_id = bp.id
		left join res_pic rp on bp.pic_id = rp.id
		left join sys_dictionary sdbig on sdbig.type = "productType" and sdbig.value = bp.product_type_value
		left join sys_dictionary sdsmall on sdsmall.type = sdbig.valuekey and sdsmall.value = bp.product_small_type_value
		left join base_product baimobp on baimobp.id = #{baimoId,jdbcType=INTEGER}
		left join res_texture rt on rt.id = bp.material_pic_ids
		left join res_pic rtrp on rtrp.id = rt.pic_id
		left join user_product_collect upc on upc.user_id = #{userId,jdbcType=INTEGER} and upc.product_id = T.product_id
		left join res_model rm on rm.id = 
		case
		when bp.windows_u3dmodel_id is null or bp.windows_u3dmodel_id &lt;= 0 then baimobp.windows_u3dmodel_id
		else bp.windows_u3dmodel_id end
		LEFT JOIN (SELECT gpd.product_id FROM group_product_details gpd
		LEFT JOIN group_product gp ON gp.id = gpd.group_id WHERE 
		<!-- gp.design_templet_id = #{designTempletId,jdbcType=INTEGER} AND  -->
		gpd.is_main = 1) G
		ON G.product_id = bp.id
		<!-- left join user_product_collect后导致排序错乱,所以加如下代码再次排序 create by huangsongbo 2017.4.27 -->
		<!-- order by T.brand_id_sort -->
		
		<!-- 排序定制(倒)->属性(未加入)(倒)->使用量(倒)->价格(升) ->start -->
		order by 
		<!-- 小类优先排序 ->start -->
		<if test="sortSmallTypeValueList != null and sortSmallTypeValueList.size > 0">
			case
			when T.small_type_value in 
			<foreach collection="sortSmallTypeValueList" index="index"
							item="item" open="(" separator="," close=")">
				#{item}
			</foreach>
 			then T.small_type_value 
			else 0 end desc,
		</if>
		<!-- 小类优先排序 ->end -->
		T.brand_id_sort,
		T.is_custom desc,
		<if test="hasOrderProps == true">
			case
			when T.match_value is null then 0
			else T.match_value end desc,
		</if>
		T.usage_amount desc,T.price asc,T.product_id desc
		<!-- 排序定制(倒)->属性(未加入)(倒)->使用量(倒)->价格(升) ->end -->
		
	</select>
	
	<!-- getCount -->
	<select id="getCount" resultType="int"
		parameterType="com.nork.product.model.PrepProductSearchInfo">
	select 
		count(distinct(ppsi.product_id))
		<if test="levelLimitCount>=0">
			 from ( select * from prep_product_search_info limit #{levelLimitCount}  ) ppsi
		</if>
		<if test="levelLimitCount &lt; 0">
			 from	prep_product_search_info ppsi
		</if>
		
		<if test="hasFilterProps == true">
			LEFT JOIN prep_product_props_info pppi on pppi.product_id = #{baimoProductId,jdbcType=INTEGER}
			and pppi.match_product_id = ppsi.product_id
		</if>
		where 1=1
		
		<!-- 上架状态->start -->
		<if test="productStatus != null">
			and ppsi.product_status = #{productStatus,jdbcType=INTEGER}
		</if>
		<!-- 上架状态->end -->
		
		<!-- 分类过滤->start -->
		<!-- ppsi.third_stage_code = "dim" -->
		<choose>
			<when test="firstStageCode != null and firstStageCode != ''">
				and ppsi.first_stage_code = #{firstStageCode,jdbcType=VARCHAR}
			</when>
			<otherwise>
				<choose>
					<when test="secondStageCode != null and secondStageCode != ''">
						and ppsi.second_stage_code = #{secondStageCode,jdbcType=VARCHAR}
					</when>
					<otherwise>
						<choose>
							<when test="thirdStageCode != null and thirdStageCode != ''">
								and ppsi.third_stage_code = #{thirdStageCode,jdbcType=VARCHAR}
							</when>
							<otherwise>
								<choose>
									<when test="fourthStageCode != null and fourthStageCode != ''">
										and ppsi.fourth_stage_code = #{fourthStageCode,jdbcType=VARCHAR}
									</when>
									<otherwise>
										<choose>
											<when test="fifthStageCode != null and fifthStageCode != ''">
												and ppsi.fifth_stage_code = #{fifthStageCode,jdbcType=VARCHAR}
											</when>
											<otherwise>
												and ppsi.category_long_code LIKE CONCAT('%',#{categoryLongCodeLike,jdbcType=VARCHAR},'%')
											</otherwise>
										</choose>
									</otherwise>
								</choose>
							</otherwise>
						</choose>
					</otherwise>
				</choose>
			</otherwise>
		</choose>
		<if test="bigTypeValue !=null">
			and ppsi.big_type_value = #{bigTypeValue,jdbcType=INTEGER}
		</if>
		<if test="excludeSmallTypeValue != null and excludeSmallTypeValue.size > 0">
			and ppsi.small_type_value not in
			<foreach collection="excludeSmallTypeValue" index="index" item="item" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<!-- <if test="smallTypeValue != null">
			and ppsi.small_type_value = #{smallTypeValue,jdbcType=INTEGER}
		</if> -->
		
		<!-- 修改为:小类list 2017.5.3 by huangsongbo ->start -->
		<!--<if test="smallTypeValueList != null and smallTypeValueList.size > 0">
			and ppsi.small_type_value in
			<foreach collection="smallTypeValueList" item="smallTypeValueListItem" open="(" close=")" separator=",">
				${smallTypeValueListItem}
			</foreach>
		</if>-->
		<!-- 修改为:小类list 2017.5.3 by huangsongbo ->end -->

		<!-- 修改为:小类list 2017.11.22 by xiaoxc ->start -->
		<choose>
			<when test="isProductInfoFilter == true">
				<if test="productInfoModelList != null and productInfoModelList.size > 0">
					and
					<foreach collection="productInfoModelList" item="productItem" open="(" separator="or" close=")">
						(ppsi.small_type_value = ${productItem.smallTypeValue}
						<if test="productItem.productLengthStart != null and productItem.productLengthStart > 0">
							and ppsi.product_length between ${productItem.productLengthStart} and ${productItem.productLengthEnd}
						</if>
						<if test="productItem.productHeight != null and productItem.productHeight > 0">
							and  ppsi.product_height = ${productItem.productHeight}
						</if>
						)
					</foreach>
				</if>
			</when>
			<otherwise>
				<if test="smallTypeValueList != null and smallTypeValueList.size > 0">
					and ppsi.small_type_value in
					<foreach collection="smallTypeValueList" item="smallTypeValueListItem" open="(" close=")" separator=",">
						${smallTypeValueListItem}
					</foreach>
				</if>
			</otherwise>
		</choose>
		<!-- 修改为:小类list 2017.11.22 by xiaoxc ->end -->
		<!-- 分类过滤->end -->
		
		<!-- 长宽高过滤->start -->
		<if test="productLength != null">
			and ppsi.product_length = #{productLength,jdbcType=INTEGER}
		</if>
		<if test="productWidth != null">
			and ppsi.product_width = #{productWidth,jdbcType=INTEGER}
		</if>
		<if test="productHeight != null">
			and ppsi.product_height = #{productHeight,jdbcType=INTEGER}
		</if>
		<if test="lessProductLength != null">
			and ppsi.product_length &lt;= #{lessProductLength,jdbcType=INTEGER}
		</if>
		<if test="lessProductWidth != null">
			and ppsi.product_width &lt;= #{lessProductWidth,jdbcType=INTEGER}
		</if>
		<!-- 长宽高过滤->end -->
		
		<!-- 空间类型过滤->start -->
		<if test="houseTypeList != null and houseTypeList.size > 0">
			and (
			<foreach collection="houseTypeList" index="index" item="item">
				<choose>
					<when test="index== 0">
						concat("," , ppsi.house_type_value , ",") like
						concat("%," ,#{item,jdbcType=VARCHAR}, ",%")
					</when>
					<otherwise>
						or concat("," , ppsi.house_type_value , ",") like
						concat("%," ,#{item,jdbcType=VARCHAR}, ",%")
					</otherwise>
				</choose>
			</foreach>
			)
		</if>
		<!-- 空间类型过滤->end -->
		
		<!-- 型号/品牌名称过滤->start -->
		<if test="productModelOrBrandName != null and productModelOrBrandName != ''">
			and (ppsi.brand_name like concat("%" ,#{productModelOrBrandName,jdbcType=VARCHAR}, "%")
			or ppsi.product_model like concat("%" ,#{productModelOrBrandName,jdbcType=VARCHAR}, "%")
			or ppsi.product_code like concat("%" ,#{productModelOrBrandName,jdbcType=VARCHAR}, "%"))
		</if>
		<!-- 型号/品牌名称过滤->end -->
		
		<!-- 定制过滤->start -->
		and (
		
			1 != 1 
			<!-- 只搜素定制 -->
			<if test="isTianh == false">
				or (ppsi.is_custom = 0
				<!-- 天花按尺寸代码搜索 -->
				<if test="bigTypeValue == 1">
					<choose>
						<when test="measureCode != null and measureCode != ''">
							and ppsi.measure_code = #{measureCode,jdbcType=VARCHAR}
						</when>
						<otherwise>
							and  ppsi.id = -1
						</otherwise>
					</choose>
				</if>
				<if test="isBeijing == true">
					<if test="beijingHeight != null">
						<choose>
							<when test="beijingHeight == '30' or beijingHeight == '50'">
								and  (ppsi.product_height = #{beijingHeight,jdbcType=INTEGER})
							</when>
							<otherwise>
								and  (ppsi.product_height = #{beijingHeight,jdbcType=INTEGER} or (ppsi.product_height &lt; 230 and ppsi.product_height &gt; 50))
							</otherwise>
						</choose>
					</if>
					<if test="beijingLengthStart != null and beijingLengthEnd != null">
						and ppsi.product_length between #{beijingLengthStart,jdbcType=INTEGER} and #{beijingLengthEnd,jdbcType=INTEGER}
					</if>
				</if>
				<!--伸缩分类过滤-->
				<if test="isStretch == true and isProductInfoFilter == false">
					<if test="beijingHeight != null">
						and  ppsi.product_height = #{beijingHeight,jdbcType=INTEGER}
					</if>
					<if test="beijingLengthStart != null and beijingLengthEnd != null">
						and ppsi.product_length between #{beijingLengthStart,jdbcType=INTEGER} and #{beijingLengthEnd,jdbcType=INTEGER}
					</if>
				</if>
				<!--全铺长度为空不显示通用产品-->
				<if test="beijingLengthStart == 0">
					and ppsi.product_id = -1
				</if>
				)
			</if>
			
		<if test="baimoId != null">
			or 
			(ppsi.is_custom = 1 and 
			<choose>
				<when test="baimoIdList != null and baimoIdList.size > 0">
					ppsi.baimo_id in
					<foreach collection="baimoIdList" index="index" item="item" open="(" separator="," close=")">
						#{item}
					</foreach>
				</when>
				<otherwise>ppsi.baimo_id = #{baimoId,jdbcType=INTEGER} </otherwise>
			</choose>
			and (ppsi.space_common_id = #{spaceCommonId,jdbcType=INTEGER} or
			ppsi.design_templet_id = #{designTempletId,jdbcType=INTEGER}))
		</if>
		)
		<if test="hasFilterProps == true">
			AND pppi.id IS NOT NULL
		</if>
		
		<!-- 授权码逻辑(品牌,大类,小类,产品idList) -->
		<if test="baseProductList !=  null and  baseProductList.size > 0  ">
			and
			<foreach collection="baseProductList" index="index" item="item" open="(" separator="or" close=")">
				<choose>
					<when test="item.productIdList!=null and item.productIdList.size>0">
						(ppsi.id in
						<foreach collection="item.productIdList" index="indexProductId"
							item="itemProductId" open="(" separator="," close=")">
							#{itemProductId}
						</foreach>
						)
					</when>
					<otherwise>
						<!-- 品牌&&大小类 -->
						<choose>
							<when test=						
							"
							(item.brandId == null or item.brandId == 0)
							and (item.productTypeValue != null or item.productTypeValue != '' )
							and (item.productSmallTypeValue != null or item.productSmallTypeValue != '') 
							">
							(1 != 1)
							</when>
							<otherwise>
								(<!-- 1=1 -->
									<if test="item.brandId != null and item.brandId != 0 ">
										<!-- and -->
										ppsi.brand_id=#{item.brandId}
									</if>
									<if test="item.productTypeValue != null and item.productTypeValue != '' ">
										and ppsi.big_type_value=#{item.productTypeValue}
									</if>
									<if test="item.productSmallTypeValue != null and item.productSmallTypeValue != '' ">
										and ppsi.small_type_value=#{item.productSmallTypeValue}
									</if>
								)
							</otherwise>
						</choose>
						
						<!-- 20170425添加逻辑by huangsongbo ->start -->
						<!-- 比如授权码关联的东鹏公司是做墙面瓷砖的,则点击墙面搜索,瓷砖小类只显示东鹏的瓷砖+无品牌瓷砖,其他小类则显示全部 -->
						<if test="item.smallTypeValueListForShowAll != null and item.smallTypeValueListForShowAll.size > 0">
							or ppsi.small_type_value not in 
							<foreach collection="item.smallTypeValueListForShowAll" item="item2" close=")" open="(" separator=",">
								${item2}
							</foreach>
						</if>
						<if test="isShowWu == true">
							<if test="brandIdWuPinPai != null">
								or ppsi.brand_id = #{brandIdWuPinPai}
							</if>
						</if>
						<!-- 20170425添加逻辑by huangsongbo ->end -->
						
						<!-- 品牌||大小类 -->
					</otherwise>
				</choose>
			</foreach>
		</if>
		<!-- 授权码过滤逻辑(品牌,大类,小类,产品idList)->end -->
		
		<!-- 黑名单过滤 ->start -->
		<if test="prepProductSearchInfoListForBlackList != null and prepProductSearchInfoListForBlackList.size > 0">
			and
			<foreach collection="prepProductSearchInfoListForBlackList" item="prepProductSearchInfoListForBlackListItem" separator="and">
				!(ppsi.big_type_value = ${prepProductSearchInfoListForBlackListItem.bigTypeValue}
				and ppsi.small_type_value = ${prepProductSearchInfoListForBlackListItem.smallTypeValue})
			</foreach>
		</if>
		<!-- 黑名单过滤 ->end -->

		<!-- 天花布局过滤 -->
		<if test="productSmallpoxIdentify != null">
			and ppsi.product_smallpox_identify_str = #{productSmallpoxIdentify,jdbcType=VARCHAR}
		</if>
		<!-- 天花布局List过滤 -->
		<if test="identifyList != null and identifyList.size != 0">
			and ppsi.product_smallpox_identify_str in
			<foreach collection="identifyList" item="identifyListItem" open="(" close=")" separator=",">
				#{identifyListItem, jdbcType = VARCHAR}
			</foreach>
		</if>
	</select>
	
	<!-- getPPSIByProductIdList -->
	<select id="getPPSIByProductIdList" resultMap="AllResultMap">
		select
		bp.id as product_id,
		pc.long_code as category_long_code,
		pc.first_stage_code as first_stage_code,
		pc.second_stage_code as second_stage_code,
		pc.third_stage_code as third_stage_code,
		pc.fourth_stage_code as fourth_stage_code,
		pc.fifth_stage_code as fifth_stage_code,
		bp.product_type_value as big_type_value,
		bp.product_small_type_value as small_type_value,
		bp.brand_id as brand_id,
		bb.brand_name as brand_name,
		bp.product_model_number as product_model,
		bp.house_type_values as house_type_value,
		case
		when bp.bm_ids is null or bp.bm_ids = 0 then 0
		else 1 end as is_custom,
		bp.bm_ids as baimo_id,
		bp.spaceComon_id as space_common_id,
		bp.designTemplet_id as design_templet_id,
		case
		when puc.count is null then 0
		else puc.count end as usage_amount,
		bp.sale_price as price,
		bp.product_code,
		bp.product_length,
		bp.product_width,
		bp.product_height,
		bp.putaway_state as product_status,
		bp.style_id,
		bp.measure_code,
		bp.product_smallpox_identify_str
		from 
		(select 
		bp2.id,
		bp2.product_type_value,
		bp2.product_small_type_value,
		bp2.brand_id,
		bp2.house_type_values,
		bp2.bm_ids,
		bp2.spaceComon_id,
		bp2.designTemplet_id,
		bp2.sale_price,
		bp2.product_code,
		bp2.product_length,
		bp2.product_width,
		bp2.product_height,
		bp2.product_model_number,
		3 as putaway_state,
		bp2.style_id,
		bp2.measure_code,
		bp2.product_smallpox_identify_str
		from base_product bp2
		where 
		<foreach collection="productStatusList" index="index" item="item" open="(" separator="or" close=")">
			bp2.putaway_state = #{item}
		</foreach>
		and bp2.is_deleted = 0 
		and (
			bp2.parent_id is null or bp2.parent_id = 0
			or bp2.parent_id = bp2.id
		)
		and bp2.product_code not like "baimo_%"
		<if test="productIdList != null and productIdList.size > 0">
			and bp2.id in
			<foreach collection="productIdList" index="index" item="item" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		limit #{start},#{limit}
		) as bp
		left join product_category_rel pcr on bp.id = pcr.product_id
		left join pro_category pc on pcr.category_id = pc.id
		left join base_brand bb on bb.id = bp.brand_id
		left join 
		(select puc.product_id,sum(puc.count) as count from product_usage_count puc group by puc.product_id
		) puc on puc.product_id = bp.id
	</select>
	
	<!-- deleteByProductIdList -->
	<delete id="deleteByProductIdList">
		delete from prep_product_search_info
		where product_id in
		<foreach collection="productIdList" index="index" item="item" open="(" separator="," close=")">
			#{item}
		</foreach>
	</delete>
	
	<insert id="batchSave"  parameterType="java.util.List">
		<if test="list != null and list.size > 0">
			insert into prep_product_search_info(product_id,category_long_code,product_code,first_stage_code,second_stage_code,
			third_stage_code,fourth_stage_code,fifth_stage_code,big_type_value,small_type_value,brand_id,house_type_value,
			is_custom,baimo_id,space_common_id,design_templet_id,usage_amount,price,product_length,product_width,product_height,
			brand_name,product_model,product_status,style_id,measure_code,product_smallpox_identify_str) values
			<foreach collection="list" item="item" index="index" separator="," >  
				(#{item.productId,jdbcType=INTEGER},#{item.categoryLongCode,jdbcType=VARCHAR},
				#{item.productCode,jdbcType=VARCHAR},
				#{item.firstStageCode,jdbcType=VARCHAR},#{item.secondStageCode,jdbcType=VARCHAR},
				#{item.thirdStageCode,jdbcType=VARCHAR},#{item.fourthStageCode,jdbcType=VARCHAR},
				#{item.fifthStageCode,jdbcType=VARCHAR},#{item.bigTypeValue,jdbcType=INTEGER},
				#{item.smallTypeValue,jdbcType=INTEGER},#{item.brandId,jdbcType=INTEGER},
				#{item.houseTypeValue,jdbcType=VARCHAR},#{item.isCustom,jdbcType=INTEGER},
				#{item.baimoId,jdbcType=INTEGER},#{item.spaceCommonId,jdbcType=INTEGER},
				#{item.designTempletId,jdbcType=INTEGER},#{item.usageAmount,jdbcType=INTEGER},
				#{item.price,jdbcType=DOUBLE},#{item.productLength,jdbcType=INTEGER},
				#{item.productWidth,jdbcType=INTEGER},#{item.productHeight,jdbcType=INTEGER},
				#{item.brandName,jdbcType=VARCHAR},#{item.productModel,jdbcType=VARCHAR},
				#{item.productStatus,jdbcType=INTEGER},#{item.styleId,jdbcType=INTEGER},
				#{item.measureCode,jdbcType=VARCHAR},#{item.productSmallpoxIdentify,jdbcType=VARCHAR}
				)
			</foreach>
		</if>
	</insert>
	
	<!-- deleteByProductStatusList -->
	<delete id="deleteByProductStatusList">
		delete from prep_product_search_info  where product_id in 
		(
		select id from base_product where putaway_state in
		<foreach collection="productStatusList" open="(" close=")" item="item" separator=",">
			${item}
		</foreach>
		)
	</delete>
	
</mapper>
