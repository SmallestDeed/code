package com.nork.design.service.impl;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.nork.base.excetion.BizException;
import com.nork.common.cache.utils.JedisUtils;
import com.nork.common.exception.GeneratePanoramaException;
import com.nork.common.model.LoginUser;
import com.nork.common.model.ResponseEnvelope;
import com.nork.common.properties.ResProperties;
import com.nork.common.util.Constants;
import com.nork.common.util.StringUtils;
import com.nork.common.util.Utils;
import com.nork.design.common.DesignPlanConstants;
import com.nork.design.dao.DesignPlanAutoRenderMapper;
import com.nork.design.dao.DesignPlanMapper;
import com.nork.design.dao.DesignPlanRecommendedMapperV2;
import com.nork.design.dao.DesignPlanRenderSceneMapper;
import com.nork.design.dao.DesignTempletMapper;
import com.nork.design.model.AutoRenderTask;
import com.nork.design.model.AutoRenderTaskState;
import com.nork.design.model.DesignPlan;
import com.nork.design.model.DesignPlanProduct;
import com.nork.design.model.DesignPlanProductRenderScene;
import com.nork.design.model.DesignPlanProductResult;
import com.nork.design.model.DesignPlanRecommended;
import com.nork.design.model.DesignPlanRecommendedProduct;
import com.nork.design.model.DesignPlanRenderScene;
import com.nork.design.model.DesignTemplet;
import com.nork.design.model.ResRenderPicQO;
import com.nork.design.model.ThumbData;
import com.nork.design.service.DesignPlanAutoRenderService;
import com.nork.design.service.DesignPlanProductRenderSceneService;
import com.nork.design.service.DesignPlanProductService;
import com.nork.design.service.DesignPlanRecommendedProductServiceV2;
import com.nork.design.service.DesignPlanRecommendedServiceV2;
import com.nork.home.dao.SpaceCommonMapper;
import com.nork.home.model.BaseHouse;
import com.nork.home.model.SpaceCommon;
import com.nork.mobile.dao.MobileRenderRecordMapper;
import com.nork.mobile.model.ProductGroupReplaceTaskDetail;
import com.nork.mobile.model.ProductReplaceTaskDetail;
import com.nork.pay.wexin.common.Util;
import com.nork.product.model.BaseProduct;
import com.nork.product.model.SplitTextureInfoDTO;
import com.nork.product.service.BaseProductService;
import com.nork.product.service.CommonAppSearchService;
import com.nork.render.model.RenderTypeCode;
import com.nork.system.common.SysUserMessageConstants;
import com.nork.system.dao.ResRenderPicMapper;
import com.nork.system.model.ResRenderPic;
import com.nork.system.model.SysUser;
import com.nork.system.model.SysUserMessage;
import com.nork.system.service.ResRenderPicService;
import com.nork.system.service.SysUserMessageService;
import com.nork.system.service.SysUserService;
import net.sf.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

@Service("designPlanAutoRenderService")
public class DesignPlanAutoRenderServiceImpl implements DesignPlanAutoRenderService {
	private final static Gson GSON = new Gson();
    private final static Logger logger = LoggerFactory.getLogger(DesignPlanAutoRenderServiceImpl.class);
	public static final String REDIS_TASK_LIST = "taskList"; 
	public static final String REDIS_TASK_REPLACE_LIST = "taskReplaceList"; 
	public static final String REDIS_RENDER_TASK_STICK = "renderTaskStick";
	public static final int AUTO_RENDER = 0; 
	public static final int USER_RENDER = 1;
	public static final int MULTI_MODEL_PRODUCT_BATCH_TYPE = 2;
	@Autowired
	private DesignPlanAutoRenderMapper designPlanAutoRenderMapper;
	@Autowired
	private SpaceCommonMapper spaceCommonMapper;
	@Autowired
	private DesignTempletMapper designTempletMapper;
	@Autowired
	private DesignPlanMapper designPlanMapper;
	@Autowired
	private DesignPlanRenderSceneMapper designPlanRenderSceneMapper;
	@Autowired
	private ResRenderPicMapper resRenderPicMapper;
	@Autowired
	private ResRenderPicService resRenderPicService;
	@Autowired
	private DesignPlanRecommendedMapperV2 designPlanRecommendedMapperV2;
	@Autowired
	private DesignPlanRecommendedServiceV2 designPlanRecommendedServiceV2;
	@Autowired
	private SysUserService sysUserService;
    @Autowired
    private DesignPlanProductService designPlanProductService;
    @Autowired
    private BaseProductService baseProductService;
    @Autowired
    private MobileRenderRecordMapper mobileRenderRecordMapper;
    @Autowired
    private SysUserMessageService sysUserMessageService;
    @Autowired
    private DesignPlanRecommendedProductServiceV2 designPlanRecommendedProductServiceV2;
    @Autowired
    private DesignPlanProductRenderSceneService designPlanProductRenderSceneService;
//    @Autowired
//	private CommonAppSearchService commonAppSearchService;
	private static final Gson gson = new Gson();
	@Value("${app.productSearch.url}")
	private String productSearchUrl;


	@Override
	public ResponseEnvelope<AutoRenderTask> getAutoRenderTaskList(Integer maxSize, String msgId,LoginUser loginUser) {
		List<AutoRenderTask> taskList = getRenderTasks(maxSize,loginUser);
		ResponseEnvelope<AutoRenderTask> result = new ResponseEnvelope<AutoRenderTask>(true, msgId, maxSize, taskList);
		return result;
	}
	@Override
	public ResponseEnvelope<AutoRenderTask> getTaskList(Integer maxSize, String msgId,LoginUser loginUser) {
		List<AutoRenderTask> taskList = findReplaceProductTaskList(maxSize,loginUser);
		ResponseEnvelope<AutoRenderTask> result = new ResponseEnvelope<AutoRenderTask>(true, msgId, maxSize, taskList);
		return result;
	}
	
	@Override
	public List<AutoRenderTask> getTaskList(AutoRenderTask autoRenderTask){
		return designPlanAutoRenderMapper.getTaskList(autoRenderTask);
	}
	
	/**
     * 更新失败任务状态
     */
    @Override
    public ResponseEnvelope<AutoRenderTaskState> updateAutoRenderTaskState(AutoRenderTaskState renderTask, String msgId,String token,String platformCode) {
        String msg = "";
        // sysSaveState(renderTask, loginUser);
        ResponseEnvelope envelope = (ResponseEnvelope) this.updateTaskState(renderTask, token,platformCode);
        return envelope;
    }
	/**
	 * 通过方案mapping样板房
	 */
	@Override
	public List<AutoRenderTask> mappingForDesignTemplateByDesignPlan(DesignPlanRecommended designPlanRecommended,LoginUser loginUser) {
		List<DesignTemplet> designTemplets = null;
		//designPlan.setId(20532);
		Integer spaceCommonId = designPlanRecommended.getSpaceCommonId();
		//spaceCommonId = 1282;
		SpaceCommon spaceInfo = spaceCommonMapper.selectByPrimaryKey(spaceCommonId);
		String spaceCode = null;
		if (spaceInfo != null) {
			String spaceAreas = spaceInfo.getSpaceAreas();
			Integer spaceFunctionId = spaceInfo.getSpaceFunctionId();
			spaceCode = spaceInfo.getSpaceCode();
			//designTemplets = designTempletMapper.geTempletsBySpaceInfo("5", 5,5);
			Integer createdOfTemplateId = null;
//			if(designPlanRecommended.getDesignSourceType()!=null && 
//					designPlanRecommended.getDesignSourceType().intValue() == 7){
//				createdOfTemplateId = designPlanRecommended.getDesignId();
//			}

			//如果适用面积不为空，则查适用该面积的样板房，没有默认当前空间面积
			if (StringUtils.isNotEmpty(designPlanRecommended.getApplySpaceAreas())) {
				designTemplets = designTempletMapper.getTempletsBySpaceAreasInfo(designPlanRecommended.getApplySpaceAreas(), spaceFunctionId, createdOfTemplateId);
			}else{
				designTemplets = designTempletMapper.geTempletsBySpaceInfo(spaceAreas, spaceFunctionId, createdOfTemplateId);
			}
		}

		List<AutoRenderTask> tasks = convertTaskList(designPlanRecommended.getId(), designTemplets,spaceCode,loginUser);
		List<AutoRenderTaskState> taskStateList = designPlanAutoRenderMapper.getTaskStateListByDesignPlanId(designPlanRecommended.getId());
		List<AutoRenderTask> rendingTasks = designPlanAutoRenderMapper.getRenderTaskListByPlanId(designPlanRecommended.getId());
		List<AutoRenderTask> toDelList = new ArrayList<AutoRenderTask>();
		if (tasks != null && tasks.size() > 0) {
			for (AutoRenderTask task : tasks) {
				for (AutoRenderTaskState taskState : taskStateList) {
					if (task.getPlanId().intValue() == taskState.getPlanId().intValue()
							&& task.getTemplateId().intValue() == taskState.getTemplateId().intValue()) {
						toDelList.add(task);
					}
				}
				for (AutoRenderTask rendingTask : rendingTasks) {
					if (task.getPlanId().intValue() == rendingTask.getPlanId().intValue()
							&& task.getTemplateId().intValue() == rendingTask.getTemplateId().intValue()) {
						toDelList.add(task);
					}
				}
			}
			tasks.removeAll(toDelList);
		}
		return tasks;
	}
	private List<AutoRenderTask> convertTaskList(Integer planId, List<DesignTemplet> templets,String spaceCode,LoginUser loginUser) {
		List<AutoRenderTask> tasks = new ArrayList<AutoRenderTask>();
		for (DesignTemplet template : templets) {
			AutoRenderTask task = new AutoRenderTask();
			task.setPlanId(planId);
			task.setTemplateId(template.getId());
			task.setSpaceCode(spaceCode);
			task.setTaskType(0);
			tasks.add(task);
		}
		return tasks;
	}
	
	/***
	 * 通过样板房mapping方案
	 */
	@Override
	public List<AutoRenderTask> mappingForDesignPlanByDesignTemplate(DesignTemplet DesignTemplet) {
		//DesignTemplet.setId(1177);
		Integer spaceCommonId = DesignTemplet.getSpaceCommonId();
		//spaceCommonId = 1282;
		SpaceCommon spaceInfo = spaceCommonMapper.selectByPrimaryKey(spaceCommonId);
		List<DesignPlan> designPlans = null;
		String spaceCode = null;
		if (spaceInfo != null) {
			spaceCode = spaceInfo.getSpaceCode();
			String spaceAreas = spaceInfo.getSpaceAreas();
			Integer spaceFunctionId = spaceInfo.getSpaceFunctionId();
			//designPlans = designPlanMapper.getPlansBySpaceInfo("5", 5);
			designPlans = designPlanMapper.getPlansBySpaceInfo(spaceAreas, spaceFunctionId);
		}
		List<AutoRenderTask> tasks = convertTaskLists(DesignTemplet.getId(), designPlans,spaceCode);
		List<AutoRenderTaskState> taskStateList = designPlanAutoRenderMapper.getTaskStateListByTemplateId(DesignTemplet.getId());
		List<AutoRenderTask> rendingTasks = designPlanAutoRenderMapper.getRenderTaskListBytemplateId(DesignTemplet.getId());
		List<AutoRenderTask> toDelList = new ArrayList<AutoRenderTask>();
		if (tasks != null && tasks.size() > 0) {
			for (AutoRenderTask task : tasks) {
				for (AutoRenderTaskState taskState : taskStateList) {
					if (task.getPlanId().intValue() == taskState.getPlanId().intValue()
							&& task.getTemplateId().intValue() == taskState.getTemplateId().intValue()) {
						toDelList.add(task);
					}
				}
				for (AutoRenderTask rendingTask : rendingTasks) {
					if (task.getPlanId().intValue() == rendingTask.getPlanId().intValue()
							&& task.getTemplateId().intValue() == rendingTask.getTemplateId().intValue()) {
						toDelList.add(task);
					}
				}
			}
			tasks.removeAll(toDelList);
		}
		return tasks;
	}
	
	
	private List<AutoRenderTask> convertTaskLists(Integer templateId, List<DesignPlan> paln,String spaceCode) {
		List<AutoRenderTask> tasks = new ArrayList<AutoRenderTask>();
		for (DesignPlan designPlan : paln) {
			AutoRenderTask task = new AutoRenderTask();
			task.setPlanId(designPlan.getId());
			task.setTemplateId(templateId);
			task.setSpaceCode(spaceCode);
			tasks.add(task);
		}
		return tasks;
	}
	
	
	@Override
	public void addTaskStateToDB(AutoRenderTaskState taskState) {
		designPlanAutoRenderMapper.addTaskStateToDB(taskState);

	}

	@Override
	public void addTaskStateToCache(AutoRenderTaskState taskState) {
		// TODO Auto-generated method stub

	}

	@Override
	public void deleteRenderTaskByTaskId(Integer taskId) {
		designPlanAutoRenderMapper.deleteRenderTaskByTaskId(taskId);
		logger.info("删除渲染任务 taskId" + taskId);

	}
	/**
     * 更新失败任务
     */
    @Override
    public Object updateTaskState(AutoRenderTaskState autoRenderTaskState, String token,String platformCode) {
        logger.error("更新状态表方案ID" + autoRenderTaskState.getPlanId() + "样板房ID" + autoRenderTaskState.getTemplateId());
        logger.error("更新状态表任务ID" + autoRenderTaskState.getTaskId());
        Integer taskId = autoRenderTaskState.getTaskId();
        AutoRenderTask RenderTask = designPlanAutoRenderMapper.getRenderTaskById(taskId);
        autoRenderTaskState.setPlatformId(RenderTask.getPlatformId());
        autoRenderTaskState.setState(DesignPlanConstants.TASKSTATE.FAILUE.getValue());
        if ("1".equals(RenderTask.getRenderTypesStr())) {
            autoRenderTaskState.setRenderPic(DesignPlanConstants.RENDER_FAIL);
        } else if ("2".equals(RenderTask.getRenderTypesStr())) {
            autoRenderTaskState.setRender720(DesignPlanConstants.RENDER_FAIL);
        } else if ("3".equals(RenderTask.getRenderTypesStr())) {
            autoRenderTaskState.setRenderN720(DesignPlanConstants.RENDER_FAIL);
        } else if ("4".equals(RenderTask.getRenderTypesStr())) {
            autoRenderTaskState.setRenderVideo(DesignPlanConstants.RENDER_FAIL);
        }
        autoRenderTaskState.setState(0);
        AutoRenderTaskState taskState = designPlanAutoRenderMapper.getStateByTaskId(taskId);
        long startTime = taskState.getGmtCreate().getTime();
        long endTime = System.currentTimeMillis();
        long spendTimeLong = endTime - startTime;
        int secondTotal = (int) (spendTimeLong / 1000);
        int min = secondTotal / 60;
        int second = secondTotal % 60;
        autoRenderTaskState.setRenderTimeConsuming(min + "分" + second + "秒");
        Integer result = designPlanAutoRenderMapper.updateTaskStateByTaskId(autoRenderTaskState);
        logger.error("更新数据库" + result + "条失败记录....");

        // 生成一条渲染失败的消息记录--start
        SysUserMessage sysUserMessage = new SysUserMessage();
		String picType = null;
        if ("1".equals(taskState.getRenderTypesStr())) {
            sysUserMessage.setTitle("照片级渲染失败");
			picType = "渲染截图";
        } else if ("2".equals(taskState.getRenderTypesStr())) {
            sysUserMessage.setTitle("720°渲染失败");
			picType = "渲染截图";
        } else if ("3".equals(taskState.getRenderTypesStr())) {
            sysUserMessage.setTitle("720°多点渲染失败");
			picType = "渲染截图";
        } else if ("4".equals(taskState.getRenderTypesStr())) {
            sysUserMessage.setTitle("漫游视频渲染失败");
			picType = "720渲染视频封面";
        }
		//获取图片
		ResRenderPic resRenderPic = resRenderPicService.getBytaskIdAndPicType(picType, taskState.getTaskId());
		sysUserMessage.setPicId(resRenderPic.getId());

        sysUserMessage.setFailingReason(autoRenderTaskState.getFailReason());
        sysUserMessage.setTaskId(taskId);
        if (0 == taskState.getTaskType().intValue()) {
            sysUserMessage.setContent("装进我家 | " + taskState.getDesignName());
        } else if (1 == taskState.getTaskType().intValue()) {
            sysUserMessage.setContent("替换渲染 | " + taskState.getDesignName());
        }
        sysUserMessage.setCreator(taskState.getCreator());
        sysUserMessage.setModifier(taskState.getModifier());
        sysUserMessage.setMessageType(SysUserMessageConstants.RENDER_TASK_NEWS);
        sysUserMessage.setStatus(SysUserMessageConstants.FAIL);
        sysUserMessage.setUserId(taskState.getOperationUserId());
        sysUserMessage.setPlatformId(taskState.getPlatformId());
        //生成一条渲染失败的消息记录--end
        //插入消息记录到我的消息表
        int id = sysUserMessageService.add(sysUserMessage);
        logger.info("insert a fail taskMessage into sys_user_message---->id：" + id);

        logger.error("开始请求支付 退款===============================>" + "userId=" + RenderTask.getOperationUserId()
                + "orderNO=>" + RenderTask.getOrderNumber());
        boolean flag = updatePayOrder(RenderTask.getOperationUserId(), RenderTask.getOrderNumber(), token,platformCode);
        logger.error("进入更新失败任务 flag ======================>" + flag);
        if (!flag) {
            return new ResponseEnvelope<>(false, "退款失败！");
        }
        return new ResponseEnvelope<>(true, "退款成功！");

    }

    // TODO:need update
    private static boolean updatePayOrder(Integer userId, String orderNo, String token,String platformCode) {
        logger.error("updatePayOrder    -------> 进入了退款的方法、");
        String payPath = Utils.getPropertyName("app", "pay.server.url", "");
        String url = payPath + "/web/pay/payOrder/notifyRefund?userId=" + userId + "&orderNo=" + orderNo;
        logger.error("updatePayOrder    -------> url = " + url);
        Map<String, String> params = new HashMap<String, String>();
        params.put("userId", userId.toString());
        params.put("orderNo", orderNo);
        try {
            String result = Utils.doPostMethod(url, params, token,platformCode);
            logger.error("result========" + result);
            JSONObject jsonObject = JSONObject.fromObject(result);
            logger.error("jsonObject========" + jsonObject);
            boolean status = (boolean) jsonObject.get("status");
            logger.error("updatePayOrder    -------> status === " + status);
            return status;
        } catch (Exception e) {
            logger.error("updatePayOrder    -------> try ->catch ");
            return false;
        }
    }
	@Override
	public void updateTaskStateCach() {
		// TODO Auto-generated method stub

	}



	@Override
	public void addRenderTasksToDB(List<AutoRenderTask> tasks,LoginUser loginUser) {
		Integer result = designPlanAutoRenderMapper.batchInsertDataList(tasks);
	}

	// 给发布方案调用
	/**
	 * 
	 * @param designPlanRecommended 推荐方案对象
	 * @param designPlanId 方案ID design_plan
	 * @param loginUser
	 */
	@Override
	public void createTaskListByDesignPlan(DesignPlanRecommended designPlanRecommended, LoginUser loginUser,Integer designPlanId) {
		List<AutoRenderTask> taskList = mappingForDesignTemplateByDesignPlan(designPlanRecommended,loginUser);
		for (AutoRenderTask autoRenderTask : taskList) {
			sysSaveTask(autoRenderTask, loginUser,designPlanId);
		}
		if (taskList != null && taskList.size() > 0) {
			addRenderTasksToDB(taskList,loginUser);
		}
	}

	//给样板房上架调用
	@Override
	public void createTaskListByDesignTemplet(DesignTemplet template ,LoginUser loginUser, Integer designPlanId) {
		List<AutoRenderTask> taskList = mappingForDesignPlanByDesignTemplate(template);
		for (AutoRenderTask autoRenderTask : taskList) {
			sysSaveTask(autoRenderTask, loginUser, designPlanId);
		}
		if (taskList != null && taskList.size() > 0) {
			addRenderTasksToDB(taskList,loginUser);
		}
	}

	 /**
     * 从任务表获取任务插入状态表 并删除任务表任务
     *
     * @param maxSize
     * @param loginUser
     * @return
     */
    private synchronized List<AutoRenderTask> getRenderTasks(Integer maxSize, LoginUser loginUser) {
        AutoRenderTask task = new AutoRenderTask();
        task.setMaxSize(maxSize);
        List<AutoRenderTask> taskList = designPlanAutoRenderMapper.getAutoRenderTaskList(task);
        if (taskList != null && taskList.size() > 0) {
            AutoRenderTask task2 = taskList.get(0);
            AutoRenderTaskState taskState = new AutoRenderTaskState();
            taskState.setPlanId(task2.getPlanId());
            taskState.setTemplateId(task2.getTemplateId());
            taskState.setDesignPlanId(task2.getDesignPlanId());
            taskState.setRenderPic(DesignPlanConstants.RENDERING);
            taskState.setRenderN720(DesignPlanConstants.RENDERING);
            taskState.setRender720(DesignPlanConstants.RENDERING);
            taskState.setRenderVideo(DesignPlanConstants.RENDERING);
            taskState.setTaskId(task2.getId());
            sysSaveState(taskState, loginUser);
            taskState.setGmtCreate(task2.getGmtCreate());
            taskState.setGmtModified(task2.getGmtModified());
            taskState.setPlatformId(task2.getPlatformId());
            addTaskStateToDB(taskState);
            deleteRenderTaskByTaskId(task2.getId());
        }

        return taskList;
    }
    private synchronized List<AutoRenderTask> findReplaceProductTaskList(Integer maxSize, LoginUser loginUser) {
        AutoRenderTask task = new AutoRenderTask();
        task.setMaxSize(maxSize);
        List<AutoRenderTask> taskList = designPlanAutoRenderMapper.getReplaceTaskList(task);
        if (taskList != null && taskList.size() > 0) {
            AutoRenderTask task2 = taskList.get(0);
            Integer operationUserId = task2.getOperationUserId();
            Integer taskType = task2.getTaskType();
            String renderTypesStr = task2.getRenderTypesStr();
            AutoRenderTaskState taskState = new AutoRenderTaskState();
            taskState.setPlanId(task2.getPlanId());
            taskState.setTemplateId(task2.getTemplateId());
            taskState.setRenderPic(DesignPlanConstants.RENDERING);
            taskState.setRenderN720(DesignPlanConstants.RENDERING);
            taskState.setRender720(DesignPlanConstants.RENDERING);
            taskState.setRenderVideo(DesignPlanConstants.RENDERING);
            // 添加三个字段 add by yangzhun
            taskState.setOperationUserId(operationUserId);
            taskState.setTaskType(taskType);
            taskState.setRenderTypesStr(renderTypesStr);
            sysSaveState(taskState, loginUser);
            taskState.setGmtCreate(task2.getGmtCreate());
            taskState.setGmtModified(task2.getGmtModified());
            taskState.setPlatformId(task2.getPlatformId());
            addTaskStateToDB(taskState);// 插入任务状态表
            deleteRenderTaskByTaskId(task2.getId());
        }

        return taskList;
    }

	/**
	 * 存储系统字段
	 */
	private void sysSaveTask(AutoRenderTask modelTask, LoginUser loginUser,
			Integer designPlanId) {
		if (modelTask != null) {
			if (modelTask.getId() == null) {
				modelTask.setGmtCreate(new Date());
				modelTask.setCreator(loginUser.getLoginName());
			}
			modelTask.setModifier(loginUser.getLoginName());
			modelTask.setDesignPlanId(designPlanId);
		}
		modelTask.setGmtModified(new Date());
		
	}
	/**
	 * 存储系统字段
	 */
	private void sysSaveState(AutoRenderTaskState modelState,LoginUser loginUser) {
		if (modelState != null) {
			if (modelState.getId() == null) {
				modelState.setGmtCreate(new Date());
				modelState.setCreator(loginUser.getLoginName());
			}
			modelState.setModifier(loginUser.getLoginName());
		}
		modelState.setGmtModified(new Date());
	}
	
    /* (non-Javadoc)    
     * @see com.nork.design.service.DesignPlanAutoRenderService#getrenderPicByPage(com.nork.design.model.ThumbData)    
     */
	@Override
	public ResponseEnvelope getrenderPicByPage(ThumbData thumbData) {
		ResponseEnvelope envelope = new ResponseEnvelope();
		int count = resRenderPicMapper.countRenderPicByPage(thumbData);
		if (count <= 0) {
			return envelope;
		}

		envelope.setTotalCount(count);

		if (thumbData.getStart() > count) {
			envelope.setDatalist(new ArrayList<>());
			return envelope;
		}
		List list = resRenderPicMapper.getRenderPicByPage(thumbData);
		if (list == null || list.size() <= 0) {
			envelope.setDatalist(list);
			return envelope;
		}

		List<Long> ids = new ArrayList<Long>();
		for (int i = 0; i < list.size(); i++) {
			ThumbData temp = (ThumbData) list.get(i);
			ids.add(temp.getCpId());
		}

		List<DesignPlanRecommended> recommendedList = designPlanRecommendedMapperV2
				.getStatusByIds(ids);
		if (recommendedList == null || recommendedList.size() <= 0) {
			envelope.setDatalist(list);
			return envelope;
		}

		for (int i = 0; i < list.size(); i++) {
			ThumbData temp = (ThumbData) list.get(i);
			for (int j = 0; j < recommendedList.size(); j++) {
				DesignPlanRecommended recommended = recommendedList.get(j);
				if (recommended.getPlanId().longValue() != temp.getCpId())
					continue;

				if (Constants.RECOMMENDED_TYPE_SHARE == recommended
						.getRecommendedType().intValue()) {
					temp.setPubSt(recommended.getIsRelease());
					continue;
				}
				if (Constants.RECOMMENDED_TYPE_ONE_KEY_PUB == recommended
						.getRecommendedType().intValue()) {
					temp.setOneKeySt(recommended.getIsRelease());
					continue;
				}
			}
		}
		envelope.setDatalist(list);
		return envelope;
	}
	
	
	
	/**
	 * 效果图列表
	 * @param designPlanRenderScene
	 * @return ResponseEnvelope
	 */
	public ResponseEnvelope<ThumbData> getrenderPicByPageV2(DesignPlanRenderScene designPlanRenderScene) {
		
		ResponseEnvelope<ThumbData> envelope = new ResponseEnvelope<ThumbData>();
		
		List<ThumbData>resList = new ArrayList<ThumbData>(); 
		List<DesignPlanRenderScene>list = null;
		int count = 0;
		boolean isInternalUsers = designPlanRenderScene.isInternalUsers();
		count = designPlanRenderSceneMapper.getVendorCountV2(designPlanRenderScene);
		if(count <= 0){
			envelope.setDatalist(resList);
			envelope.setTotalCount(0);
			return envelope;
		}
		list = designPlanRenderSceneMapper.getVendorListV2(designPlanRenderScene);
		if(list == null || list.size() <= 0){
			envelope.setDatalist(resList);
			envelope.setTotalCount(0);
			return envelope;
		}
		
		List<Long> ids = new ArrayList<Long>();
		for (int i = 0; i < list.size(); i++) {
			ids.add((long)list.get(i).getId());
		}
		List<DesignPlanRecommended> recommendedList = designPlanRecommendedMapperV2.getStatusByIds(ids);
		for (DesignPlanRenderScene scene : list) {
			ThumbData thumbData = new ThumbData();
			thumbData.setCpId(scene.getId());
			thumbData.setFailCause(scene.getFailCause());
			thumbData.setCheckUserName(scene.getCheckUserName());
			this.coverPicHandling(scene,thumbData);
			if(isInternalUsers) {
				thumbData.setSpacecode(scene.getSpaceCode());
			}
			if(recommendedList !=null  && recommendedList.size() > 0 ){
				for (DesignPlanRecommended recommended : recommendedList) {
					if(recommended.getPlanId().longValue() != scene.getId()){
						continue;
					}
					if (Constants.RECOMMENDED_TYPE_SHARE == recommended.getRecommendedType().intValue()) {
						thumbData.setPubSt(recommended.getIsRelease());
						continue;
					}
					if (Constants.RECOMMENDED_TYPE_ONE_KEY_PUB == recommended.getRecommendedType().intValue()) {
						thumbData.setOneKeySt(recommended.getIsRelease());
						continue;
					}
				}
			}
			resList.add(thumbData);
		}
		envelope.setDatalist(resList);
		envelope.setTotalCount(count);
		return envelope;
	}
	
	
	/**
	 * 图片封面处理
	 * @param scene
	 * @param thumbData
	 */
	public void coverPicHandling(DesignPlanRenderScene scene,ThumbData thumbData){
		if(scene == null || thumbData == null){
			return;
		}
		if(scene.getCoverPicId() != null && scene.getCoverPicId().intValue() > 0){
			ResRenderPic coverPic = resRenderPicService.get(scene.getCoverPicId());
			if(coverPic != null){
				thumbData.setName(scene.getPlanName());
				this.dataFilling(coverPic,thumbData);
				return;
			}
		}
		List<ResRenderPic> picList = new ArrayList<>(); //查询该设计方案的全部渲染缩略图列表
		ResRenderPicQO resRenderPicQO = new ResRenderPicQO();
		resRenderPicQO.setCreateUserId(scene.getUserId());
		resRenderPicQO.setDesignSceneId(scene.getId());
		resRenderPicQO.setIsDeleted(0);
		List<String>fileKeyLists = new ArrayList<String>();
		fileKeyLists.add(ResProperties.DESIGNPLAN_RENDER_PIC_SMALL_FILEKEY);
		fileKeyLists.add(ResProperties.DESIGNPLAN_RENDER_VIDEO_COVER);
		resRenderPicQO.setFileKeys(fileKeyLists);
		picList = resRenderPicService.selectListByFileKeys(resRenderPicQO);
		if(picList !=null && picList.size() > 0){
			int id = 0;
			for (ResRenderPic resRenderPic : picList) {
				if(id > resRenderPic.getId().intValue()){
					continue;
				}
				thumbData.setName(scene.getPlanName());
				this.dataFilling(resRenderPic,thumbData);
				id = resRenderPic.getId();
			}
		}
	}
	
	
	/**
	 * 对thumbData 进行数据填充
	 * @param resRenderPic
	 * @param thumbData
	 */
	public void dataFilling(ResRenderPic resRenderPic,ThumbData thumbData){
		if(resRenderPic == null || thumbData == null){
			return;
		}
		thumbData.setThumbId(resRenderPic.getId());
		//thumbData.setName(resRenderPic.getDesignPlanName());
		thumbData.setPic(resRenderPic.getPicPath());
		thumbData.setType(resRenderPic.getSpaceType());
		thumbData.setArea(resRenderPic.getArea());
		thumbData.setPlanId(resRenderPic.getBusinessId());
		if(resRenderPic.getGmtCreate()!=null){
			SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			thumbData.setCtime(simpleDateFormat.format(resRenderPic.getGmtCreate()));
		}
		if(RenderTypeCode.COMMON_PICTURE_LEVEL == resRenderPic.getRenderingType().intValue()) {
			thumbData.setRenderPic(true);
		}
		if(RenderTypeCode.COMMON_720_LEVEL == resRenderPic.getRenderingType().intValue()) {
			thumbData.setRender720(true);
		}
		if(RenderTypeCode.ROAM_720_LEVEL == resRenderPic.getRenderingType().intValue()) {
			thumbData.setRenderRoam(true);
		}
		if(RenderTypeCode.COMMON_VIDEO == resRenderPic.getRenderingType().intValue()) {
			thumbData.setRenderVideo(true);
		}
	}
	
	
	
	
	
	@Override
	public Object updateCoverPic(String picId, String planId, String msgId, String designPlanType) {
		if (StringUtils.isEmpty(picId) || StringUtils.isEmpty(planId) || StringUtils.isEmpty(msgId) ) {
			return new ResponseEnvelope<DesignPlan>(false, "缺少参数", msgId);
		}
		ResRenderPic resRenderPic = resRenderPicService.get(Integer.parseInt(picId));
		if (resRenderPic == null) {
			return new ResponseEnvelope<DesignPlan>(false, "图片不存在或被删除，请刷新页面", msgId);
		}
		if (resRenderPic.getRenderingType() == null) {
			return new ResponseEnvelope<DesignPlan>(false, "图片类型错误，只允许上传照片级渲染图", msgId);
		}
		if (resRenderPic.getRenderingType().intValue() == RenderTypeCode.COMMON_720_LEVEL
				|| resRenderPic.getRenderingType().intValue() == RenderTypeCode.HD_720_LEVEL) {
			return new ResponseEnvelope<DesignPlan>(false, "720渲染图不允许设为封面", msgId);
		}
		if (resRenderPic.getRenderingType().intValue() == RenderTypeCode.SCREEN_OF_PIC) {
			return new ResponseEnvelope<DesignPlan>(false, "高清渲染不允许设为封面", msgId);
		}
		if (resRenderPic.getRenderingType().intValue() != RenderTypeCode.COMMON_PICTURE_LEVEL
				&& resRenderPic.getRenderingType().intValue() != RenderTypeCode.HD_PICTURE_LEVEL
				&& resRenderPic.getRenderingType().intValue() != RenderTypeCode.ULTRA_HD_PICTURE_LEVEL) {
			return new ResponseEnvelope<DesignPlan>(false, "图片类型错误，只允许上传照片级渲染图", msgId);
		}
		DesignPlanRenderScene scene = designPlanRenderSceneMapper.get(Integer.parseInt(planId));
		if(scene ==null ){
			return new ResponseEnvelope<DesignPlan>(false, "该效果图被删除,请刷新页面", msgId);
		}
		scene = new DesignPlanRenderScene();
		scene.setCoverPicId(Integer.parseInt(picId));
		scene.setId(Integer.parseInt(planId));
		designPlanRenderSceneMapper.update(scene);
		return new ResponseEnvelope<DesignPlan>(true, "封面设置成功", msgId);
	}
	@Override
	public int add(AutoRenderTask autoRenderTask) {
		// TODO Auto-generated method stub
		designPlanAutoRenderMapper.createTask(autoRenderTask);
		return autoRenderTask.getId();
	}
	@Override
	public int addTask(AutoRenderTask autoRenderTask) {
		// TODO Auto-generated method stub
		designPlanAutoRenderMapper.insertSelective(autoRenderTask);
		return autoRenderTask.getId();
	}
	@Override
	public List<AutoRenderTask> getReplaceProductTask(Integer maxSize, LoginUser loginUser) {
		List<AutoRenderTask> taskList = findReplaceProductTaskList(maxSize,loginUser);
		for(AutoRenderTask task : taskList) {
			Integer planRecommendedId = task.getPlanId();
			DesignPlanRecommended designPlanRecommended = designPlanRecommendedServiceV2.get(planRecommendedId);
			task.setLivingId(designPlanRecommended.getLivingId());
			task.setHouseId(designPlanRecommended.getHouseId());
			task.setDesignPlanId(designPlanRecommended.getPlanId());
		}
		
		return taskList;
	}
	@Override
	public int addRedisLists(AutoRenderTask autoRenderTask) {
		Gson gson = new Gson();
		String json = gson.toJson(autoRenderTask);
		Long result = JedisUtils.listAdd(REDIS_TASK_LIST, json);
		logger.info("Redis list size ====>"+result);
		return result.intValue();
	}
	 @Override
	 @Transactional(rollbackFor = Exception.class)
    public AutoRenderTask getRedisTaskList(Integer maxSize, LoginUser loginUser, String renderMachineIp,
                                           Integer renderLevel, String renderProgramVersion) throws UnknownHostException {
        Gson gson = new Gson();
        String jsonStr = null;
        List<String> result = JedisUtils.getBrpopList(REDIS_TASK_LIST);
        if (result != null && result.size() > 0) {
            jsonStr = result.get(1);
        }
        AutoRenderTask task = gson.fromJson(jsonStr, AutoRenderTask.class);
        Integer taskId = null;
        InetAddress addr = InetAddress.getLocalHost();
        String hostIp = addr.getHostAddress().toString();
        String hostName = addr.getHostName().toString();
        // 如果该任务在任务状态表里已经存在，说明该任务已经执行过，则不返回改任务，直接删除该任务在Redis 队列
        if (task != null) {
            AutoRenderTaskState autoRenderTaskState = this.getStateByTaskId(task.getId());
            if (autoRenderTaskState != null && autoRenderTaskState.getTaskId() > 0) {
                return null;
            }
        }
        if (task != null) {
            taskId = task.getId();
            AutoRenderTask task2 = designPlanAutoRenderMapper.getRenderTaskById(taskId);
            logger.error("getRedisTaskList ===>" + task2.getId());
            if (task2 != null) {
                AutoRenderTaskState taskState = new AutoRenderTaskState();
                Integer operationUserId = task2.getOperationUserId();
                SysUser sysUser = sysUserService.get(operationUserId);
                LoginUser loginUser2 = sysUser.toLoginUser();
                taskState.setPlanId(task2.getPlanId());
                taskState.setTemplateId(task2.getTemplateId());
                taskState.setDesignPlanId(task2.getDesignPlanId());
                if (task2.getRenderTypesStr().equals("1")) {
                    taskState.setRenderPic(DesignPlanConstants.RENDERING);
                } else if (task2.getRenderTypesStr().equals("2")) {
                    taskState.setRender720(DesignPlanConstants.RENDERING);
                } else if (task2.getRenderTypesStr().equals("3")) {
                    taskState.setRenderN720(DesignPlanConstants.RENDERING);
                } else if (task2.getRenderTypesStr().equals("4")) {
                    taskState.setRenderVideo(DesignPlanConstants.RENDERING);
                }
                taskState.setTaskId(task2.getId());
                taskState.setOperationUserId(operationUserId);
                taskState.setTaskType(task2.getTaskType());
                taskState.setRenderTypesStr(task2.getRenderTypesStr());
                taskState.setGmtCreate(new Date());
                taskState.setGmtModified(new Date());
                taskState.setCreator(loginUser2.getName());
                taskState.setModifier(loginUser2.getName());
                taskState.setOrderNumber(task2.getOrderNumber());
                taskState.setDesignCode(task2.getDesignCode());
                taskState.setDesignName(task2.getDesignName());
                taskState.setTemplateCode(task2.getTemplateCode());
                taskState.setHostIp(hostIp);
                taskState.setHostName(hostName);
                taskState.setTaskSource(task2.getTaskSource());
                taskState.setRenderMachineIp(renderMachineIp);
                taskState.setRenderLevel(renderLevel);
                taskState.setRenderProgramVersion(renderProgramVersion);
                taskState.setPlatformId(task2.getPlatformId());
                addTaskStateToDB(taskState);
                deleteRenderTaskByTaskId(task2.getId());
            }
        }
        return task;
    }
	
	@Override
	public int addRedisReplaceList(AutoRenderTask autoRenderTask) {
		Gson gson = new Gson();
		String json = gson.toJson(autoRenderTask);
		Long result = JedisUtils.listAdd(REDIS_TASK_REPLACE_LIST, json);
		logger.info("Redis list size ====>"+result);
		return result.intValue();
	}
	@Override
	@Transactional(rollbackFor = Exception.class)
    public AutoRenderTask getRedisReplaceTaskList(Integer maxSize, LoginUser loginUser, String renderMachineIp,
                                                  Integer renderLevel, String renderProgramVersion) throws UnknownHostException {
        Gson gson = new Gson();
        String jsonStr = null;
        InetAddress addr = InetAddress.getLocalHost();
        String hostIp = addr.getHostAddress().toString();
        String hostName = addr.getHostName().toString();
        List<String> result = JedisUtils.getBrpopList(REDIS_TASK_REPLACE_LIST);
        if (result != null && result.size() > 0) {
            jsonStr = result.get(1);
        }
        AutoRenderTask task = gson.fromJson(jsonStr, AutoRenderTask.class);
        Integer taskId = null;
        // 如果该任务在任务状态表里已经存在，说明该任务已经执行过，则不返回改任务，直接删除该任务在Redis 队列
        if (task != null) {
            AutoRenderTaskState autoRenderTaskState = this.getStateByTaskId(task.getId());
            if (autoRenderTaskState != null && autoRenderTaskState.getTaskId() > 0) {
                return null;
            }
        }
        if (task != null) {
            taskId = task.getId();
            AutoRenderTask task2 = designPlanAutoRenderMapper.getRenderTaskById(taskId);
            logger.error("getRedisTaskList ===>" + task2.getId());
            if (task2 != null) {
                Integer operationUserId = task2.getOperationUserId();
                SysUser sysUser = sysUserService.get(operationUserId);
                LoginUser loginUser2 = sysUser.toLoginUser();
                Integer taskType = task2.getTaskType();
                String renderTypesStr = task2.getRenderTypesStr();
                AutoRenderTaskState taskState = new AutoRenderTaskState();
                taskState.setPlanId(task2.getPlanId());
                taskState.setTemplateId(task2.getTemplateId());
                if (task2.getRenderTypesStr().equals("1")) {
                    taskState.setRenderPic(DesignPlanConstants.RENDERING);
                } else if (task2.getRenderTypesStr().equals("2")) {
                    taskState.setRender720(DesignPlanConstants.RENDERING);
                } else if (task2.getRenderTypesStr().equals("3")) {
                    taskState.setRenderN720(DesignPlanConstants.RENDERING);
                } else if (task2.getRenderTypesStr().equals("4")) {
                    taskState.setRenderVideo(DesignPlanConstants.RENDERING);
                }
                taskState.setOperationUserId(operationUserId);
                taskState.setTaskType(taskType);
                taskState.setRenderTypesStr(renderTypesStr);
                taskState.setTaskId(task2.getId());
                taskState.setGmtCreate(new Date());
                taskState.setGmtModified(new Date());
                taskState.setCreator(loginUser2.getName());
                taskState.setModifier(loginUser2.getName());
                taskState.setOrderNumber(task2.getOrderNumber());
                taskState.setDesignCode(task2.getDesignCode());
                taskState.setDesignName(task2.getDesignName());
                taskState.setHostIp(hostIp);
                taskState.setHostName(hostName);
                taskState.setTaskSource(task2.getTaskSource());
                taskState.setRenderMachineIp(renderMachineIp);
                taskState.setRenderLevel(renderLevel);
                taskState.setRenderProgramVersion(renderProgramVersion);
                taskState.setPlatformId(task2.getPlatformId());
                addTaskStateToDB(taskState);// 插入任务状态表
                deleteRenderTaskByTaskId(task2.getId());
            }
        }
        return task;
    }
	@Override
	public void getRedisStickList(Integer taskId) {
		AutoRenderTask  autoRenderTask = designPlanAutoRenderMapper.getRenderTaskById(taskId);
		Gson gson = new Gson();
		String json = gson.toJson(autoRenderTask);
		Long result = JedisUtils.listLAdd(REDIS_RENDER_TASK_STICK, json);
		logger.error("Redis list size ====>"+result);
		
	}

	 @Override
	 @Transactional(rollbackFor = Exception.class)
    public AutoRenderTask getRedisStickTaskList(Integer maxSize, LoginUser loginUser, String renderMachineIp,
                                                Integer renderLevel, String renderProgramVersion) throws UnknownHostException {
        Gson gson = new Gson();
        String jsonStr = null;
        InetAddress addr = InetAddress.getLocalHost();
        String hostIp = addr.getHostAddress().toString();
        String hostName = addr.getHostName().toString();
        List<String> result = JedisUtils.getBrpopList(REDIS_RENDER_TASK_STICK);
        if (result != null && result.size() > 0) {
            jsonStr = result.get(1);
        }
        AutoRenderTask task = gson.fromJson(jsonStr, AutoRenderTask.class);
        Integer taskId = null;
        // JSONObject jsonobject = JSONObject.fromObject(jsonStr);
        // AutoRenderTask autoRenderTask=
        // (AutoRenderTask)JSONObject.toBean(jsonobject,AutoRenderTask.class);
        if (task != null) {
            taskId = task.getId();
            AutoRenderTask task2 = designPlanAutoRenderMapper.getRenderTaskById(taskId);
            logger.error("getRedisTaskList ===>" + task.getId());
            if (task2 != null) {
                Integer operationUserId = task2.getOperationUserId();
                SysUser sysUser = sysUserService.get(operationUserId);
                LoginUser loginUser2 = sysUser.toLoginUser();
                Integer taskType = task2.getTaskType();
                String renderTypesStr = task2.getRenderTypesStr();
                AutoRenderTaskState taskState = new AutoRenderTaskState();
                taskState.setPlanId(task2.getPlanId());
                taskState.setTemplateId(task2.getTemplateId());
                if (task2.getRenderTypesStr().equals("1")) {
                    taskState.setRenderPic(DesignPlanConstants.RENDERING);
                } else if (task2.getRenderTypesStr().equals("2")) {
                    taskState.setRender720(DesignPlanConstants.RENDERING);
                } else if (task2.getRenderTypesStr().equals("3")) {
                    taskState.setRenderN720(DesignPlanConstants.RENDERING);
                } else if (task2.getRenderTypesStr().equals("4")) {
                    taskState.setRenderVideo(DesignPlanConstants.RENDERING);
                }
                taskState.setOperationUserId(operationUserId);
                taskState.setTaskType(taskType);
                taskState.setRenderTypesStr(renderTypesStr);
                taskState.setTaskId(task2.getId());
                taskState.setGmtCreate(task2.getGmtCreate());
                taskState.setGmtModified(task2.getGmtModified());
                taskState.setCreator(loginUser2.getName());
                taskState.setModifier(loginUser2.getName());
                taskState.setOrderNumber(task2.getOrderNumber());
                taskState.setDesignCode(task2.getDesignCode());
                if (task2.getTemplateCode() != null) {
                    taskState.setTemplateCode(task2.getTemplateCode());
                }
                taskState.setDesignName(task2.getDesignName());
                taskState.setHostIp(hostIp);
                taskState.setHostName(hostName);
                taskState.setTaskSource(task2.getTaskSource());
                taskState.setRenderMachineIp(renderMachineIp);
                taskState.setRenderLevel(renderLevel);
                taskState.setRenderProgramVersion(renderProgramVersion);
                taskState.setPlatformId(task2.getPlatformId());
                addTaskStateToDB(taskState);// 插入任务状态表
                deleteRenderTaskByTaskId(task2.getId());
            }
        }
        return task;
    }
    @Override
    public Integer handleAutoRenderTask(AutoRenderTask autoRenderTask, ResRenderPic resRenderPic, String orderNo) throws GeneratePanoramaException {

       Integer taskId = designPlanAutoRenderMapper.createTask(autoRenderTask);
       taskId = autoRenderTask.getId();
       if(taskId == 0){
           throw new GeneratePanoramaException(false, "创建自动替换任务失败");
       }
       logger.error("create taskId==>" + taskId);
//       String backFillTask = taskId.toString();
//       String result =  backFillTaskId(autoRenderTask.getOrderNumber(),backFillTask);
//       JSONObject jsonObject = JSONObject.fromObject(result);
//	  	String msg = (String) jsonObject.get("message");
//	      if ("修改订单失败".equals(msg)) {
//	    	  throw new GeneratePanoramaException(false, msg);
//		}
        // 批量插入替换产品
        if (resRenderPic.getProductReplaceList() != null) {
            List<ProductReplaceTaskDetail> productReplaceList = resRenderPic.getProductReplaceList();
            if (productReplaceList != null && productReplaceList.size() > 0) {
            	String newTextureInfo = null;
				BaseProduct baseProduct;
				Integer renderSceneId = null;
				DesignPlanRenderScene renderScene;
				DesignPlanRecommended planRecommended;
				Integer designPlanId;
				DesignPlanProduct designPlanProduct = null;
				Integer practicableProductId = null;
                for (ProductReplaceTaskDetail productReplaceTaskDetail : productReplaceList) {
                	//替换产品同时替换材质
                	if (productReplaceTaskDetail.getSourceTexturesChooseInfo() != null &&  !("".equals(productReplaceTaskDetail.getSourceTexturesChooseInfo()))) {
                		newTextureInfo = getNewTexturesChooseInfo(productReplaceTaskDetail);
                		productReplaceTaskDetail.setDestTexturesChooseInfo(newTextureInfo);
					}else{
                		//没有替换材质则获取目标产品的材质信息给渲染机
						baseProduct = baseProductService.get(productReplaceTaskDetail.getDestProductId());
						productReplaceTaskDetail.setDestTexturesChooseInfo(baseProduct.getSplitTexturesInfo());
					}

					//多模型产品找最合适的 gaoj 2018.08.13
					//获取原产品判断是否是多模型产品
					logger.error("硬装多模型逻辑 =========> productReplaceTaskDetail.getSourceProductId():"+productReplaceTaskDetail.getSourceProductId());
					baseProduct = baseProductService.get(productReplaceTaskDetail.getDestProductId());
                	logger.error("硬装多模型逻辑 =========> batchType:"+baseProduct.getProductBatchType());
					logger.error("硬装多模型逻辑 =========> OperationSource:"+resRenderPic.getOperationSource());
					if (MULTI_MODEL_PRODUCT_BATCH_TYPE == baseProduct.getProductBatchType()) {
						//是多模型主产品时，根据效果图方案获取草图方案id，最终获取草图方案产品的id
						if (0==resRenderPic.getOperationSource()) {
							//从我的任务替换渲染时，获取效果图方案id
							renderSceneId = resRenderPic.getDesignSceneId();
							logger.error("硬装多模型逻辑 =========> renderSceneId:"+renderSceneId);
						} else {
							//从推荐方案替换渲染时，获取推荐方案对应的效果图方案id
							planRecommended = designPlanRecommendedMapperV2.selectByPrimaryKey
									(resRenderPic.getPlanRecommendedId());
							if (planRecommended != null) {
								renderSceneId = planRecommended.getPlanId();
								logger.error("硬装多模型逻辑 =========> planRecommended.getPlanId():"+planRecommended.getPlanId());
							}
						}
						if (renderSceneId != null && renderSceneId > 0) {
							//根据效果图方案获取草图方案id，最后获取草图方案产品表的id
							renderScene = designPlanRenderSceneMapper.get(renderSceneId);
							logger.error("硬装多模型逻辑 =========> renderScene:"+renderScene);
							if (renderScene != null) {
								designPlanId = renderScene.getDesignPlanId();
								logger.error("硬装多模型逻辑 =========> designPlanId:"+designPlanId);
								designPlanProduct = designPlanProductService.getByPlanIdAndProductId
										(designPlanId, resRenderPic.getSourcePlanId());
								logger.error("硬装多模型逻辑 =========> designPlanProduct:"+designPlanProduct);
							}
							if (designPlanProduct != null) {
								//rpc调用宋博接口返回适配的产品id
//								try {
//									practicableProductId = commonAppSearchService.getPracticableProductId
//											(productReplaceTaskDetail.getDestProductId(), designPlanProduct.getId());
//								} catch (BizException e) {
//									logger.error("获取多模型产品exception ====> "+e);
//								}
								// -------------- rest调宋博的接口 -------------- //
								// modified by zhangchengda
								// 2018/8/14 16:06
								String url = productSearchUrl + "/v1/web/app/search/getPracticableProductId.htm";
								url += "?" + "productId=" + designPlanProduct.getProductId() + "&" + "designPlanProductId=" + designPlanProduct.getId();
								logger.error("硬装多模型逻辑 =========> url:"+url);
								String resultStr = Utils.doGetMethod(url);
								logger.error("硬装多模型逻辑 =========> resultStr:"+resultStr);
								ResponseEnvelope result = gson.fromJson(resultStr, ResponseEnvelope.class);
								practicableProductId = (Integer)result.getObj();
								logger.error("硬装多模型逻辑 =========> practicableProductId:"+practicableProductId);
								// -------------- end -------------- //
								if (practicableProductId != null) {
									//给目标产品赋新值
									productReplaceTaskDetail.setDestProductId(practicableProductId);
									baseProduct = baseProductService.get(practicableProductId);
									productReplaceTaskDetail.setDestProductCode(baseProduct.getProductCode());
								}
							}
						}
					}
                    productReplaceTaskDetail.setTaskId(Integer.valueOf(taskId));
                    // TODO 移动端loginUserName统一设置值userName
                    productReplaceTaskDetail.setCreator(resRenderPic.getUserName());
                    productReplaceTaskDetail.setModifier(resRenderPic.getUserName());
                    productReplaceTaskDetail.setGmtCreate(new Date());
                    productReplaceTaskDetail.setGmtModified(new Date());
                }
                mobileRenderRecordMapper.batchInsertDataList(productReplaceList);
            }
        }

        // 批量插入删除产品
        if (resRenderPic.getProductDeleteList() != null) {
            List<ProductReplaceTaskDetail> productDeleteList = resRenderPic.getProductDeleteList();
            if (productDeleteList != null && productDeleteList.size() > 0) {
                for (ProductReplaceTaskDetail productReplaceTaskDetail : productDeleteList) {
                    productReplaceTaskDetail.setTaskId(Integer.valueOf(taskId));
                    productReplaceTaskDetail.setCreator(resRenderPic.getUserName());
                    productReplaceTaskDetail.setModifier(resRenderPic.getUserName());
                    productReplaceTaskDetail.setGmtCreate(new Date());
                    productReplaceTaskDetail.setGmtModified(new Date());
                }
                mobileRenderRecordMapper.batchInsertDataList(productDeleteList);
            }
        }

        //批量插入组合替换产品
        if (resRenderPic.getProductGroupReplaceList() != null) {
            List<ProductGroupReplaceTaskDetail> productGroupReplaceList = resRenderPic.getProductGroupReplaceList();
            if (productGroupReplaceList != null && productGroupReplaceList.size() > 0) {
                for (ProductGroupReplaceTaskDetail productGroupReplaceTaskDetail : productGroupReplaceList) {
                    //如果该组合数量>2,才会传方案ID过来,处理组合主产品相同,子产品不同,也同时替换该组合.
					int currentPlanId = productGroupReplaceTaskDetail.getPlanId()!=null? productGroupReplaceTaskDetail.getPlanId().intValue() : 0;
					int currentSceneId = productGroupReplaceTaskDetail.getSceneId()!=null? productGroupReplaceTaskDetail.getSceneId().intValue() : 0;
					if (currentPlanId > 0 ||  currentSceneId > 0) {
                    	if (currentPlanId > 0) {
                    		DesignPlanRecommendedProduct designPlanRecommendedProduct = new DesignPlanRecommendedProduct();
                    		designPlanRecommendedProduct.setPlanRecommendedId(productGroupReplaceTaskDetail.getPlanId());
                    		designPlanRecommendedProduct.setProductId(productGroupReplaceTaskDetail.getSourceProductId());
                    		designPlanRecommendedProduct.setIsMainProduct(1);
                    		List<DesignPlanRecommendedProduct> groupIdList = designPlanRecommendedProductServiceV2.getList(designPlanRecommendedProduct);
                    		for (DesignPlanRecommendedProduct PlanProduct : groupIdList) {
                    			productGroupReplaceTaskDetail.setSourceGroupProductId(PlanProduct.getProductGroupId());
//						        productGroupReplaceTaskDetail.getSearchProductGroupResult();
                    			productGroupReplaceTaskDetail.setTaskId(Integer.valueOf(taskId));
                    			productGroupReplaceTaskDetail.setCreator(resRenderPic.getUserName());
                    			productGroupReplaceTaskDetail.setModifier(resRenderPic.getUserName());
                    			productGroupReplaceTaskDetail.setGmtCreate(new Date());
                    			productGroupReplaceTaskDetail.setGmtModified(new Date());
                    			mobileRenderRecordMapper.insertGroupProductReplace(productGroupReplaceTaskDetail);
//								mobileRenderRecordMapper.batchInsertGroupList(productGroupReplaceList);
                    		}
						}else if (currentSceneId > 0) {
							DesignPlanProductRenderScene designPlanProductRenderScene = new DesignPlanProductRenderScene();
							designPlanProductRenderScene.setPlanId(productGroupReplaceTaskDetail.getSceneId());
							designPlanProductRenderScene.setProductId(productGroupReplaceTaskDetail.getSourceProductId());
							designPlanProductRenderScene.setIsMainProduct(1);
	                    		List<DesignPlanProductResult> groupIdList = designPlanProductRenderSceneService.getScenePlanProductList(designPlanProductRenderScene);
	                    		for (DesignPlanProductResult PlanProduct : groupIdList) {
	                    			productGroupReplaceTaskDetail.setSourceGroupProductId(PlanProduct.getProductGroupId());
//							        productGroupReplaceTaskDetail.getSearchProductGroupResult();
	                    			productGroupReplaceTaskDetail.setTaskId(Integer.valueOf(taskId));
	                    			productGroupReplaceTaskDetail.setCreator(resRenderPic.getUserName());
	                    			productGroupReplaceTaskDetail.setModifier(resRenderPic.getUserName());
	                    			productGroupReplaceTaskDetail.setGmtCreate(new Date());
	                    			productGroupReplaceTaskDetail.setGmtModified(new Date());
	                    			mobileRenderRecordMapper.insertGroupProductReplace(productGroupReplaceTaskDetail);
//									mobileRenderRecordMapper.batchInsertGroupList(productGroupReplaceList);
	                    		}
						}
                    }else {
                        productGroupReplaceTaskDetail.setTaskId(Integer.valueOf(taskId));
                        productGroupReplaceTaskDetail.setCreator(resRenderPic.getUserName());
                        productGroupReplaceTaskDetail.setModifier(resRenderPic.getUserName());
                        productGroupReplaceTaskDetail.setGmtCreate(new Date());
                        productGroupReplaceTaskDetail.setGmtModified(new Date());
                        mobileRenderRecordMapper.insertGroupProductReplace(productGroupReplaceTaskDetail);
                    }
                }
            }
        }

        //批量插入材质替换产品
        if (resRenderPic.getTextureReplaceList() != null) {
            String newSplitTextureInfo = null;
            List<ProductReplaceTaskDetail> textureReplaceList = resRenderPic.getTextureReplaceList();
            if (textureReplaceList != null && textureReplaceList.size() > 0) {
                for (ProductReplaceTaskDetail textureReplaceTaskDetail : textureReplaceList) {
                    newSplitTextureInfo = getNewSplitTexturesChooseInfo(textureReplaceTaskDetail);
                    textureReplaceTaskDetail.setReplaceSplitTexturesChooseInfo(newSplitTextureInfo);
                    textureReplaceTaskDetail.setTaskId(Integer.valueOf(taskId));
                    textureReplaceTaskDetail.setCreator(resRenderPic.getUserName());
                    textureReplaceTaskDetail.setModifier(resRenderPic.getUserName());
                    textureReplaceTaskDetail.setGmtCreate(new Date());
                    textureReplaceTaskDetail.setGmtModified(new Date());
                }
                mobileRenderRecordMapper.batchInsertTextureList(textureReplaceList);
            }
        }

        logger.error("replaceRecord=>update the pay order==" + orderNo + "taskId ==" + taskId);
//        payOrderService.updateOrderByOrderNo(orderNo, taskId);
        return taskId;
    }
    /**
     * 回填任务Id
     * @return
     */
/*    private  String backFillTaskId( String orderNo,String taskId){
//       	String orderNo = "20171216103938278008";
//       	String taskId = "132546";
       	String url = "http://192.168.3.36:30011/v1/web/pay/payOrder/updatePayoOrder?orderNo="+orderNo+"&taskId="+taskId;
       	Map<String,String> params=new HashMap<String,String>();
       	params.put("orderNo", orderNo);
    	params.put("taskId", taskId);
    	try {
    		String reslut = Utils.doPostMethod(url, params);
    		if (reslut != null) {
    			return reslut;
    		}
    	} catch (Exception e) {
    		return "回填任务ID失败";
    	}
    	return null;
       }*/

    public String getNewSplitTexturesChooseInfo(ProductReplaceTaskDetail replaceDetail) {
        // TODO Auto-generated method stub
        //替换方案产品列表中的数据
        Integer productId = replaceDetail.getSourceProductId();
        //当前产品
        BaseProduct currentProduct=baseProductService.get(productId);
        //材质替换参数
        String splitTexturesChooseParam = replaceDetail.getReplaceSplitTexturesParam();
        //当前产品材质信息
        String currentSplitTexturesInfo = currentProduct.getSplitTexturesInfo();
        //json 转list
        Gson gson = new Gson();
        List<SplitTextureInfoDTO> currentSplitTextInfoList = gson.fromJson(currentSplitTexturesInfo, new TypeToken<List<SplitTextureInfoDTO>>(){}.getType());
        List<String> newSplitTextInfoList=Utils.getListFromStr2(splitTexturesChooseParam,";");
        for(String splitTextures:newSplitTextInfoList){
            //更新方案产品列表相同产品的多材质信息
            currentSplitTextInfoList = updateSplitTexture(currentSplitTextInfoList,splitTextures);
        }
        String newSplitTextInfo = gson.toJson(currentSplitTextInfoList);
        // TODO : if currentSplitTextInfoList is null should use the orginal split text info in design plan product
        return newSplitTextInfo;
    }

    private static List<SplitTextureInfoDTO> updateSplitTexture(List<SplitTextureInfoDTO> splitTextureDTOList, String str) {
        if(str.indexOf(":")==-1){
            return splitTextureDTOList;
        }
        String[] strs=str.split(":");
        if(strs.length<2){
            return splitTextureDTOList;
        }
        String key=strs[0];
        String value=strs[1];
        for(SplitTextureInfoDTO splitTextureDTO:splitTextureDTOList){
            if(org.apache.commons.lang3.StringUtils.equals(key, splitTextureDTO.getKey())){
                splitTextureDTO.setDefaultId(Integer.valueOf(value));
                break;
            }
        }
        return splitTextureDTOList;
    }

    
	@Override
	@Transactional(rollbackFor = Exception.class)
	public AutoRenderTaskState getStateByTaskId(Integer taskId) {
		logger.error("AAAAAAutoRenderTaskState--------getStateByTaskId----------taskId----------" + taskId);
		AutoRenderTaskState autoRenderTaskState = null;
		autoRenderTaskState = designPlanAutoRenderMapper.getStateByTaskId(taskId);
		return autoRenderTaskState;
	}
	
	
	/**
	 * 替换单品时同时替换产品材质
	 * @param replaceDetail
	 * @return
	 */
	private String getNewTexturesChooseInfo(ProductReplaceTaskDetail replaceDetail) {
		// TODO Auto-generated method stub
		//替换方案产品列表中的数据
		Integer productId = replaceDetail.getDestProductId();
		//当前产品
		BaseProduct currentProduct=baseProductService.get(productId);
		//材质替换参数
		String splitTexturesChooseParam = replaceDetail.getReplaceTexturesParam();
		//当前产品材质信息
		String currentSplitTexturesInfo = currentProduct.getSplitTexturesInfo();
		//json 转list
		Gson gson = new Gson();
		List<SplitTextureInfoDTO> currentSplitTextInfoList = gson.fromJson(currentSplitTexturesInfo, new TypeToken<List<SplitTextureInfoDTO>>(){}.getType());
		List<String> newSplitTextInfoList=Utils.getListFromStr2(splitTexturesChooseParam,";");
		for(String splitTextures:newSplitTextInfoList){
			//更新方案产品列表相同产品的多材质信息
			currentSplitTextInfoList=updateSplitTexture(currentSplitTextInfoList,splitTextures);
		}
		String newSplitTextInfo = gson.toJson(currentSplitTextInfoList);
		// TODO : if currentSplitTextInfoList is null should use the orginal split text info in design plan product
		if ("null".equals(newSplitTextInfo)) {
			newSplitTextInfo = "";
		}
		return newSplitTextInfo;
	}
	
	@Override
	@Transactional(rollbackFor = Exception.class)
	public Map<Integer, Integer> getAllRenderTypesStr(AutoRenderTask autoRenderTask) {
	    Map<Integer, Integer> map = new HashMap<Integer, Integer>();
	    map.put(RenderTypeCode.COMMON_PICTURE_LEVEL, AutoRenderTask.RENDER_TASK);
	    map.put(RenderTypeCode.COMMON_720_LEVEL, AutoRenderTask.RENDER_TASK);
	    map.put(RenderTypeCode.ROAM_720_LEVEL, AutoRenderTask.RENDER_TASK);
	    map.put(RenderTypeCode.COMMON_VIDEO, AutoRenderTask.RENDER_TASK);
	    String renderTypesStrs = designPlanAutoRenderMapper.getAllRenderTypesStr(autoRenderTask);
	    if (StringUtils.isNotBlank(renderTypesStrs)) {
	        String[] strs = renderTypesStrs.split(",");
	        for (String str : strs) {
	            switch (str) {
	                case AutoRenderTask.RENDER_TYPES_PHOTO:
	                    map.put(RenderTypeCode.COMMON_PICTURE_LEVEL, AutoRenderTask.RENDER_TASK_NOT);
	                    break;
	                case AutoRenderTask.RENDER_TYPES_720P:
	                    map.put(RenderTypeCode.COMMON_720_LEVEL, AutoRenderTask.RENDER_TASK_NOT);
	                    break;
	                case AutoRenderTask.RENDER_TYPES_MULTE_POINT_720P:
	                    map.put(RenderTypeCode.ROAM_720_LEVEL, AutoRenderTask.RENDER_TASK_NOT);
	                    break;
	                case AutoRenderTask.RENDER_TYPES_VIDEO:
	                    map.put(RenderTypeCode.COMMON_VIDEO, AutoRenderTask.RENDER_TASK_NOT);
	                    break;
	                default:
	                    break;
	            }
	        }
	    }
	    return map;
	}
	  
	@Override
    @Transactional(rollbackFor = Exception.class)
    public boolean delRederTaskByDesignPlanId(AutoRenderTask autoRenderTask) {
		int a = 0;
		Integer id = autoRenderTask.getId();
        Integer userId = autoRenderTask.getOperationUserId();
        if (userId == null) {
            return false;
        }
		AutoRenderTaskState state = designPlanAutoRenderMapper.selectAuroRenderTaskStateById(id);

		if(state == null) {//state为空时是auto_render_task表数据
			//将任务置为无效，只是在前端不显示
			a = designPlanAutoRenderMapper.updateAutoRenderTaskById(id,userId);
		}else if(state != null) {//state不为空时是auto_render_task_state表数据

            if (!userId.equals(state.getOperationUserId())) {
                return false;
            }

			//将任务状态置为无效
			state.setIsValid(new Integer(1));
			state.setIsDeleted(new Integer(1));
			a = designPlanAutoRenderMapper.updateTaskStateByTaskId(state);
		}
		if(a == 0) {
			return false;
		}
		return true;
    }
	
	@Override
	@Transactional(rollbackFor = Exception.class)
    public Map<Integer, String> queryUsedHouseInMyRenderPlan(Integer userId) {
/*
        //Check param is null
        if (null == userId || userId <= 0) {
            logger.warn( "查询用户我的方案中已使用户型失败，userid is invalid! userId is {}", userId);
            return null;
        }

        //查询我的方案中已使用的户型
        logger.info("查询用户我的方案中已使用户型:UserId:{}", userId);
        *//**
         *  这里有个坑，户型名字不是从户型表house_name字段查出，而是从house_common_code字段查出，
         *  是因为后台管理系统输入INSERT时字段插入出错。我尝试推动解决此问题根源，但人言轻微，
         *  不被重视，推不动了还得把我好的代码改错来适配错的代码，特地吐槽，望后人引以为鉴
         *//*
        List<BaseHouse> baseHouseList = designPlanAutoRenderMapper.queryUsedHouseInMyRenderPlan(userId);
        logger.info( "查询用户我的方案中已使用户型完成:UserId:{}, List<BaseHouse>:{}.", userId, GSON.toJson(baseHouseList));

        if (null == baseHouseList || 0 == baseHouseList.size()) {
            logger.warn("查询用户我的方案中已使用户型完成，用户无已使用户型. userId:{}.", userId);
            return null;
        }

        //Init map
        Map<Integer, String> userUsedHouseMap = new HashMap<>(baseHouseList.size());

        baseHouseList.forEach( baseHouse -> userUsedHouseMap.put(baseHouse.getId(), baseHouse.getHouseName()));

        return userUsedHouseMap;*/
		return null;
    }
	@Override
	public void updateAutoRenderTaskStateByBusinessId(Integer businessId) {
		designPlanAutoRenderMapper.updateAutoRenderTaskStateByBusinessId(businessId);
		
	}
	@Override
	public AutoRenderTaskState selectTaskStateByBusinessId(Integer businessId) {
		// TODO Auto-generated method stub
		return designPlanAutoRenderMapper.selectTaskStateByBusinessId(businessId);
	}
	@Override
	public List<AutoRenderTask> getALLTaskByUserId(AutoRenderTask autoRenderTask) {
		// TODO Auto-generated method stub
		return designPlanAutoRenderMapper.getALLReplaceRecordByUserId(autoRenderTask);
	}
	@Override
	public List<AutoRenderTask> getAllTaskStateByUserId(AutoRenderTask autoRenderTask) {
		// TODO Auto-generated method stub
		return designPlanAutoRenderMapper.getAllReplaceRecordByUserId2(autoRenderTask);
	}
}
