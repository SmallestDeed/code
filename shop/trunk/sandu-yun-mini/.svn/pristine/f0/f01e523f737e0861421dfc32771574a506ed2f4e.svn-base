package com.sandu.web.company.controller;

import com.sandu.company.model.query.ProjectCaseQuery;
import com.sandu.company.model.query.ShopListQuery;
import com.sandu.company.model.query.ShopStyleQuery;
import com.sandu.company.model.vo.*;

import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import com.sandu.company.model.query.CompanyShopQuery;
import com.sandu.company.service.CompanyShopService;
import com.sandu.matadata.Page;
import com.sandu.matadata.ResultCode;
import com.sandu.matadata.ResultMessage;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

import javax.servlet.http.HttpServletRequest;

@Api(description = "店铺服务", tags = "CompanyShop")
@RestController
@RequestMapping(value = "/v1/sandu/mini/companyshop")
public class CompanyShopController {
	private static final Logger logger = LoggerFactory.getLogger(CompanyShopController.class.getName());
	@Autowired
	private CompanyShopService companyShopService;
	
	@ApiOperation(value = "店铺详情", response = ResultMessage.class)
    @RequestMapping(value="/detail",produces = "application/json;charset=UTF-8",method=RequestMethod.GET)
	public ResultMessage detail(long id) {
    	ResultMessage result=new ResultMessage();
    	CompanyShopDetailVo detail=companyShopService.get(id);
    	if(detail!=null) {
    		result.setCode(ResultCode.Success);
    		result.setData(detail);
    	}
    	return result;
	}
	
	@ApiOperation(value = "查询店铺信息", response = ResultMessage.class)
    @RequestMapping(value="/list",produces = "application/json;charset=UTF-8",method=RequestMethod.GET)
	public ResultMessage list(CompanyShopQuery query, HttpServletRequest request) {
    	ResultMessage result=new ResultMessage();
        //query.setPlatformType(Integer.valueOf(PlatformType.MiniApp.value()));
		//用户及参数校验获取
    	String platformCode = request.getHeader("Platform-Code");
		if (StringUtils.isEmpty(platformCode)) {
			result.setCode(ResultCode.ParameterError);
			return result;
		}
		Page<CompanyShopVo> page=companyShopService.list(query);
		if (page!=null && page.getList()!=null && page.getList().size()>0) {
			result.setData(page);
			result.setCode(ResultCode.Success);
		}
    	return result;
	}

	@ApiOperation(value = "动态店铺列表信息", response = ResultMessage.class)
	@RequestMapping(value="/dynamicShopList",produces = "application/json;charset=UTF-8",method=RequestMethod.GET)
	public ResultMessage dynamicShopList(CompanyShopQuery query) {
		ResultMessage result=new ResultMessage();
		query.setDisplayType("noPic");//不查询没图片的店铺标志
		Page<CompanyShopVo> page = companyShopService.dynamicShopList(query);
		if (page != null && page.getList() != null && page.getList().size()>0) {
			result.setData(page);
			result.setCode(ResultCode.Success);
		}
		return result;
	}
	
	@ApiOperation(value = "店铺推荐列表", response = ResultMessage.class)
	@RequestMapping(value="/recommendList",produces = "application/json;charset=UTF-8",method=RequestMethod.GET)
	public ResultMessage recommendList() {
		ResultMessage result=new ResultMessage();
		CompanyShopQuery query=new CompanyShopQuery();
		query.setOrderBy("hottest");
		List<CompanyShopVo> lstVo = companyShopService.getRecommendList();
		if (lstVo != null && lstVo.size()>0) {
			result.setData(lstVo);
			result.setCode(ResultCode.Success);
		}
		return result;
	}

	@ApiOperation(value = "店铺人气列表信息", response = ResultMessage.class)
	@RequestMapping(value="/shopPopularityList",produces = "application/json;charset=UTF-8",method=RequestMethod.GET)
	public ResultMessage shopPopularityList(CompanyShopQuery query) {
		ResultMessage result=new ResultMessage();
		query.setDisplayType("noPic");//不查询没图片的店铺标志
		Page<ShopPopularityListVo> page = companyShopService.findShopPopularityList(query);
		if (page != null && page.getList() != null && page.getList().size()>0) {
			result.setData(page);
			result.setCode(ResultCode.Success);
		}
		return result;
	}
	
	@ApiOperation(value = "更新浏览次数", response = ResultMessage.class)
    @RequestMapping(value="/updateVisitCount",produces = "application/json;charset=UTF-8",method=RequestMethod.GET)
	public ResultMessage updateVisitCount(long id) {
    	ResultMessage result=new ResultMessage();
    	boolean isUpdated=companyShopService.updateVisitCount(id);
    	if(isUpdated) {
    		result.setCode(ResultCode.Success);
    	}
    	return result;
	}

	@ApiOperation(value = "获取工程案例列表", response = ResultMessage.class)
	@RequestMapping(value="/projectCaseList",produces = "application/json;charset=UTF-8",method=RequestMethod.GET)
	public ResultMessage projectCaseList(ProjectCaseQuery query) {
		ResultMessage result=new ResultMessage();
		List<ProjectCaseVo> listVo = companyShopService.getShopProjectCaseList(query);
		if (listVo != null && listVo.size()>0) {
			result.setData(listVo);
			result.setCode(ResultCode.Success);
 		}
		return result;
	}


	@ApiOperation(value = "企业店铺风格列表", response = ResultMessage.class)
	@RequestMapping(value="/styleList",produces = "application/json;charset=UTF-8",method=RequestMethod.GET)
	public ResultMessage getShopStyleList(ShopStyleQuery query) {
		ResultMessage result=new ResultMessage();
		if (null==query.getStyleType()){
			result.setCode(ResultCode.ParameterError);
			result.setMessage("参数为空");
		}
		List<CompanyShopStyleListVO> listVo = companyShopService.getShopStyleList(query);
		if (listVo != null && listVo.size()>0) {
			result.setData(listVo);
			result.setCode(ResultCode.Success);
		}
		return result;
	}




}
