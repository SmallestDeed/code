package com.sandu.service.springFestivalActivity.impl.biz;

import com.google.gson.Gson;
import com.sandu.api.base.common.exception.BizException;
import com.sandu.api.base.model.ResPic;
import com.sandu.api.user.model.SysUser;
import com.sandu.api.base.output.SmsVo;
import com.sandu.api.base.service.RedisService;
import com.sandu.api.base.service.ResPicService;
import com.sandu.api.springFestivalActivity.input.GetUserTaskBo;
import com.sandu.api.springFestivalActivity.input.UserInviteRecordBo;
import com.sandu.api.springFestivalActivity.model.*;
import com.sandu.api.springFestivalActivity.output.*;
import com.sandu.api.springFestivalActivity.service.*;
import com.sandu.api.springFestivalActivity.service.biz.FilmTicketActivityService;
import com.sandu.service.springFestivalActivity.aspect.CheckMethodArgs;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Slf4j
@Service("filmTicketActivityService")
public class FilmTicketActivityServiceImpl implements FilmTicketActivityService {
    private static final String CLASS_LOG_PREFIX = "[电影票活动服务]";
    private static final String REDIS_LOCK_PREFIX = "activity_lock:";

    @Autowired
    private RedisService redisService;
    @Autowired
    private ResPicService resPicService;
    @Autowired
    private WxUserTaskService wxUserTaskService;
    @Autowired
    private WxSpringActivityService wxSpringActivityService;
    @Autowired
    private WxUserCardService wxUserCardService;
    @Autowired
    private WxUserInviteRecordService wxUserInviteRecordService;
    @Autowired
    private WxFilmTicketService wxFilmTicketService;

    /**
     * 获取红点标识
     *
     * @param userId     用户ID
     * @param activityId 活动ID
     * @return hasTaskFlag 是否有可领取的任务，activityOverFlag 活动是否结束，cardNumFlag 今日是否还有可领的卡片
     */
    @Override
    @CheckMethodArgs
    public RedPointFlagVo getRedPointFlag(Long userId, Long activityId) {
        RedPointFlagVo flag = new RedPointFlagVo(true, true, true);
        // 有可领取任务或可完成任务
        WxUserTask task = this.getUserTask(userId, activityId);
        if (task != null) {
            flag.setHasTaskFlag(task.getTaskOneStatus() == 0 || task.getTaskTwoStatus() == 0 || task.getTaskThreeStatus() == 0);
        }
        // 活动未结束
        WxSpringActivity activity = wxSpringActivityService.selectByPrimaryKey(activityId);
        if (activity != null) {
            flag.setActivityOverFlag(activity.getFilmRemainNum() > 0 && activity.getIsDeleted() == 0);
        } else {
            log.warn(CLASS_LOG_PREFIX + "当前活动不存在。 activityId:{}", activityId);
            flag.setActivityOverFlag(false);
        }
        // 今日获取拼图数量小于3
        List<WxUserCard> cardList = this.getTodayCard(userId, activityId);
        if (cardList != null && cardList.size() >= 3) {
            flag.setCardNumFlag(false);
        }
        // 返回结果
        return flag;
    }

    /**
     * 助力
     *
     * @param giveUserId    助力的用户ID
     * @param getUser       获得助力的用户
     * @param activityId    活动ID
     * @param isLoginBefore 助力用户是否第一次登陆
     * @return success 助力是否成功, message 助力消息
     */
    @Transactional
    @Override
    @CheckMethodArgs
    public GiveMeFiveVo giveMeFive(Long giveUserId, SysUser getUser, Long activityId, Integer isLoginBefore) {
        byte cardFlag = 1;
        Long cardId = null;
        String remark = null;
        try {
            if (isLoginBefore == 0) {
                if ((cardId = this.addCard(getUser.getId(), activityId, new Byte("3"))) != null) {
                    cardFlag = 0;
                }
            }
            WxUserCard wxUserCard = WxUserCard.builder().userId(getUser.getId()).activityId(activityId).isDeleted(0).build();
            List<WxUserCard> cardList = wxUserCardService.selectSelective(wxUserCard, null, null);
            if (cardList != null && cardList.size() == 12 && cardFlag == 0) {
                this.allotFilmTicket(getUser.getId(), activityId);
            }
        } catch (BizException e) {
            log.warn(CLASS_LOG_PREFIX + e.getMessage());
            remark = e.getMessage();
        }
        this.addInviteRecord(getUser, giveUserId, activityId, isLoginBefore.byteValue(), cardFlag, cardId, remark);
        return new GiveMeFiveVo(isLoginBefore == 0, isLoginBefore == 0 ? "助力成功" : "助力失败，你不是新用户");
    }

    /**
     * 获取邀请好友记录总数
     *
     * @param search 查询参数
     * @return 邀请记录列表
     */
    @Override
    @CheckMethodArgs
    public Integer getInviteRecordCount(UserInviteRecordBo search) {
        WxUserInviteRecord wxUserInviteRecord = WxUserInviteRecord.builder().userId(search.getUserId()).activityId(search.getActivityId()).isDeleted(0).build();
        return wxUserInviteRecordService.selectSelectiveCount(wxUserInviteRecord);
    }

    /**
     * 获取邀请好友记录列表
     *
     * @param search 查询参数
     * @return 邀请记录列表
     */
    @Override
    @CheckMethodArgs
    public List<UserInviteRecordVo> getInviteRecord(UserInviteRecordBo search) {
        WxUserInviteRecord wxUserInviteRecord = WxUserInviteRecord.builder().userId(search.getUserId()).activityId(search.getActivityId()).isDeleted(0).build();
        List<WxUserInviteRecord> list = wxUserInviteRecordService.selectSelective(wxUserInviteRecord, search.getStart(), search.getLimit());
        if (list != null && list.size() > 0) {
            List<UserInviteRecordVo> voList = new ArrayList<>();
            for (WxUserInviteRecord userInviteRecord : list) {
                String cardWord = null;
                if (userInviteRecord.getCardFlag() == 0 && userInviteRecord.getCardId() != null) {
                    WxUserCard wxUserCard = WxUserCard.builder().id(userInviteRecord.getCardId()).build();
                    List<WxUserCard> cardList = wxUserCardService.selectSelective(wxUserCard, 0, 1);
                    if (cardList != null && cardList.size() > 0) {
                        WxUserCard card = cardList.get(0);
                        cardWord = this.getCardWord(card.getCardNumber());
                    }
                }
                voList.add(UserInviteRecordVo.builder()
                        .id(userInviteRecord.getId())
                        .nickName(userInviteRecord.getNickName())
                        .headPic(userInviteRecord.getHeadPic())
                        .inviteDate(userInviteRecord.getGmtCreate())
                        .cardFlag(userInviteRecord.getCardFlag() != null && userInviteRecord.getCardFlag() == 0 ? true : false)
                        .cardWord(cardWord)
                        .remark(userInviteRecord.getRemark())
                        .build());
            }
            return voList;
        }
        return null;
    }

    /**
     * 获取用户任务状态
     *
     * @param user       用户
     * @param activityId 活动ID
     * @return
     */
    @Transactional
    @Override
    @CheckMethodArgs
    public UserTaskVo getUserTaskState(SysUser user, Long activityId) {
        WxUserTask task = this.getUserTask(user.getId(), activityId);
        if (task == null) {
            task = WxUserTask.builder()
                    .activityId(activityId)
                    .userId(user.getId())
                    .openId(user.getOpenId())
                    .taskOneStatus(StringUtils.isBlank(user.getMobile()) ? new Byte("0") : new Byte("2"))
                    .taskOneReceiveTime(StringUtils.isBlank(user.getMobile()) ? null : user.getGmtCreate())
                    .taskOneFinishTime(StringUtils.isBlank(user.getMobile()) ? null : user.getGmtCreate())
                    .taskTwoStatus(StringUtils.isBlank(user.getMobile()) ? new Byte("3") : new Byte("0"))
                    .taskThreeStatus(new Byte("3"))
                    .lotteryRate(5)
                    .isAutoComplete(StringUtils.isBlank(user.getMobile()) ? new Byte("0") : new Byte("1"))
                    .creator(user.getNickName())
                    .gmtCreate(new Date())
                    .modifier(user.getNickName())
                    .gmtModified(new Date())
                    .isDeleted(0)
                    .build();
            int i = wxUserTaskService.insertSelective(task);
            if (i <= 0) {
                throw new BizException("获取任务状态失败。");
            }
        }
        return new UserTaskVo(task.getId(), task.getTaskOneStatus(), task.getTaskTwoStatus(), task.getTaskThreeStatus());
    }

    /**
     * 领取任务
     *
     * @param getUserTaskBo 参数
     * @return
     */
    @Transactional
    @Override
    @CheckMethodArgs
    public Boolean getTask(GetUserTaskBo getUserTaskBo) {
        if (this.check(getUserTaskBo.getUserId(), getUserTaskBo.getActivityId(), getUserTaskBo.getId())) {
            WxUserTask task = wxUserTaskService.selectByPrimaryKey(getUserTaskBo.getId());
            task = task.toBuilder()
                    .taskOneStatus(getUserTaskBo.getTaskOneState())
                    .taskOneReceiveTime(getUserTaskBo.getTaskOneState() == 1 ? new Date() : null)
                    .taskTwoStatus(getUserTaskBo.getTaskTwoState())
                    .taskTwoReceiveTime(getUserTaskBo.getTaskTwoState() == 1 ? new Date() : null)
                    .taskThreeStatus(getUserTaskBo.getTaskThreeState())
                    .taskThreeReceiveTime(getUserTaskBo.getTaskThreeState() == 1 ? new Date() : null)
                    .gmtModified(new Date())
                    .build();
            int i = wxUserTaskService.updateByPrimaryKeySelective(task);
            if (i <= 0) {
                return false;
            }
            return true;
        }
        return false;
    }

    /**
     * 完成任务
     *
     * @param userId       用户ID
     * @param activityId   活动ID
     * @param businessType 业务类型
     * @return
     */
    @Transactional
    @Override
    @CheckMethodArgs
    public Boolean taskDone(Long userId, Long activityId, Byte businessType) {
        WxUserTask task = this.getUserTask(userId, activityId);
        if (task != null) {
            boolean flag = false;
            if (businessType == 0) {
                if (task.getTaskOneStatus() == 1) {
                    task = task.toBuilder().taskOneStatus(new Byte("2")).taskOneFinishTime(new Date()).taskTwoStatus(new Byte("0")).gmtModified(new Date()).build();
                    flag = true;
                }
            } else if (businessType == 1) {
                if (task.getTaskTwoStatus() == 1) {
                    task = task.toBuilder().taskTwoStatus(new Byte("2")).taskTwoFinishTime(new Date()).taskThreeStatus(new Byte("0")).gmtModified(new Date()).build();
                    flag = true;
                }
            } else if (businessType == 2) {
                if (task.getTaskThreeStatus() == 1) {
                    task = task.toBuilder().taskThreeStatus(new Byte("2")).taskThreeFinishTime(new Date()).gmtModified(new Date()).build();
                    flag = true;
                }
            }
            if (flag) {
                int i = wxUserTaskService.updateByPrimaryKeySelective(task);
                if (i > 0) {
                    try {
                        Long cardId = this.addCard(userId, activityId, businessType);
                        WxUserCard wxUserCard = WxUserCard.builder().userId(userId).activityId(activityId).isDeleted(0).build();
                        List<WxUserCard> cardList = wxUserCardService.selectSelective(wxUserCard, null, null);
                        if (cardList != null && cardList.size() == 12 && cardId != null) {
                            this.allotFilmTicket(userId, activityId);
                        }
                    } catch (BizException e) {
                        log.warn(CLASS_LOG_PREFIX + e.getMessage());
                    }
                    return true;
                }
            }
            return false;
        } else {
            throw new BizException("数据异常");
        }
    }

    /**
     * 查询拼图页面数据
     *
     * @param user       用户
     * @param activityId 活动ID
     * @return
     */
    @Override
    @CheckMethodArgs
    public CardPageVo getCardPageVo(SysUser user, Long activityId) {
        // 获得的卡片数
        WxUserCard wxUserCard = WxUserCard.builder().userId(user.getId()).activityId(activityId).isDeleted(0).build();
        List<WxUserCard> cardList = wxUserCardService.selectSelective(wxUserCard, null, null);
        // 是否剩余电影票
        WxSpringActivity activity = wxSpringActivityService.selectByPrimaryKey(activityId);
        if (activity == null || activity.getIsDeleted() == 1) {
            log.warn(CLASS_LOG_PREFIX + "活动不存在，activityId:{}", activityId);
            throw new BizException("活动不存在");
        }
        // 是否绑定了手机号
        return new CardPageVo(cardList == null ? 0 : cardList.size(), activity.getFilmRemainNum() > 0, StringUtils.isNotBlank(user.getMobile()));
    }

    /**
     * 获取电影票信息
     *
     * @param userId     用户ID
     * @param activityId 活动ID
     * @return
     */
    @Override
    @CheckMethodArgs
    public FilmTicketVo getFilmTicket(Long userId, Long activityId) {
        WxFilmTicket wxFilmTicket = WxFilmTicket.builder().userId(userId).isDeleted(0).build();
        List<WxFilmTicket> filmList = wxFilmTicketService.selectSelective(wxFilmTicket);
        if (filmList == null && filmList.size() <= 0) {
            return null;
        }
        return new FilmTicketVo(filmList.get(0).getTicketCode());
    }

    /**
     * 增加中奖几率
     *
     * @param userId     用户ID
     * @param activityId 活动ID
     * @return
     */
    @Override
    @CheckMethodArgs
    public Integer increaseLotteryRate(Long userId, Long activityId) {
        WxUserTask task = this.getUserTask(userId, activityId);
        task.setLotteryRate(task.getLotteryRate() + 1);
        int i = wxUserTaskService.updateByPrimaryKeySelective(task);
        if (i <= 0) {
            throw new BizException("增加中奖概率失败");
        }
        return task.getLotteryRate();
    }

    /**
     * 校验验证码
     *
     * @param phone 手机号
     * @param code  验证码
     * @return
     */
    @Override
    @CheckMethodArgs
    public Boolean checkPermission(String phone, String code) {
        String jsonValue = redisService.getMap(SmsVo.REDIS_SMS_CODE_KEY, phone);
        if (StringUtils.isBlank(jsonValue)) {
            throw new BizException("请先获取验证码");
        }
        SmsVo smsVo = new Gson().fromJson(jsonValue, SmsVo.class);
        if (smsVo == null) {
            throw new BizException("请先获取验证码");
        }
        if (System.currentTimeMillis() - smsVo.getSendTime() > SmsVo.SMS_CODE_VALID_TIME) {
            throw new BizException("验证码超时");
        }
        if (!code.equals(smsVo.getCode())) {
            return false;
        }
        try {
            redisService.delMap(SmsVo.REDIS_SMS_CODE_KEY, phone);
        } catch (Exception e) {
            log.error(CLASS_LOG_PREFIX + "校验用户验证码，删除缓存中的key异常：{}", e);
        }
        return true;
    }

    /**
     * 查询今日获得的卡片
     *
     * @param userId     用户ID
     * @param activityId 活动ID
     * @return
     */
    private List<WxUserCard> getTodayCard(Long userId, Long activityId) {
        WxUserCard wxUserCard = WxUserCard.builder().userId(userId).activityId(activityId).isDeleted(0).build();
        List<WxUserCard> cardList = wxUserCardService.selectSelective(wxUserCard, null, null);
        if (cardList != null) {
            List<WxUserCard> todayCardList = this.getTodayCard(cardList);
            if (todayCardList != null && todayCardList.size() > 3) {
                log.warn(CLASS_LOG_PREFIX + "用户今天获得的卡片大于3张。 userId:{},activityId:{}", userId, activityId);
            }
            return todayCardList;
        }
        return null;
    }

    /**
     * 获取今日获得的卡片
     *
     * @param cardList 用户获得的所有卡片集合
     * @return
     */
    private List<WxUserCard> getTodayCard(List<WxUserCard> cardList) {
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        if (cardList != null) {
            List<WxUserCard> todayCardList = cardList.stream()
                    .filter(card -> format.format(new Date()).equals(format.format(card.getCardDate())) && card.getIsDeleted() == 0)
                    .collect(Collectors.toList());
            return todayCardList;
        }
        return null;
    }

    /**
     * 查询用户领取的任务
     *
     * @param userId     用户ID
     * @param activityId 活动ID
     * @return
     */
    private WxUserTask getUserTask(Long userId, Long activityId) {
        WxUserTask wxUserTask = WxUserTask.builder().userId(userId).activityId(activityId).isDeleted(0).build();
        List<WxUserTask> userTaskList = wxUserTaskService.selectSelective(wxUserTask);
        if (userTaskList != null) {
            if (userTaskList.size() > 1) {
                log.warn(CLASS_LOG_PREFIX + "查出的用户任务表结果大于1条。 userId:{},activityId", userId, activityId);
            }
            return userTaskList.get(0);
        }
        return null;
    }

    /**
     * 获取卡片
     *
     * @param userId       用户ID
     * @param activityId   活动ID
     * @param businessType 获得途径(0-绑定手机号;1-装修我家;2-产品替换;3-邀请好友)
     * @return 卡片ID
     */
    private Long addCard(Long userId, Long activityId, Byte businessType) {
        if (this.check(userId, activityId)) {
            // 加锁防并发问题
            String key = REDIS_LOCK_PREFIX + userId + "," + activityId;
            String value = UUID.randomUUID().toString();
            if (this.getLock(key, value, 5, 2, 120)) {
                if (this.check(userId, activityId)) {
                    Date date = new Date();
                    WxUserCard wxUserCard = WxUserCard.builder().userId(userId).activityId(activityId).isDeleted(0).build();
                    List<WxUserCard> cardList = wxUserCardService.selectSelective(wxUserCard, null, null);
                    wxUserCard = WxUserCard.builder()
                            .activityId(activityId)
                            .userId(userId)
                            .businessType(businessType)
                            .cardNumber(cardList == null ? 1 : cardList.size() + 1)
                            .cardDate(date)
                            .cardStatus(new Byte("0"))
                            .creator(userId + "")
                            .gmtCreate(date)
                            .modifier(userId + "")
                            .gmtModified(date)
                            .isDeleted(0)
                            .build();
                    int i = wxUserCardService.insertSelective(wxUserCard);
                    if (i <= 0) {
                        return null;
                    }
                    this.releaseLock(key, value);
                    return wxUserCard.getId();
                }
            }
        }
        return null;
    }

    /**
     * 分配电影票
     *
     * @param userId     用户ID
     * @param activityId 活动ID
     * @return
     */
    private boolean allotFilmTicket(Long userId, Long activityId) {
        WxFilmTicket ticket = wxFilmTicketService.getEmptyTicket(null);
        if (ticket == null) {
            log.warn(CLASS_LOG_PREFIX + "活动已结束，activityId:{}", activityId);
            throw new BizException("活动已结束");
        }
        String key = REDIS_LOCK_PREFIX + "filmTicketLock";
        String value = UUID.randomUUID().toString();
        if (this.getLock(key, value, 5, 1, 100)) {
            ticket = wxFilmTicketService.getEmptyTicket(null);
            if (ticket == null) {
                log.warn(CLASS_LOG_PREFIX + "活动已结束，activityId:{}", activityId);
                throw new BizException("活动已结束");
            }
            ticket.setUserId(userId);
            ticket.setAllotTime(new Date());
            ticket.setTicketStatus(new Byte("1"));
            ticket.setModifier(userId + "");
            ticket.setGmtModified(new Date());
            int i = wxFilmTicketService.updateByPrimaryKeySelective(ticket);
            if (i > 0) {
                WxSpringActivity wxSpringActivity = wxSpringActivityService.selectByPrimaryKey(activityId);
                if (wxSpringActivity.getIsDeleted() == 0) {
                    log.warn(CLASS_LOG_PREFIX + "活动不存在，activityId:{}", activityId);
                    throw new RuntimeException("活动不存在");
                }
                wxSpringActivity.setFilmRemainNum(wxSpringActivity.getFilmRemainNum() - 1);
                wxSpringActivity.setFilmUseNum(wxSpringActivity.getFilmUseNum() + 1);
                i = wxSpringActivityService.updateByPrimaryKeySelective(wxSpringActivity);
                if (i == 0) {
                    throw new RuntimeException("更新春节活动信息失败。");
                }
            }
            this.releaseLock(key, value);
            return true;
        }
        return false;
    }

    /**
     * 添加邀请记录
     *
     * @param inviteUser   邀请人
     * @param inviteUserId 被邀请人ID
     * @param activityId   活动ID
     * @param status       是否有效（邀请的是不是新用户）
     * @param cardFlag     是否获得卡片
     * @param cardId       卡片ID
     * @param remark       备注
     * @return
     */
    private void addInviteRecord(SysUser inviteUser, long inviteUserId, long activityId, byte status, byte cardFlag, Long cardId, String remark) {
        ResPic pic = null;
        if (inviteUser.getPicId() != null) {
            pic = resPicService.selectByPrimaryKey(inviteUser.getPicId());
        }
        WxUserInviteRecord wxUserInviteRecord = WxUserInviteRecord.builder()
                .activityId(activityId)
                .openId(inviteUser.getOpenId())
                .nickName(inviteUser.getNickName())
                .headPic(pic == null || pic.getIsDeleted() == 1 ? null : pic.getPicPath())
                .userId(inviteUser.getId())
                .inviteUserId(inviteUserId)
                .status(status)
                .cardFlag(cardFlag)
                .cardId(cardId)
                .remark(remark)
                .creator(inviteUser.getNickName())
                .gmtCreate(new Date())
                .modifier(inviteUser.getNickName())
                .gmtModified(new Date())
                .isDeleted(0)
                .build();
        wxUserInviteRecordService.insert(wxUserInviteRecord);
    }

    /**
     * 校验是否有获得卡片资格
     *
     * @param userId     用户ID
     * @param activityId 活动ID
     * @return
     */
    private boolean check(Long userId, Long activityId) {
        // 活动是否已经结束
        WxSpringActivity activity = wxSpringActivityService.selectByPrimaryKey(activityId);
        if (activity != null) {
            if (activity.getFilmRemainNum() <= 0) {
                log.warn(CLASS_LOG_PREFIX + "活动已结束，activityId:{}", activityId);
                throw new BizException("活动已结束");
            }
        } else {
            log.warn(CLASS_LOG_PREFIX + "当前活动不存在，activityId:{}", activityId);
            throw new BizException("当前活动不存在");
        }
        // 是否已经获得影票
        WxFilmTicket wxFilmTicket = WxFilmTicket.builder().userId(userId).isDeleted(0).build();
        List<WxFilmTicket> filmList = wxFilmTicketService.selectSelective(wxFilmTicket);
        if (filmList != null && filmList.size() > 0) {
            throw new BizException("你已经获取过电影票了");
        }
        // 获得总卡片数
        WxUserCard wxUserCard = WxUserCard.builder().userId(userId).activityId(activityId).isDeleted(0).build();
        List<WxUserCard> cardList = wxUserCardService.selectSelective(wxUserCard, null, null);
        if (cardList != null && cardList.size() >= 12) {
            throw new BizException("已获得12张拼图");
        }
        // 今日获得卡片数
        cardList = this.getTodayCard(cardList);
        if (cardList != null && cardList.size() >= 3) {
            throw new BizException("每日最多获得3张拼图");
        }
        return true;
    }

    /**
     * 校验是否有领取任务资格
     *
     * @param userId     用户ID
     * @param activityId 活动ID
     * @param taskId     用户任务ID
     * @return
     */
    private boolean check(Long userId, Long activityId, Long taskId) {
        if (this.check(userId, activityId)) {
            // 今天是否完成过任务
            WxUserTask task = wxUserTaskService.selectByPrimaryKey(taskId);
            if (task == null || task.getIsDeleted() == 1) {
                log.warn(CLASS_LOG_PREFIX + "查询任务为空，wxUserTaskId:{}", taskId);
                throw new BizException("数据异常");
            }
            if ((task.getTaskOneStatus() != null && task.getTaskOneStatus() == 1) ||
                    (task.getTaskOneStatus() != null && task.getTaskOneStatus() == 1) ||
                    (task.getTaskOneStatus() != null && task.getTaskOneStatus() == 1)) {
                throw new BizException("已有正在进行的任务");
            }
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            if ((task.getTaskOneFinishTime() != null && dateFormat.format(new Date()).equals(dateFormat.format(task.getTaskOneFinishTime()))) ||
                    (task.getTaskTwoFinishTime() != null && dateFormat.format(new Date()).equals(dateFormat.format(task.getTaskTwoFinishTime()))) ||
                    (task.getTaskThreeFinishTime() != null && dateFormat.format(new Date()).equals(dateFormat.format(task.getTaskThreeFinishTime())))) {
                throw new BizException("今天已经完成过任务了，明天再来吧");
            }
            return true;
        }
        return false;
    }

    /**
     * 根据卡片数字获取卡片文字
     *
     * @param cardNumber 卡片数字标识
     * @return
     */
    private String getCardWord(Integer cardNumber) {
        if (cardNumber != null) {
            switch (cardNumber) {
                case 1:
                    return "随";
                case 2:
                    return "选";
                case 3:
                    return "网";
                case 4:
                    return "拜";
                case 5:
                    return "大";
                case 6:
                    return "年";
                case 7:
                    return "免";
                case 8:
                    return "费";
                case 9:
                    return "看";
                case 10:
                    return "贺";
                case 11:
                    return "岁";
                case 12:
                    return "片";
            }
        }
        return null;
    }

    /**
     * 获取锁
     *
     * @param key   锁标识
     * @param value 释放锁的钥匙
     * @param retry 重试次数
     * @param time  持有锁的最大时间，单位s
     * @param wait  重试间隔时间，单位ms
     * @return
     */
    private boolean getLock(String key, String value, int retry, long time, long wait) {
        int retryNum = 0;
        while (!redisService.set(key, value, "NX", "EX", time)) {
            retryNum++;
            if (retryNum > retry) {
                log.warn(CLASS_LOG_PREFIX + "获取锁超时!");
                throw new RuntimeException("超时啦，请重新试试！");
            }
            try {
                Thread.sleep(wait);
            } catch (InterruptedException e) {
                log.error(CLASS_LOG_PREFIX + "获取锁异常!", e);
                throw new RuntimeException("出错啦，请重新试试！");
            }
        }
        return true;
    }

    /**
     * 释放锁
     *
     * @param key   锁标识
     * @param value 释放锁的钥匙
     */
    private void releaseLock(String key, String value) {
        if (value.equals(redisService.get(key))) {
            redisService.del(key);
        }
    }
}
