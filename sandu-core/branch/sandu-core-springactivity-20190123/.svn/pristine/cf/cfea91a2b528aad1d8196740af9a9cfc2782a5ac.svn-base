package com.sandu.web.springFestivalActivity;

import com.sandu.api.base.common.ResponseEnvelope;
import com.sandu.api.springFestivalActivity.input.UserInviteRecordBo;
import com.sandu.api.springFestivalActivity.model.WxFilmTicket;
import com.sandu.api.springFestivalActivity.output.CardPageVo;
import com.sandu.api.springFestivalActivity.output.FilmTicketVo;
import com.sandu.api.springFestivalActivity.output.GiveMeFiveVo;
import com.sandu.api.springFestivalActivity.service.WxFilmTicketService;
import com.sandu.api.springFestivalActivity.service.biz.FilmTicketActivityService;
import com.sandu.api.user.model.SysUser;
import com.sandu.api.user.service.SysUserService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@Slf4j
@RequestMapping("/v1/core/filmTicketActivity")
public class FilmTicketActivityController {
    private static final String CLASS_LOG_PREFIX = "[春节活动-电影票]";
    @Autowired
    private FilmTicketActivityService filmTicketActivityService;
    @Autowired
    private SysUserService sysUserService;

    @Autowired
    private WxFilmTicketService wxFilmTicketService;

    @GetMapping("/redPoint")
    public ResponseEnvelope getRedPointFlag(@RequestParam("activityId") Long activityId, SysUser sysUser) {
        return new ResponseEnvelope(true, filmTicketActivityService.getRedPointFlag(sysUser.getId(), activityId));
    }

    @PostMapping("/giveMeFive")
    public ResponseEnvelope giveMeFive(@RequestParam("inviteUserId") Long inviteUserId,
                                       @RequestParam("activityId") Long activityId,
                                       @RequestParam("isLoginBefore") Integer isLoginBefore,
                                       SysUser sysUser) {
        SysUser inviteUser = sysUserService.get(inviteUserId.intValue());
        GiveMeFiveVo res = filmTicketActivityService.giveMeFive(sysUser.getId(), inviteUser, activityId, isLoginBefore);
        if (res == null) {
            return new ResponseEnvelope(false, "助力失败");
        }
        return new ResponseEnvelope(res.getSuccess(), res.getMessage());
    }

    @GetMapping("/getInviteRecord")
    public ResponseEnvelope getInviteRecord(@RequestParam("activityId") Long activityId,
                                            @RequestParam("pageNo") Integer pageNo,
                                            @RequestParam("pageSize") Integer pageSize,
                                            SysUser sysUser) {
        UserInviteRecordBo bo = new UserInviteRecordBo(sysUser.getId(), activityId, pageNo, pageSize);
        Integer count = filmTicketActivityService.getInviteRecordCount(bo);
        if (count == null || count == 0) {
            return new ResponseEnvelope(false, "无邀请记录");
        }
        return new ResponseEnvelope(true, count, filmTicketActivityService.getInviteRecord(bo));
    }

    @GetMapping("/getUserTaskState")
    public ResponseEnvelope getUserTaskState(@RequestParam("activityId") Long activityId, SysUser sysUser) {
        return new ResponseEnvelope(true, filmTicketActivityService.getUserTaskState(sysUser, activityId));
    }

    @PostMapping("/doTask")
    public ResponseEnvelope doTask(@RequestParam("activityId") Long activityId, @RequestParam("id") Long id, SysUser sysUser) {
        boolean flag = filmTicketActivityService.doTask(sysUser.getId(), activityId, id);
        return new ResponseEnvelope(flag, flag ? "领取任务成功" : "领取任务失败");
    }

    @PostMapping("/doneTask")
    public ResponseEnvelope doneTask(@RequestParam("activityId") Long activityId, SysUser sysUser) {
        String word = filmTicketActivityService.doneTask(sysUser.getId(), activityId);
        return new ResponseEnvelope(word == null, word == null ? "完成任务成功" : "完成任务失败", word);
    }

    @GetMapping("/cards")
    public ResponseEnvelope getCardPage(@RequestParam("activityId") Long activityId, SysUser sysUser) {
        CardPageVo vo = filmTicketActivityService.getCardPageVo(sysUser, activityId);
        return new ResponseEnvelope(vo == null ? false : true, vo);
    }

    @GetMapping("/getFilmTicket")
    public ResponseEnvelope getFilmTicket(@RequestParam("activityId") Long activityId, SysUser sysUser) {
        FilmTicketVo ticket = filmTicketActivityService.getFilmTicket(sysUser, activityId);
        return new ResponseEnvelope(ticket == null ? false : true, ticket == null ? "你没有获得电影票" : ticket);
    }

    @PostMapping("/increaseLotteryRate")
    public ResponseEnvelope increaseLotteryRate(@RequestParam("activityId") Long activityId, SysUser sysUser) {
        Integer i = filmTicketActivityService.increaseLotteryRate(sysUser.getId(), activityId);
        return new ResponseEnvelope(i != null, i);
    }

    @PostMapping("/bindingMobile")
    public ResponseEnvelope bindingMobile(@RequestParam("phone") String phone,
                                          @RequestParam("code") String code,
                                          @RequestParam("activityId") Long activityId,
                                          SysUser sysUser) {
        boolean flag = filmTicketActivityService.checkPermission(phone, code);
        if (flag) {
            sysUser.setMobile(phone);
            int i = sysUserService.update(sysUser);
            if (i <= 0) {
                return new ResponseEnvelope(false, "绑定手机号失败");
            }
            String word = filmTicketActivityService.doneTask(sysUser.getId(), activityId);
            return new ResponseEnvelope(true, "绑定手机号成功", word);
        }
        return new ResponseEnvelope(false, "验证码错误");
    }

    @GetMapping("/{activityId}/ticket/fetched/users/{limit}")
    public ResponseEnvelope<SysUser> listUsers(@PathVariable("activityId") Long activityId, @PathVariable("limit") Integer limit) {
        List<SysUser> users;
        List<WxFilmTicket> notEmptyTicketList = wxFilmTicketService.getNotEmptyTicketList(activityId, limit);
        users = notEmptyTicketList.stream().map(it -> it.getUserId().intValue()).map(sysUserService::get).collect(Collectors.toList());
        if (users.isEmpty()) {
            users = wxFilmTicketService.fetchUsers();
        }
        return new ResponseEnvelope(true, 10, users);
    }

}
