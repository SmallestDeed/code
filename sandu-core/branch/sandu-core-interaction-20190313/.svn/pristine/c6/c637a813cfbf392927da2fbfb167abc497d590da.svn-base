package com.sandu.service.base.impl;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.sandu.api.base.common.constant.InteractiveZoneConstant;
import com.sandu.api.base.input.InteractiveZoneReplyAdd;
import com.sandu.api.base.input.InteractiveZoneReplyQuery;
import com.sandu.api.base.model.InteractiveZoneReply;
import com.sandu.api.base.service.InteractiveZoneReplyService;
import com.sandu.api.base.service.InteractiveZoneTopicService;
import com.sandu.api.user.model.SysUser;
import com.sandu.service.base.dao.InteractiveZoneReplyMapper;
import com.sandu.system.service.NodeInfoBizService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import static com.sandu.node.constant.NodeInfoConstant.SYSTEM_DICTIONARY_DETAIL_TYPE_LIKE;

/**
 * @ClassName: InteractiveZoneReplyServiceImpl
 * @Auther: gaoj
 * @Date: 2019/3/13 17:30
 * @Description:
 * @Version 1.0
 */
@Service("interactiveZoneReplyService")
@Slf4j
public class InteractiveZoneReplyServiceImpl implements InteractiveZoneReplyService {

    private final String CLASS_LOG_PREFIX = "【互动区主题业务层】";

    @Autowired
    private InteractiveZoneReplyMapper interactiveZoneReplyMapper;
    @Autowired
    private InteractiveZoneTopicService interactiveZoneTopicService;

    @Autowired
    private NodeInfoBizService nodeInfoBizService;


    @Override
    public Integer add(InteractiveZoneReplyAdd interactiveZoneReplyAdd, SysUser sysUser) {
        InteractiveZoneReply interactiveZoneReply = new InteractiveZoneReply();
        BeanUtils.copyProperties(interactiveZoneReplyAdd, interactiveZoneReply);
        Integer blockTypeValue = interactiveZoneTopicService.getBlockTypeValue(interactiveZoneReplyAdd.getBlockTypeValueKey());
        interactiveZoneReply.setBlockType(blockTypeValue);
        this.addCommonParam(interactiveZoneReply, sysUser);

        Integer id = interactiveZoneReplyMapper.insertSelective(interactiveZoneReply);
        if (id > 0) {
            Integer virtualLikeNum = interactiveZoneReplyAdd.getVirtualLikeNum();
            if (null != virtualLikeNum) {
                nodeInfoBizService.updateNodeInfoDetailValue(interactiveZoneReplyAdd.getId().intValue(),
                        InteractiveZoneConstant.INTERACTIVE_ZONE_REPLY_NODE_TYPE_VALUE,
                        InteractiveZoneConstant.VIRTUAL_LIKE_VALUE, virtualLikeNum);
            }
        }
        return id;
    }

    @Override
    public Integer update(InteractiveZoneReplyAdd interactiveZoneReplyAdd, SysUser sysUser) {
        InteractiveZoneReply interactiveZoneReply = new InteractiveZoneReply();
        BeanUtils.copyProperties(interactiveZoneReplyAdd, interactiveZoneReply);
        interactiveZoneReply.setModifier(sysUser.getId() + "");
        interactiveZoneReply.setGmtModified(new Date());

        Integer result = interactiveZoneReplyMapper.updateByPrimaryKeySelective(interactiveZoneReply);
        if (1 == result) {
            //虚拟点赞数不为空的话，就修改虚拟点赞数
            Integer virtualLikeNum = interactiveZoneReplyAdd.getVirtualLikeNum();
            if (null != virtualLikeNum) {
                nodeInfoBizService.updateNodeInfoDetailValue(interactiveZoneReplyAdd.getId().intValue(),
                        InteractiveZoneConstant.INTERACTIVE_ZONE_REPLY_NODE_TYPE_VALUE,
                        InteractiveZoneConstant.VIRTUAL_LIKE_VALUE, virtualLikeNum);
            }
        }
        return result;
    }

    @Override
    public PageInfo<InteractiveZoneReply> query(InteractiveZoneReplyQuery query) {
        PageHelper.startPage(query.getPage(), query.getLimit());
        PageInfo<InteractiveZoneReply> pageInfo = new PageInfo<>(interactiveZoneReplyMapper.queryBiz(query));

        List<InteractiveZoneReply> userReviews = pageInfo.getList();
        //处理点赞数
        for (InteractiveZoneReply it : userReviews) {
            Integer nodeId = nodeInfoBizService.registerNodeInfo(it.getId().intValue(), (byte) 8);
            Map<String, Object> nodeData = nodeInfoBizService.getNodeData(nodeId, SYSTEM_DICTIONARY_DETAIL_TYPE_LIKE, -1);
            int tmp = Integer.valueOf(Objects.toString(nodeData.get("setLikeNum"), "0")) +
                    Integer.valueOf(Objects.toString(nodeData.get("setVirtualLikeNum"), "0"));
            it.setLikeCount(tmp);
        }


        return pageInfo;
    }

    private void addCommonParam(InteractiveZoneReply interactiveZoneReply, SysUser sysUser) {
        Long userId = sysUser.getId();
        interactiveZoneReply.setCreator(userId + "");
        interactiveZoneReply.setModifier(userId + "");
        Date date = new Date();
        interactiveZoneReply.setGmtCreate(date);
        interactiveZoneReply.setGmtModified(date);
        interactiveZoneReply.setIsDeleted(0);
    }
}
