package com.sandu.web.fullhouse.controller;

import com.google.gson.Gson;
import com.sandu.api.base.common.LoginUser;
import com.sandu.api.base.common.ResponseEnvelope;
import com.sandu.api.fullhouse.common.exception.BizException;
import com.sandu.api.fullhouse.input.*;
import com.sandu.api.fullhouse.output.DesignPlanStyleVO;
import com.sandu.api.fullhouse.output.DesignPlanVO;
import com.sandu.api.fullhouse.output.FullHouseDesignPlanEditPageVO;
import com.sandu.api.fullhouse.output.FullHouseDesignPlanVO;
import com.sandu.api.fullhouse.service.biz.FullHouseDesignPlanBizService;
import com.sandu.common.LoginContext;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.log4j.Log4j2;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Log4j2
@RestController
@RequestMapping("/v1/core/fullHouse")
@Api(tags = "全屋方案接口")
public class FullHouseDesignPlanController {
    @Autowired
    private FullHouseDesignPlanBizService fullHouseDesignPlanBizService;
    private static final Gson gson = new Gson();

    @ApiOperation(value = "查询可以添加到全屋方案的单空间方案组", response = ResponseEnvelope.class)
    @GetMapping("/designPlanGroup")
    public ResponseEnvelope selectDesignPlanGroup(@Validated DesignPlanQuery query, BindingResult bindingResult){
        // 校验参数
        if (bindingResult.hasErrors()){
            String errorMessages = getErrorMessages(bindingResult);
            return new ResponseEnvelope(false, errorMessages);
        }
        // 获取当前登录用户
        LoginUser user = LoginContext.getLoginUser(LoginUser.class);
        if (user == null){
            return new ResponseEnvelope(false,"用户未登录");
        }
        log.info("当前登录用户id:{}",user.getId());
        query.setUserId(user.getId());
        // 查询当前用户可用于制作全屋方案的方案总数
        // 可用于全屋方案规则：1.当前用户制作的；2.已审核通过的推荐方案
        Integer count = fullHouseDesignPlanBizService.selectGroupPrimaryDesignPlanCount(query);
        log.info("查出的方案总数:{}", count);
        if (count <= 0){
            return new ResponseEnvelope(true,"未找到符合条件的方案");
        }
        // 查询方案
        List<DesignPlanVO> designPlanVOList = fullHouseDesignPlanBizService.selectGroupPrimaryDesignPlan(query);
        log.info("实际查出的方案数量:{}", designPlanVOList.size());
        return new ResponseEnvelope(true, designPlanVOList);
    }

    @ApiOperation(value = "查询任意空间类型下所有的方案风格", response = ResponseEnvelope.class)
    @GetMapping("/fullHouseStyle")
    public ResponseEnvelope selectDesignPlanStyle(@Validated DesignPlanStyleQuery query, BindingResult bindingResult){
        // 校验参数
        if (bindingResult.hasErrors()){
            String errorMessages = getErrorMessages(bindingResult);
            return new ResponseEnvelope(false, errorMessages);
        }
        log.info("查询的空间类型:{}", query.getSpaceType());
        // 查询当前空间类型的所有方案风格
        List<DesignPlanStyleVO> designPlanStyleVOList = fullHouseDesignPlanBizService.selectDesignPlanStyle(query);
        return new ResponseEnvelope(true, designPlanStyleVOList);
    }

    /*@ApiOperation(value = "查询单空间方案详情(组合方案为主方案的详情)")
    @GetMapping("/designPlanDetail")
    public ResponseEnvelope selectDesignPlanDetail(){
        return null;
    }*/

    @ApiOperation(value = "查询全屋方案列表", response = ResponseEnvelope.class)
    @PostMapping("/fullHouseList")
    public ResponseEnvelope selectFullHouseDesignPlanList(@Validated FullHouseDesignPlanQuery query,
                                                          String msgId,
                                                          BindingResult bindingResult){
        // 校验参数
        if (bindingResult.hasErrors()){
            String errorMessages = getErrorMessages(bindingResult);
            return new ResponseEnvelope(false, errorMessages);
        }
        // 获取当前登录用户
        LoginUser user = LoginContext.getLoginUser(LoginUser.class);
        if (user == null){
            return new ResponseEnvelope(false,"用户未登录");
        }
        log.info("当前登录用户id:{}",user.getId());
        query.setUserId(user.getId());
        // 查找当前用户制作的符合查询条件的全屋方案总数
        int count = fullHouseDesignPlanBizService.selectFullHouseDesignPlanCount(query);
        log.info("查询出的全屋方案总数,count:{}", count);
        if (count <= 0){
            return new ResponseEnvelope(true, "未找到符合条件的全屋方案");
        }
        // 查找当前用户制作的符合查询条件的全屋方案列表
        List<FullHouseDesignPlanVO> fullHouseDesignPlanVOList = fullHouseDesignPlanBizService.selectFullHouseDesignPlan(query);
        log.info("实际查出的方案数量:{}", fullHouseDesignPlanVOList.size());
        ResponseEnvelope responseEnvelope = new ResponseEnvelope(true, fullHouseDesignPlanVOList);
        responseEnvelope.setMsgId(msgId);
        return responseEnvelope;
    }

    @ApiOperation(value = "制作全屋方案", response = ResponseEnvelope.class)
    @PostMapping("/createFullHouse")
    public ResponseEnvelope createFullHouseDesignPlan(@Validated FullHouseDesignPlanAdd fullHouseDesignPlanAdd, BindingResult bindingResult){
        // 校验参数
        if (bindingResult.hasErrors()){
            String errorMessages = getErrorMessages(bindingResult);
            return new ResponseEnvelope(false, errorMessages);
        }
        // 获取当前登录用户
        LoginUser user = LoginContext.getLoginUser(LoginUser.class);
        if (user == null){
            return new ResponseEnvelope(false,"用户未登录");
        }
        log.info("当前登录用户id:{}",user.getId());
        // 制作全屋方案
        log.info("制作全屋方案,fullHouseDesignPlanAdd:{}", gson.toJson(fullHouseDesignPlanAdd));
        try {
            fullHouseDesignPlanBizService.createFullHouseDesignPlan(fullHouseDesignPlanAdd, user.getId());
        } catch (BizException e) {
            log.error(e);
            return new ResponseEnvelope(false, e.getMessage());
        }
        return new ResponseEnvelope(true, "制作全屋方案成功");
    }

    @ApiOperation(value = "删除全屋方案", response = ResponseEnvelope.class)
    @PutMapping("/deleteFullHouse")
    public ResponseEnvelope deleteFullHouseDesignPlan(@RequestParam("id") Integer id){
        try {
            log.info("删除全屋方案，id:{}",id);
            fullHouseDesignPlanBizService.deleteFullHouseDesignPlan(id);
        } catch (BizException e) {
            log.error(e);
            return new ResponseEnvelope(false, e.getMessage());
        }
        return new ResponseEnvelope(true, "删除全屋方案成功");
    }

    @ApiOperation(value = "查询全屋方案更换方案时显示的单空间方案列表", response = ResponseEnvelope.class)
    @GetMapping("/fullHouseDetailList")
    public ResponseEnvelope selectFullHouseDesignPlanDetailList(@RequestParam("id") Integer id){
        if (id == null || id <= 0){
            return new ResponseEnvelope(false, "全屋方案id不合法");
        }
        log.info("跟换全屋方案中的单空间方案，全屋方案ID:{}", id);
        FullHouseDesignPlanEditPageVO vo = fullHouseDesignPlanBizService.selectFullHouseDesignPlanDetailList(id);
        log.info("跟换全屋方案页面，单空间方案列表查询结果:{}", gson.toJson(vo));
        return new ResponseEnvelope(true, vo);
    }

    @ApiOperation(value = "更新全屋方案信息", response = ResponseEnvelope.class)
    @PutMapping("/updateFullHouseDesignPlan")
    public ResponseEnvelope updateFullHouseDesignPlan(@Validated FullHouseDesignPlanUpdate update, BindingResult bindingResult){
        // 校验参数
        if (bindingResult.hasErrors()){
            String errorMessages = getErrorMessages(bindingResult);
            return new ResponseEnvelope(false, errorMessages);
        }
        log.info("更新全屋方案的方案详情,参数update:{}", gson.toJson(update));
        try {
            fullHouseDesignPlanBizService.updateFullHouseDesignPlan(update);
        } catch (BizException e) {
            log.error(e);
            return new ResponseEnvelope(false, e.getMessage());
        }
        return new ResponseEnvelope(true, "更新成功");
    }

    /**
     * created by zhangchengda
     * 2018/8/16 12:32
     * 获得所有错误信息拼接的字符串
     * @param bindingResult
     * @return 所有错误信息拼接的字符串
     */
    private String getErrorMessages(BindingResult bindingResult){
        List<ObjectError> errors = bindingResult.getAllErrors();
        StringBuilder stringBuilder = new StringBuilder();
        errors.forEach(error -> {
            stringBuilder.append(error.getDefaultMessage())
                    .append(";");
        });
        return stringBuilder.toString();
    }
}
