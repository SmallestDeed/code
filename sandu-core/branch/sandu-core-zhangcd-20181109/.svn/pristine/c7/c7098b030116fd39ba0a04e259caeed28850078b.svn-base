package com.sandu.service.fullhouse.impl.biz;

import com.google.gson.Gson;
import com.sandu.api.base.common.exception.BizExceptionEE;
import com.sandu.api.base.model.BaseBrand;
import com.sandu.api.base.model.BaseProductStyle;
import com.sandu.api.base.model.SysUser;
import com.sandu.api.base.service.BaseBrandService;
import com.sandu.api.base.service.BaseProductStyleService;
import com.sandu.api.base.service.SysUserService;
import com.sandu.api.designplan.common.constants.ResRenderPicConstant;
import com.sandu.api.designplan.model.DesignPlanRecommended;
import com.sandu.api.designplan.model.ResRenderPic;
import com.sandu.api.designplan.service.DesignPlanRecommendedService;
import com.sandu.api.designplan.service.DesignPlanRenderSceneService;
import com.sandu.api.designplan.service.ResRenderPicService;
import com.sandu.api.designplan.service.biz.DesignPlanRecommendedBizService;
import com.sandu.api.fullhouse.common.constant.FullHouseConstant;
import com.sandu.api.fullhouse.common.constant.VrMakeConstant;
import com.sandu.api.fullhouse.common.exception.BizException;
import com.sandu.api.fullhouse.input.*;
import com.sandu.api.fullhouse.model.BaseHousePicFullHousePlanRel;
import com.sandu.api.fullhouse.model.FullHouseDesignPlan;
import com.sandu.api.fullhouse.model.FullHouseDesignPlanDetail;
import com.sandu.api.fullhouse.output.*;
import com.sandu.api.fullhouse.service.FullHouseDesignPlanDetailService;
import com.sandu.api.fullhouse.service.FullHouseDesignPlanService;
import com.sandu.api.fullhouse.service.biz.FullHouseDesignPlanBizService;
import com.sandu.api.task.model.AutoRenderTask;
import com.sandu.api.task.model.AutoRenderTaskState;
import com.sandu.api.task.service.AutoRenderTaskService;
import com.sandu.api.task.service.AutoRenderTaskStateService;
import com.sandu.common.model.LoginUser;
import com.sandu.panorama.model.input.DesignPlanStoreReleaseAdd;
import com.sandu.panorama.model.input.DesignPlanStoreReleaseDetailsAdd;
import com.sandu.panorama.model.output.MakeDesignPlanStoreReleaseResultVo;
import com.sandu.panorama.service.DesignPlanStoreReleaseService;
import lombok.extern.log4j.Log4j2;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

/**
 * created by zhangchengda
 * 2018/8/15 18:37
 * 全屋方案业务服务
 */
@Log4j2(topic = "[全屋方案业务服务]")
@Service("fullHouseDesignPlanBizService")
public class FullHouseDesignPlanBizServiceImpl implements FullHouseDesignPlanBizService {
    @Autowired
    private DesignPlanRecommendedBizService designPlanRecommendedBizService;
    @Autowired
    private BaseProductStyleService baseProductStyleService;
    @Autowired
    private FullHouseDesignPlanService fullHouseDesignPlanService;
    @Autowired
    private FullHouseDesignPlanDetailService fullHouseDesignPlanDetailService;
    @Autowired
    private DesignPlanRecommendedService designPlanRecommendedService;
    @Autowired
    private SysUserService sysUserService;
    @Autowired
    private ResRenderPicService resRenderPicService;
    @Autowired
    private DesignPlanStoreReleaseService designPlanStoreReleaseService;
    @Autowired
    private BaseBrandService baseBrandService;
    @Autowired
    private AutoRenderTaskService autoRenderTaskService;
    @Autowired
    private AutoRenderTaskStateService autoRenderTaskStateService;

    private static final int DEFAULT_CURRENT_PAGE = 1;
    private static final int DEFAULT_DESIGN_PLAN_PAGE_SIZE = 20;
    private static final int DEFAULT_FULL_HOUSE_DESIGN_PLAN_PAGE_SIZE = 10;
    private static final int DEFAULT_START = 0;
    private static final Gson gson = new Gson();

    /**
     * created by zhangchengda
     * 2018/8/16 12:52
     * 查询用于全屋方案制作的组合方案主方案/一键方案（空间类型为厨房时）
     *
     * @param query 查询参数
     * @return 可选方案集合
     */
    @Override
    public List<DesignPlanVO> selectGroupPrimaryDesignPlan(DesignPlanQuery query) {
        // 处理分页
        if (query.getCurPage() == null || query.getCurPage() <= 0) {
            query.setCurPage(DEFAULT_CURRENT_PAGE);
        }
        if (query.getPageSize() == null || query.getPageSize() <= 0) {
            query.setPageSize(DEFAULT_DESIGN_PLAN_PAGE_SIZE);
        }
        if (query.getPageSize() != null && query.getCurPage() != null) {
            query.setStart((query.getCurPage() - 1) * query.getPageSize());
        } else {
            query.setStart(DEFAULT_START);
        }
        // 查询方案
        log.info("查询用于全屋方案制作的组合方案主方案/一键方案（空间类型为厨房时），查询参数:{}", gson.toJson(query));
        return designPlanRecommendedBizService.selectGroupPrimaryDesignPlan(query);
    }

    /**
     * created by zhangcheng
     * 2018/8/16 16:18
     * 查询用于全屋方案制作的组合方案主方案/一键方案（空间类型为厨房时）总数
     *
     * @param query 查询参数
     * @return 方案总数
     */
    @Override
    public Integer selectGroupPrimaryDesignPlanCount(DesignPlanQuery query) {
        // 处理分页
        query.setCurPage(null);
        query.setPageSize(null);
        query.setStart(null);
        // 查询方案总数
        log.info("查询用于全屋方案制作的组合方案主方案/一键方案（空间类型为厨房时）总数,查询参数:{}", gson.toJson(query));
        return designPlanRecommendedBizService.selectGroupPrimaryDesignPlanCount(query);
    }

    /**
     * created by zhangchengda
     * 2018/8/16 17:22
     * 查询任意空间类型下所有的方案风格
     *
     * @param query 查询参数
     * @return 该空间类型下的所有方案风格
     */
    @Override
    public List<DesignPlanStyleVO> selectDesignPlanStyle(DesignPlanStyleQuery query) {
        // 处理查询参数，找到对应空间类型的方案风格节点code
        // 例：客餐厅空间类型找到方案风格为客餐厅的code："kecanting"
        String parentCode = null;
        switch (query.getSpaceType()) {
            case FullHouseConstant.SPACE_TYPE_FULL_HOUSE:
                parentCode = FullHouseConstant.DESIGN_PLAN_STYLE_CODE_FULL_HOUSE;
                break;
            case FullHouseConstant.SPACE_TYPE_LIVING_DINING_ROOM:
                parentCode = FullHouseConstant.DESIGN_PLAN_STYLE_CODE_LIVING_DINING_ROOM;
                break;
            case FullHouseConstant.SPACE_TYPE_BEDROOM:
                parentCode = FullHouseConstant.DESIGN_PLAN_STYLE_CODE_BEDROOM;
                break;
            case FullHouseConstant.SPACE_TYPE_KITCHEN:
                parentCode = FullHouseConstant.DESIGN_PLAN_STYLE_CODE_KITCHEN;
                break;
            case FullHouseConstant.SPACE_TYPE_TOILET:
                parentCode = FullHouseConstant.DESIGN_PLAN_STYLE_CODE_TOILET;
                break;
            case FullHouseConstant.SPACE_TYPE_SCHOOLROOM:
                parentCode = FullHouseConstant.DESIGN_PLAN_STYLE_CODE_SCHOOLROOM;
                break;
            case FullHouseConstant.SPACE_TYPE_CLOAKROOM:
                parentCode = FullHouseConstant.DESIGN_PLAN_STYLE_CODE_CLOAKROOM;
                break;
            default:
                return null;
        }
        // 通过父节点的code查询当前空间类型方案的风格
        log.info("查询当前空间类型的所有方案风格,风格code:{}", parentCode);
        List<BaseProductStyle> list = baseProductStyleService.selectListByParentCode(parentCode);
        // 组装返回结果
        log.info("查询方案风格结果数:{}", list.size());
        List<DesignPlanStyleVO> designPlanStyleVOList = new ArrayList<>(list.size());
        list.forEach(style -> {
            DesignPlanStyleVO designPlanStyleVO = new DesignPlanStyleVO();
            designPlanStyleVO.setDesignPlanStyleId(style.getId().intValue());
            designPlanStyleVO.setDesignPlanStyleName(style.getName());
            designPlanStyleVOList.add(designPlanStyleVO);
        });
        return designPlanStyleVOList;
    }

    /**
     * created by zhangchengda
     * 2018/8/17 10:52
     * 查询当前登录用户制作的符合查询条件的全屋方案
     *
     * @param query 查询参数
     * @return 全屋方案集合
     */
    @Override
    public List<FullHouseDesignPlanVO> selectFullHouseDesignPlan(FullHouseDesignPlanQuery query) {
        // 处理分页
        if (query.getCurPage() == null || query.getCurPage() <= 0) {
            query.setCurPage(DEFAULT_CURRENT_PAGE);
        }
        if (query.getPageSize() == null || query.getPageSize() <= 0) {
            query.setPageSize(DEFAULT_FULL_HOUSE_DESIGN_PLAN_PAGE_SIZE);
        }
        if (query.getPageSize() != null && query.getCurPage() != null) {
            query.setStart((query.getCurPage() - 1) * query.getPageSize());
        } else {
            query.setStart(DEFAULT_START);
        }
        // 查询方案
        log.info("查询当前登录用户制作的全屋方案，查询参数:{}", gson.toJson(query));
        return fullHouseDesignPlanService.selectFullHouseDesignPlan(query);
    }

    /**
     * created by zhangchengda
     * 2018/8/17 11:32
     * 查询当前登录用户制作的符合查询条件的全屋方案总数
     *
     * @param query 查询参数
     * @return 全屋方案总数
     */
    @Override
    public Integer selectFullHouseDesignPlanCount(FullHouseDesignPlanQuery query) {
        // 处理分页
        query.setCurPage(null);
        query.setPageSize(null);
        query.setStart(null);
        // 查询方案总数
        log.info("查询当前登录用户制作的符合查询条件的全屋方案总数，查询参数:{}", gson.toJson(query));
        return fullHouseDesignPlanService.selectFullHouseDesignPlanCount(query);
    }

    /**
     * created by zhangchengda
     * 2018/8/17 13:56
     * 制作全屋方案
     *
     * @param fullHouseDesignPlanAdd 制作全屋方案参数
     * @param userId                 用户ID
     * @throws BizException
     */
    @Transactional(rollbackFor = {Exception.class, RuntimeException.class})
    @Override
    public void createFullHouseDesignPlan(FullHouseDesignPlanAdd fullHouseDesignPlanAdd, Integer userId, String token) throws BizException {
        //------------------------- 新建全屋方案数据 -------------------------//
        // 开始时间
        long startTime = System.currentTimeMillis();
        // 构造全屋方案模型
        FullHouseDesignPlan fullHouseDesignPlan = new FullHouseDesignPlan();
        // 生成UUID
        UUID uuid = UUID.randomUUID();
        fullHouseDesignPlan.setUuid(uuid.toString());
        // 生成方案编码
        fullHouseDesignPlan.setPlanCode(generateCode(userId + System.currentTimeMillis()));
        // 方案名称
        fullHouseDesignPlan.setPlanName(fullHouseDesignPlanAdd.getDesignPlanName());
        // 方案风格
        BaseProductStyle style = baseProductStyleService.selectByPrimaryKey(fullHouseDesignPlanAdd.getDesignPlanStyleId().longValue());
        fullHouseDesignPlan.setPlanStyleId(style.getId().intValue());
        fullHouseDesignPlan.setPlanStyleName(style.getName());
        // 方案缩略图，全屋方案缩略图为客餐厅方案组合的主方案的缩略图
        Integer groupPrimaryId = fullHouseDesignPlanAdd.getLivingDiningRoom().get(0);
        List<ResRenderPic> picList = resRenderPicService.selectByRecommendedIdAndKeyAndRenderType(groupPrimaryId,
                ResRenderPicConstant.FILE_KEY_DESIGN_RECOMMENFED_SMALL_PIC,
                ResRenderPicConstant.RES_RENDER_PIC_REDERING_TYPE_720_SINGLE_POINT);
        if (picList == null || picList.size() <= 0) {
            throw new BizException("没有找到全屋方案缩略图");
        }
        fullHouseDesignPlan.setPlanPicId(picList.get(0).getId());
        // 方案描述
        fullHouseDesignPlan.setPlanDescribe(null);
        // 设计师，公司，品牌
        SysUser user = sysUserService.selectByPrimaryKey(userId.longValue());
        if (user == null) {
            throw new BizException("找不到用户信息");
        }
        fullHouseDesignPlan.setUserId(user.getId().intValue());
        fullHouseDesignPlan.setCompanyId(user.getCompanyId());
        List<BaseBrand> brandList = baseBrandService.selectByCompanyId(user.getCompanyId().longValue());
        StringBuilder sb = new StringBuilder();
        brandList.forEach(baseBrand -> sb.append(baseBrand.getId() + ","));
        if (!StringUtils.isBlank(sb)) {
            fullHouseDesignPlan.setBrandIds(sb.toString().substring(0, sb.toString().length() - 1));
        }
        // 方案来源类型
        fullHouseDesignPlan.setSourceType(FullHouseConstant.FULL_HOUSE_SOURCE_TYPE_INTERNAL_PRODUCTION);
        // 来源方案ID，内部制作时没有来源方案
        fullHouseDesignPlan.setSourcePlanId(null);
        // 公开状态，默认未公开
        fullHouseDesignPlan.setOpenState(FullHouseConstant.FULL_HOUSE_OPEN_STATE_NO);
        // 720UUID, 先给空串，后面添加
        fullHouseDesignPlan.setVrResourceUuid("");
        // 方案版本，默认1
        fullHouseDesignPlan.setVersion(FullHouseConstant.FULL_HOUSE_VERSION_DEFAULT);
        // 系统信息
        Date date = new Date();
        fullHouseDesignPlan.setCreator(user.getNickName());
        fullHouseDesignPlan.setGmtCreate(date);
        fullHouseDesignPlan.setModifier(user.getNickName());
        fullHouseDesignPlan.setGmtModified(date);
        fullHouseDesignPlan.setIsDeleted(FullHouseConstant.FULL_HOUSE_IS_DELETED_NO);
        fullHouseDesignPlan.setRemark(null);
        // 创建全屋方案
        log.info("创建全屋方案，fullHouseDesignPlan:{}", gson.toJson(fullHouseDesignPlan));
        int influenced = fullHouseDesignPlanService.insertSelective(fullHouseDesignPlan);
        if (influenced <= 0) {
            throw new BizException("创建全屋方案失败");
        }
        log.info("创建全屋方案耗时:{}ms", System.currentTimeMillis() - startTime);
        //------------------------- end -------------------------//
        //------------------------- 新建全屋方案详情数据 -------------------------//
        // 开始时间
        startTime = System.currentTimeMillis();
        // 获取全屋方案ID
        fullHouseDesignPlan = fullHouseDesignPlanService.selectFullHouseDesignPlanByUuid(uuid.toString());
        int fullHouseDesignPlanId = fullHouseDesignPlan.getId();
        log.info("全屋方案ID:{}", fullHouseDesignPlanId);
        // 获取需要插入详情表的条数
        int listSize = fullHouseDesignPlanAdd.getLivingDiningRoom().size() +
                fullHouseDesignPlanAdd.getBedroom().size() +
                fullHouseDesignPlanAdd.getKitchen().size() +
                fullHouseDesignPlanAdd.getToilet().size() +
                fullHouseDesignPlanAdd.getSchoolroom().size();
        // 待插入集合
        List<FullHouseDesignPlanDetail> detailList = new ArrayList<>(listSize);
        // 将各个空间的方案放入待插入集合中
        for (Integer designPlanRecommendedId : fullHouseDesignPlanAdd.getLivingDiningRoom()) {
            addFullHouseDesignPlanDetail(detailList,
                    fullHouseDesignPlanId,
                    designPlanRecommendedId,
                    FullHouseConstant.SPACE_TYPE_LIVING_DINING_ROOM,
                    user);
        }
        for (Integer designPlanRecommendedId : fullHouseDesignPlanAdd.getBedroom()) {
            addFullHouseDesignPlanDetail(detailList,
                    fullHouseDesignPlanId,
                    designPlanRecommendedId,
                    FullHouseConstant.SPACE_TYPE_BEDROOM,
                    user);
        }
        for (Integer designPlanRecommendedId : fullHouseDesignPlanAdd.getKitchen()) {
            addFullHouseDesignPlanDetail(detailList,
                    fullHouseDesignPlanId,
                    designPlanRecommendedId,
                    FullHouseConstant.SPACE_TYPE_KITCHEN,
                    user);
        }
        for (Integer designPlanRecommendedId : fullHouseDesignPlanAdd.getToilet()) {
            addFullHouseDesignPlanDetail(detailList,
                    fullHouseDesignPlanId,
                    designPlanRecommendedId,
                    FullHouseConstant.SPACE_TYPE_TOILET,
                    user);
        }
        for (Integer designPlanRecommendedId : fullHouseDesignPlanAdd.getSchoolroom()) {
            addFullHouseDesignPlanDetail(detailList,
                    fullHouseDesignPlanId,
                    designPlanRecommendedId,
                    FullHouseConstant.SPACE_TYPE_SCHOOLROOM,
                    user);
        }
        // 插入数据
        influenced = fullHouseDesignPlanDetailService.insertList(detailList);
        if (influenced != listSize) {
            throw new BizException("创建全屋方案详情失败");
        }
        log.info("创建全屋方案详情耗时:{}ms", System.currentTimeMillis() - startTime);
        //------------------------- end -------------------------//
        //------------------------- 更新全屋方案的720UUID -------------------------//
        // 开始时间
        startTime = System.currentTimeMillis();
        // 720UUID
        String vrUuid = getVrUuid(detailList, user, ResRenderPicConstant.FILE_KEY_DESIGN_RECOMMENDED_RENDER_PIC, null);
        if (vrUuid == null || "".equals(vrUuid)) {
            throw new BizException("720制作失败,UUID为空");
        }
        fullHouseDesignPlan.setVrResourceUuid(vrUuid);
        influenced = fullHouseDesignPlanService.updateByPrimaryKeySelective(fullHouseDesignPlan);
        if (influenced <= 0) {
            throw new BizException("保存720UUID失败");
        }
        log.info("获取720UUID成功,720UUID:{},耗时:{}ms", vrUuid, System.currentTimeMillis() - startTime);
        //------------------------- end -------------------------//
    }

    /**
     * created by zhangchengda
     * 2018/8/18 18:57
     * 删除全屋方案
     *
     * @param id 要删除的全屋方案ID
     * @throws BizException
     */
    @Override
    @Transactional(rollbackFor = {Exception.class, RuntimeException.class})
    public void deleteFullHouseDesignPlan(Integer id) throws BizException {
        // 删除全屋方案
        int success = fullHouseDesignPlanService.deleteFullHouseDesignPlan(id);
        if (success <= 0) {
            // 删除失败抛出异常，事务回滚
            throw new BizException("删除全屋方案失败");
        }
        log.info("删除全屋方案成功，id:{}", id);
        // 删除全屋方案详情
        success = fullHouseDesignPlanDetailService.deleteByFullHouseDesignPlanId(id);
        if (success <= 0) {
            // 删除失败抛出异常，事务回滚
            throw new BizException("删除全屋方案详情失败");
        }
        log.info("删除全屋方案详情成功，删除条数:{}", success);
    }

    /**
     * created by zhangchengda
     * 2018/8/20 9:38
     * 查询全屋方案更换方案时显示的单空间方案列表
     *
     * @param fullHouseId 全屋方案ID
     * @return 全屋方案更换方案页面的数据
     */
    @Override
    public FullHouseDesignPlanEditPageVO selectFullHouseDesignPlanDetailList(Integer fullHouseId) {
        FullHouseDesignPlanEditPageVO pageVO = new FullHouseDesignPlanEditPageVO();
        pageVO.setFullHouseId(fullHouseId);
        // 查询出当前全屋方案的所有单空间方案
        List<DesignPlanVO> designPlanVOList = fullHouseDesignPlanDetailService.selectSingleSpaceDesignPlanList(fullHouseId);
        // 查出单空间方案的缩略图
        for (DesignPlanVO designPlanVO : designPlanVOList) {
            List<ResRenderPic> picList = resRenderPicService.selectByRecommendedIdAndKeyAndRenderType(designPlanVO.getDesignPlanId(),
                    ResRenderPicConstant.FILE_KEY_DESIGN_RECOMMENFED_SMALL_PIC,
                    null);
            if (picList != null && picList.size() > 0) {
                designPlanVO.setPicPath(picList.get(0).getPicPath());
            }
        }
        // 将所有单空间方案放入VO类中
        designPlanVOList.forEach(designPlanVO -> {
            switch (designPlanVO.getSpaceType()) {
                case FullHouseConstant.SPACE_TYPE_LIVING_DINING_ROOM:
                    List<DesignPlanVO> livingDiningRoom = pageVO.getLivingDiningRoom();
                    if (livingDiningRoom == null) {
                        livingDiningRoom = new ArrayList<>();
                        pageVO.setLivingDiningRoom(livingDiningRoom);
                    }
                    livingDiningRoom.add(designPlanVO);
                    break;
                case FullHouseConstant.SPACE_TYPE_BEDROOM:
                    List<DesignPlanVO> bedroom = pageVO.getBedroom();
                    if (bedroom == null) {
                        bedroom = new ArrayList<>();
                        pageVO.setBedroom(bedroom);
                    }
                    bedroom.add(designPlanVO);
                    break;
                case FullHouseConstant.SPACE_TYPE_KITCHEN:
                    List<DesignPlanVO> kitchen = pageVO.getKitchen();
                    if (kitchen == null) {
                        kitchen = new ArrayList<>();
                        pageVO.setKitchen(kitchen);
                    }
                    kitchen.add(designPlanVO);
                    break;
                case FullHouseConstant.SPACE_TYPE_TOILET:
                    List<DesignPlanVO> toilet = pageVO.getToilet();
                    if (toilet == null) {
                        toilet = new ArrayList<>();
                        pageVO.setToilet(toilet);
                    }
                    toilet.add(designPlanVO);
                    break;
                case FullHouseConstant.SPACE_TYPE_SCHOOLROOM:
                    List<DesignPlanVO> schoolRoom = pageVO.getSchoolRoom();
                    if (schoolRoom == null) {
                        schoolRoom = new ArrayList<>();
                        pageVO.setSchoolRoom(schoolRoom);
                    }
                    schoolRoom.add(designPlanVO);
                    break;
                default:
                    break;
            }
        });
        return pageVO;
    }

    /**
     * created by zhangchengda
     * 2018/8/20 12:11
     * 更新全屋方案
     *
     * @param update 更新参数
     * @param userId 当前登录用户ID
     * @throws BizException
     */
    @Transactional(rollbackFor = {Exception.class, RuntimeException.class})
    @Override
    public void updateFullHouseDesignPlan(FullHouseDesignPlanUpdate update, Integer userId, String token) throws BizException {
        //------------------------- 删除旧的全屋方案详情 -------------------------//
        // 逻辑删除当前全屋方案的所有详情表数据,更新数据时再把新的数据is_deleted字段更新为0
        int influence = fullHouseDesignPlanDetailService.logicDeletedByFullHouseDesignPlanId(update.getFullHouseId());
        if (influence <= 0) {
            throw new BizException("更新全屋方案失败");
        }
        //------------------------- end -------------------------//
        //------------------------- 更新全屋方案详情 -------------------------//
        // 开始时间
        long startTime = System.currentTimeMillis();
        // 待更新列表
        int listSize = update.getLivingDiningRoom().size() +
                update.getBedroom().size() +
                update.getKitchen().size() +
                update.getToilet().size() +
                update.getSchoolroom().size();
        List<FullHouseDesignPlanDetail> updateList = new ArrayList<>(listSize);
        // 当前登录用户
        SysUser user = sysUserService.selectByPrimaryKey(userId.longValue());
        // 加入待更新列表
        for (Integer designPlanRecommendedId : update.getLivingDiningRoom()) {
            updateFullHouseDesignPlanDetail(updateList,
                    update.getFullHouseId(),
                    designPlanRecommendedId,
                    FullHouseConstant.SPACE_TYPE_LIVING_DINING_ROOM,
                    user);
        }
        for (Integer designPlanRecommendedId : update.getBedroom()) {
            updateFullHouseDesignPlanDetail(updateList,
                    update.getFullHouseId(),
                    designPlanRecommendedId,
                    FullHouseConstant.SPACE_TYPE_BEDROOM,
                    user);
        }
        for (Integer designPlanRecommendedId : update.getKitchen()) {
            updateFullHouseDesignPlanDetail(updateList,
                    update.getFullHouseId(),
                    designPlanRecommendedId,
                    FullHouseConstant.SPACE_TYPE_KITCHEN,
                    user);
        }
        for (Integer designPlanRecommendedId : update.getToilet()) {
            updateFullHouseDesignPlanDetail(updateList,
                    update.getFullHouseId(),
                    designPlanRecommendedId,
                    FullHouseConstant.SPACE_TYPE_TOILET,
                    user);
        }
        for (Integer designPlanRecommendedId : update.getSchoolroom()) {
            updateFullHouseDesignPlanDetail(updateList,
                    update.getFullHouseId(),
                    designPlanRecommendedId,
                    FullHouseConstant.SPACE_TYPE_SCHOOLROOM,
                    user);
        }
        // 更新全屋方案详情表，根据fullHouseDesignPlanId,spaceType,priorityLevel定位数据位置
        for (FullHouseDesignPlanDetail updateData : updateList) {
            log.info("更新全屋方案详情表,data:{}", gson.toJson(updateData));
            int success = fullHouseDesignPlanDetailService.updateDetail(updateData);
            if (success <= 0) {
                updateData.setCreator(user.getNickName());
                updateData.setGmtCreate(updateData.getGmtModified());
                updateData.setRemark("");
                success = fullHouseDesignPlanDetailService.insertSelective(updateData);
                if (success <= 0) {
                    throw new BizException("更新全屋方案失败");
                }
            }
        }
        log.info("更新全屋方案详情成功，更新条数:{}，耗时:{}ms", updateList.size(), System.currentTimeMillis() - startTime);
        //------------------------- end -------------------------//
        //------------------------- 更新全屋方案720UUID和缩略图 -------------------------//
        // 开始时间
        startTime = System.currentTimeMillis();
        // 更新全屋方案表
        FullHouseDesignPlan fullHouseDesignPlan = new FullHouseDesignPlan();
        fullHouseDesignPlan.setId(update.getFullHouseId());
        // 更新全屋方案缩略图
        List<ResRenderPic> picList = resRenderPicService.selectByRecommendedIdAndKeyAndRenderType(update.getLivingDiningRoom().get(0),
                ResRenderPicConstant.FILE_KEY_DESIGN_RECOMMENFED_SMALL_PIC,
                ResRenderPicConstant.RES_RENDER_PIC_REDERING_TYPE_720_SINGLE_POINT);
        if (picList == null || picList.size() <= 0) {
            throw new BizException("没有找到方案缩略图");
        }
        fullHouseDesignPlan.setPlanPicId(picList.get(0).getId());
        // 720UUID
        String vrUuid = getVrUuid(updateList, user, ResRenderPicConstant.FILE_KEY_DESIGN_RECOMMENDED_RENDER_PIC, null);
        if (vrUuid == null || "".equals(vrUuid)) {
            throw new BizException("720制作失败,UUID为空");
        }
        log.info("720制作成功,720UUID:{}", vrUuid);
        fullHouseDesignPlan.setVrResourceUuid(vrUuid);
        // 系统信息
        fullHouseDesignPlan.setModifier(user.getNickName());
        fullHouseDesignPlan.setGmtModified(new Date());
        log.info("更新全屋方案表，更新数据:{}", gson.toJson(fullHouseDesignPlan));
        int success = fullHouseDesignPlanService.updateByPrimaryKeySelective(fullHouseDesignPlan);
        if (success <= 0) {
            throw new BizException("更新全屋方案失败");
        }
        log.info("更新全屋方案表耗时:{}ms", System.currentTimeMillis() - startTime);
        //------------------------- end -------------------------//
    }

    /**
     * created by zhangchengda
     * 2018/8/27 16:14
     * 装进我家时新建全屋方案
     *
     * @param fullHouseDesignPlanAdd 新增对象（效果图方案）
     * @return 全屋方案ID
     * @throws BizException
     */
    @Transactional(rollbackFor = {Exception.class, RuntimeException.class})
    @Override
    public String addFullHouseDesignPlanScene(FullHouseDesignPlanAdd fullHouseDesignPlanAdd) throws BizException {
        //------------------------- 新建全屋方案数据 -------------------------//
        // 开始时间
        long startTime = System.currentTimeMillis();
        // 构造全屋方案模型
        FullHouseDesignPlan fullHouseDesignPlan = new FullHouseDesignPlan();
        // 生成UUID
        UUID uuid = UUID.randomUUID();
        fullHouseDesignPlan.setUuid(uuid.toString());
        // 生成方案编码
        fullHouseDesignPlan.setPlanCode(generateCode(fullHouseDesignPlanAdd.getUserId() + System.currentTimeMillis()));
        // 方案名称
        fullHouseDesignPlan.setPlanName(fullHouseDesignPlanAdd.getDesignPlanName());
        // 方案风格
        if (fullHouseDesignPlanAdd.getDesignPlanStyleId() == 0) {
            fullHouseDesignPlan.setPlanStyleId(0);
            fullHouseDesignPlan.setPlanStyleName("");
        } else {
            BaseProductStyle style = baseProductStyleService.selectByPrimaryKey(fullHouseDesignPlanAdd.getDesignPlanStyleId().longValue());
            fullHouseDesignPlan.setPlanStyleId(style.getId().intValue());
            fullHouseDesignPlan.setPlanStyleName(style.getName());
        }
        // 方案缩略图，全屋方案缩略图为客餐厅方案的主方案的缩略图
        Integer renderSceneId = null;
        if (fullHouseDesignPlanAdd.getLivingDiningRoom() != null && fullHouseDesignPlanAdd.getLivingDiningRoom().size() > 0) {
            renderSceneId = fullHouseDesignPlanAdd.getLivingDiningRoom().get(0);
        } else if (fullHouseDesignPlanAdd.getBedroom() != null && fullHouseDesignPlanAdd.getBedroom().size() > 0) {
            renderSceneId = fullHouseDesignPlanAdd.getBedroom().get(0);
        } else if (fullHouseDesignPlanAdd.getToilet() != null && fullHouseDesignPlanAdd.getToilet().size() > 0) {
            renderSceneId = fullHouseDesignPlanAdd.getToilet().get(0);
        } else if (fullHouseDesignPlanAdd.getKitchen() != null && fullHouseDesignPlanAdd.getKitchen().size() > 0) {
            renderSceneId = fullHouseDesignPlanAdd.getKitchen().get(0);
        } else if (fullHouseDesignPlanAdd.getSchoolroom() != null && fullHouseDesignPlanAdd.getSchoolroom().size() > 0) {
            renderSceneId = fullHouseDesignPlanAdd.getSchoolroom().get(0);
        }
        if (renderSceneId == null) {
            throw new BizException("没有找到效果图方案");
        }
        List<ResRenderPic> picList = resRenderPicService.selectBySceneIdAndKeyAndRenderType(renderSceneId,
                ResRenderPicConstant.FILE_KEY_DESIGN_DESIGNPLAN_RENDER_SMALL_PIC,
                ResRenderPicConstant.RES_RENDER_PIC_REDERING_TYPE_720_SINGLE_POINT);
        if (picList == null || picList.size() <= 0) {
            throw new BizException("没有找到效果图方案缩略图");
        }
        fullHouseDesignPlan.setPlanPicId(picList.get(0).getId());
        // 方案描述
        fullHouseDesignPlan.setPlanDescribe(null);
        // 公司，设计师
        SysUser user = sysUserService.selectByPrimaryKey(fullHouseDesignPlanAdd.getUserId().longValue());
        if (user == null) {
            throw new BizException("找不到用户信息");
        }
        fullHouseDesignPlan.setUserId(user.getId().intValue());
        if (user.getCompanyId() != null) {
            List<BaseBrand> brandList = baseBrandService.selectByCompanyId(user.getCompanyId().longValue());
            StringBuilder sb = new StringBuilder();
            brandList.forEach(baseBrand -> sb.append(baseBrand.getId() + ","));
            fullHouseDesignPlan.setCompanyId(user.getCompanyId());
            if (!StringUtils.isBlank(sb)) {
                fullHouseDesignPlan.setBrandIds(sb.toString().substring(0, sb.toString().length() - 1));
            }
        }
        // 方案来源类型
        fullHouseDesignPlan.setSourceType(FullHouseConstant.FULL_HOUSE_SOURCE_TYPE_DECORATION_MY_HOME);
        // 来源方案ID，内部制作时没有来源方案
        fullHouseDesignPlan.setSourcePlanId(fullHouseDesignPlanAdd.getFullHousePlanSourceId());
        // 公开状态，默认未公开
        fullHouseDesignPlan.setOpenState(FullHouseConstant.FULL_HOUSE_OPEN_STATE_NO);
        // 720UUID, 先给空串，后面添加
        fullHouseDesignPlan.setVrResourceUuid("");
        // 方案版本，默认1
        fullHouseDesignPlan.setVersion(FullHouseConstant.FULL_HOUSE_VERSION_DEFAULT);
        // 系统信息
        Date date = new Date();
        fullHouseDesignPlan.setCreator(user.getNickName());
        fullHouseDesignPlan.setGmtCreate(date);
        fullHouseDesignPlan.setModifier(user.getNickName());
        fullHouseDesignPlan.setGmtModified(date);
        fullHouseDesignPlan.setIsDeleted(FullHouseConstant.FULL_HOUSE_IS_DELETED_NO);
        fullHouseDesignPlan.setRemark(null);
        // 创建全屋方案
        log.info("创建全屋方案，fullHouseDesignPlan:{}", gson.toJson(fullHouseDesignPlan));
        int influenced = fullHouseDesignPlanService.insertSelective(fullHouseDesignPlan);
        if (influenced <= 0) {
            throw new BizException("创建全屋方案失败");
        }
        log.info("创建全屋方案耗时:{}ms", System.currentTimeMillis() - startTime);
        //------------------------- end -------------------------//
        //------------------------- 新建全屋方案详情数据 -------------------------//
        // 开始时间
        startTime = System.currentTimeMillis();
        // 获取全屋方案ID
        fullHouseDesignPlan = fullHouseDesignPlanService.selectFullHouseDesignPlanByUuid(uuid.toString());
        int fullHouseDesignPlanId = fullHouseDesignPlan.getId();
        log.info("全屋方案ID:{}", fullHouseDesignPlanId);
        // 获取需要插入详情表的条数
        int listSize = (fullHouseDesignPlanAdd.getLivingDiningRoom() == null ? 0 : fullHouseDesignPlanAdd.getLivingDiningRoom().size()) +
                (fullHouseDesignPlanAdd.getBedroom() == null ? 0 : fullHouseDesignPlanAdd.getBedroom().size()) +
                (fullHouseDesignPlanAdd.getKitchen() == null ? 0 : fullHouseDesignPlanAdd.getKitchen().size()) +
                (fullHouseDesignPlanAdd.getToilet() == null ? 0 : fullHouseDesignPlanAdd.getToilet().size()) +
                (fullHouseDesignPlanAdd.getSchoolroom() == null ? 0 : fullHouseDesignPlanAdd.getSchoolroom().size());
        // 待插入集合
        List<FullHouseDesignPlanDetail> detailList = new ArrayList<>(listSize);
        // 将各个空间的方案放入待插入集合中
        if (fullHouseDesignPlanAdd.getLivingDiningRoom() != null) {
            for (int livingDiningRoomId : fullHouseDesignPlanAdd.getLivingDiningRoom()) {
                addFullHouseDesignPlanDetailRenderScene(detailList,
                        fullHouseDesignPlanId,
                        livingDiningRoomId,
                        FullHouseConstant.SPACE_TYPE_LIVING_DINING_ROOM,
                        user);
            }
        }
        if (fullHouseDesignPlanAdd.getBedroom() != null) {
            for (int bedroomId : fullHouseDesignPlanAdd.getBedroom()) {
                addFullHouseDesignPlanDetailRenderScene(detailList,
                        fullHouseDesignPlanId,
                        bedroomId,
                        FullHouseConstant.SPACE_TYPE_BEDROOM,
                        user);
            }
        }
        if (fullHouseDesignPlanAdd.getKitchen() != null) {
            for (int kitchenId : fullHouseDesignPlanAdd.getKitchen()) {
                addFullHouseDesignPlanDetailRenderScene(detailList,
                        fullHouseDesignPlanId,
                        kitchenId,
                        FullHouseConstant.SPACE_TYPE_KITCHEN,
                        user);
            }
        }
        if (fullHouseDesignPlanAdd.getToilet() != null) {
            for (int toiletId : fullHouseDesignPlanAdd.getToilet()) {
                addFullHouseDesignPlanDetailRenderScene(detailList,
                        fullHouseDesignPlanId,
                        toiletId,
                        FullHouseConstant.SPACE_TYPE_TOILET,
                        user);
            }
        }
        if (fullHouseDesignPlanAdd.getSchoolroom() != null) {
            for (int schoolroomId : fullHouseDesignPlanAdd.getSchoolroom()) {
                addFullHouseDesignPlanDetailRenderScene(detailList,
                        fullHouseDesignPlanId,
                        schoolroomId,
                        FullHouseConstant.SPACE_TYPE_SCHOOLROOM,
                        user);
            }
        }
        // 插入数据
        influenced = fullHouseDesignPlanDetailService.insertList(detailList);
        if (influenced != listSize) {
            throw new BizException("创建全屋方案详情失败");
        }
        log.info("创建全屋方案详情耗时:{}ms", System.currentTimeMillis() - startTime);
        //------------------------- end -------------------------//
        //------------------------- 更新全屋方案的720UUID -------------------------//
        // 开始时间
        startTime = System.currentTimeMillis();
        // 720UUID
        String vrUuid = getVrUuid(detailList, user, ResRenderPicConstant.FILE_KEY_DESIGN_DESIGNPLAN_RENDER_PIC, fullHouseDesignPlanAdd.getHouseId());
        if (vrUuid == null || "".equals(vrUuid)) {
            throw new BizException("720制作失败,UUID为空");
        }
        fullHouseDesignPlan.setVrResourceUuid(vrUuid);
        influenced = fullHouseDesignPlanService.updateByPrimaryKeySelective(fullHouseDesignPlan);
        if (influenced <= 0) {
            throw new BizException("保存720UUID失败");
        }
        log.info("获取720UUID耗时:{}ms", System.currentTimeMillis() - startTime);
        //------------------------- end -------------------------//
        return fullHouseDesignPlanId + "," + vrUuid;
    }

    /**
     * created by zhangchengda
     * 2018/9/19 17:40
     * 装进我家时修改全屋方案
     *
     * @param update 修改数据对象
     * @return
     */
    @Transactional(rollbackFor = {Exception.class, RuntimeException.class})
    @Override
    public String updateFullHouseDesignPlanScene(FullHouseDesignPlanSceneUpdate update) throws BizException {
        //--------------------------- 装填数据 -------------------------//
        FullHouseDesignPlan fullHouseDesignPlan = new FullHouseDesignPlan();
        List<FullHouseDesignPlanDetail> detailList = fullHouseDesignPlanDetailService.selectListByFullHouseDesignPlanId(update.getFullHouseId());
        if (detailList == null) {
            detailList = new ArrayList<>();
        }
        // 要update或insert的数据
        FullHouseDesignPlanDetail fullHouseDesignPlanDetail = new FullHouseDesignPlanDetail();
        // 全屋方案ID
        fullHouseDesignPlanDetail.setFullHousePlanId(update.getFullHouseId());
        // uuid
        UUID uuid = UUID.randomUUID();
        fullHouseDesignPlanDetail.setUuid(uuid.toString());
        // 推荐方案和效果图方案ID
        fullHouseDesignPlanDetail.setRenderScenePlanId(update.getNewPlanId());
        fullHouseDesignPlanDetail.setRecommendedPlanGroupPrimaryId(0);
        // 空间类型
        fullHouseDesignPlanDetail.setSpaceType(update.getSpaceFunctionId());
        // 效果图方案和推荐方案的720资源
        List<ResRenderPic> resRenderPicList = resRenderPicService.selectBySceneIdAndKeyAndRenderType(update.getNewPlanId(),
                ResRenderPicConstant.FILE_KEY_DESIGN_DESIGNPLAN_RENDER_PIC,
                ResRenderPicConstant.RES_RENDER_PIC_REDERING_TYPE_720_SINGLE_POINT);
        fullHouseDesignPlanDetail.setPlanRenderResourceId(resRenderPicList.get(0).getId());
        fullHouseDesignPlanDetail.setPlanRecommendedResourceId(0);
        // 系统字段
        SysUser user = sysUserService.selectByPrimaryKey(update.getUserId().longValue());
        Date now = new Date();
        fullHouseDesignPlanDetail.setGmtModified(now);
        fullHouseDesignPlanDetail.setModifier(user.getUserName());
        fullHouseDesignPlanDetail.setIsDeleted(FullHouseConstant.FULL_HOUSE_IS_DELETED_NO);
        //--------------------------- 更新数据 --------------------------//
        if (update.getNewPlanId() != 0) {
            // 新方案ID不为0则更新数据
            if (update.getSourcePlanId() == 0) {
                // 如果源方案为0，则insert
                // 设置系统字段
                fullHouseDesignPlanDetail.setGmtCreate(now);
                fullHouseDesignPlanDetail.setCreator(user.getUserName());
                // 优先级
                // 查找当前全屋方案中是否有同空间类型的全屋方案详情数据，第一条加进来的数据优先级最高，第二条其次，依次递减
                setPriorityLevel(detailList, update.getSpaceFunctionId(), fullHouseDesignPlanDetail);
                // 插入数据
                log.info("插入全屋详情数据,fullHouseDesignPlanDetail:{}", gson.toJson(fullHouseDesignPlanDetail));
                int result = fullHouseDesignPlanDetailService.insertSelective(fullHouseDesignPlanDetail);
                if (result <= 0) {
                    throw new BizException("插入全屋详情数据失败");
                }
                // 插入的第一个方案的封面图设置为全屋方案的封面图
                if (detailList.size() == 0) {
                    List<ResRenderPic> picList = resRenderPicService.selectBySceneIdAndKeyAndRenderType(update.getNewPlanId(),
                            ResRenderPicConstant.FILE_KEY_DESIGN_DESIGNPLAN_RENDER_SMALL_PIC,
                            ResRenderPicConstant.RES_RENDER_PIC_REDERING_TYPE_720_SINGLE_POINT);
                    if (picList == null || picList.size() <= 0) {
                        throw new BizException("没有找到效果图方案缩略图");
                    }
                    fullHouseDesignPlan.setPlanPicId(picList.get(0).getId());
                }
                // 更新全屋方案集合
                detailList.add(fullHouseDesignPlanDetail);
            } else {
                // 如果源方案不为0，则update
                // 根据源方案ID找到原来的那条数据
                List<FullHouseDesignPlanDetail> sourceDetailList = detailList.stream()
                        .filter(detail -> detail.getRenderScenePlanId().equals(update.getSourcePlanId()))
                        .collect(Collectors.toList());
                if (sourceDetailList == null || sourceDetailList.size() == 0) {
                    throw new BizException("没有找到源方案");
                }
                FullHouseDesignPlanDetail sourceDetail = sourceDetailList.get(0);
                // 如果更新的是第一条方案，更新全屋方案的封面图
                int index = detailList.indexOf(sourceDetail);
                if (index == 0) {
                    List<ResRenderPic> picList = resRenderPicService.selectBySceneIdAndKeyAndRenderType(update.getNewPlanId(),
                            ResRenderPicConstant.FILE_KEY_DESIGN_DESIGNPLAN_RENDER_SMALL_PIC,
                            ResRenderPicConstant.RES_RENDER_PIC_REDERING_TYPE_720_SINGLE_POINT);
                    if (picList == null || picList.size() <= 0) {
                        throw new BizException("没有找到效果图方案缩略图");
                    }
                    fullHouseDesignPlan.setPlanPicId(picList.get(0).getId());
                }
                // 填入ID，更新数据
                fullHouseDesignPlanDetail.setId(sourceDetail.getId());
                log.info("更新全屋详情数据,fullHouseDesignPlanDetail:{}", gson.toJson(fullHouseDesignPlanDetail));
                int result = fullHouseDesignPlanDetailService.updateByPrimaryKeySelective(fullHouseDesignPlanDetail);
                if (result <= 0) {
                    throw new BizException("更新全屋详情数据失败");
                }
                // 更新全屋方案集合
                detailList.remove(sourceDetail);
                detailList.add(fullHouseDesignPlanDetail);
            }
        } else {
            // 新方案ID为0则删除数据
            if (update.getSourcePlanId() == 0) {
                throw new BizException("源方案ID和新方案ID都为0");
            } else {
                // 先逻辑删除所有全屋方案详情
                fullHouseDesignPlanDetailService.logicDeletedByFullHouseDesignPlanId(update.getFullHouseId());
                // 把被删除的数据筛出来，重新设置其他方案的优先级
                List<FullHouseDesignPlanDetail> updateList = new ArrayList<>();
                FullHouseDesignPlanDetail deletedDetail = null;
                for (FullHouseDesignPlanDetail detail : detailList) {
                    if (detail.getRenderScenePlanId().equals(update.getSourcePlanId())) {
                        detail.setIsDeleted(1);
                        deletedDetail = detail;
                    } else {
                        updateList.add(detail);
                        setPriorityLevel(updateList, detail.getSpaceType(), detail);
                    }
                }
                updateList.add(deletedDetail);
                // 更新全屋方案数据
                log.info("删除全屋详情数据,deletedDetail:{}", gson.toJson(deletedDetail));
                for (FullHouseDesignPlanDetail detail : updateList) {
                    int result = fullHouseDesignPlanDetailService.updateByPrimaryKeySelective(detail);
                    if (result <= 0) {
                        throw new BizException("删除方案失败");
                    }
                }
            }
        }
        //--------------------------- 更新全屋方案720ID -------------------------//
        String vrUuid = getVrUuid(detailList, user, ResRenderPicConstant.FILE_KEY_DESIGN_DESIGNPLAN_RENDER_PIC, update.getHouseId());
        fullHouseDesignPlan.setId(update.getFullHouseId());
        fullHouseDesignPlan.setVrResourceUuid(vrUuid);
        fullHouseDesignPlan.setGmtModified(now);
        fullHouseDesignPlan.setModifier(user.getUserName());
        log.info("更新全屋方案，fullHouseDesignPlan:{}", gson.toJson(fullHouseDesignPlan));
        int result = fullHouseDesignPlanService.updateByPrimaryKeySelective(fullHouseDesignPlan);
        if (result <= 0) {
            throw new BizException("保存720UUID失败");
        }
        return vrUuid;
    }

    @Override
    public List<MatchInfoVO> getMatchInfo(Integer houseId, Integer fullHousePlanId) throws BizExceptionEE {
        return fullHouseDesignPlanService.getMatchInfo(houseId, fullHousePlanId);
    }

    /**
     * created by zhangchengda
     * 2018/9/20 12:37
     * 单空间装进我家时临时创建的全屋方案，用于在移动端创建全屋方案(先占坑)
     *
     * @param userId                   当前用户ID
     * @param oldFullHouseDesignPlanId 旧的全屋方案ID
     * @return
     * @throws BizException
     */
    @Transactional(rollbackFor = {Exception.class, RuntimeException.class})
    @Override
    public Integer addTempFullHouseDesignPlan(Integer userId, Integer oldFullHouseDesignPlanId, Integer houseId) throws BizException {
        // 构造全屋方案模型
        FullHouseDesignPlan fullHouseDesignPlan = new FullHouseDesignPlan();
        // 生成UUID
        UUID uuid = UUID.randomUUID();
        fullHouseDesignPlan.setUuid(uuid.toString());
        // 生成方案编码
        fullHouseDesignPlan.setPlanCode(generateCode(userId + System.currentTimeMillis()));
        // 方案名称，用户型名称,没有户型名称就取旧方案名称,实在不行只能叫未命名方案了
        String houseName = baseBrandService.getHouseNameByPrimaryKey(houseId);
        if (houseName == null || "".equals(houseName)) {
            if (oldFullHouseDesignPlanId != null) {
                FullHouseDesignPlan old = fullHouseDesignPlanService.selectByPrimaryKey(oldFullHouseDesignPlanId);
                if (old != null) {
                    houseName = old.getPlanName();
                } else {
                    houseName = "未命名方案";
                }
            } else {
                houseName = "未命名方案";
            }
        }
        fullHouseDesignPlan.setPlanName(houseName);
        // 方案风格
        fullHouseDesignPlan.setPlanStyleId(0);
        fullHouseDesignPlan.setPlanStyleName("");
        // 方案缩略图
        if (oldFullHouseDesignPlanId != null) {
            FullHouseDesignPlan old = fullHouseDesignPlanService.selectByPrimaryKey(oldFullHouseDesignPlanId);
            if (old != null) {
                fullHouseDesignPlan.setPlanPicId(old.getPlanPicId());
            } else {
                fullHouseDesignPlan.setPlanPicId(0);
            }
        } else {
            fullHouseDesignPlan.setPlanPicId(0);
        }
        // 方案描述
        fullHouseDesignPlan.setPlanDescribe(null);
        // 设计师，公司，品牌
        SysUser user = sysUserService.selectByPrimaryKey(userId.longValue());
        if (user == null) {
            throw new BizException("找不到用户信息");
        }
        fullHouseDesignPlan.setUserId(user.getId().intValue());
        if (user.getCompanyId() != null) {
            StringBuilder sb = new StringBuilder();
            List<BaseBrand> brandList = baseBrandService.selectByCompanyId(user.getCompanyId().longValue());
            brandList.forEach(baseBrand -> sb.append(baseBrand.getId() + ","));
            fullHouseDesignPlan.setCompanyId(user.getCompanyId());
            if (!StringUtils.isBlank(sb)) {
                fullHouseDesignPlan.setBrandIds(sb.toString().substring(0, sb.toString().length() - 1));
            }
        }
        // 方案来源类型
        fullHouseDesignPlan.setSourceType(FullHouseConstant.FULL_HOUSE_SOURCE_TYPE_DECORATION_MY_HOME);
        // 来源方案ID
        fullHouseDesignPlan.setSourcePlanId(oldFullHouseDesignPlanId == null ? 0 : oldFullHouseDesignPlanId);
        // 公开状态，默认未公开
        fullHouseDesignPlan.setOpenState(FullHouseConstant.FULL_HOUSE_OPEN_STATE_NO);
        // 720UUID, 先给空串，后面添加
        fullHouseDesignPlan.setVrResourceUuid("");
        // 方案版本，默认1
        fullHouseDesignPlan.setVersion(FullHouseConstant.FULL_HOUSE_VERSION_DEFAULT);
        // 系统信息
        Date date = new Date();
        fullHouseDesignPlan.setCreator(user.getNickName());
        fullHouseDesignPlan.setGmtCreate(date);
        fullHouseDesignPlan.setModifier(user.getNickName());
        fullHouseDesignPlan.setGmtModified(date);
        fullHouseDesignPlan.setIsDeleted(FullHouseConstant.FULL_HOUSE_IS_DELETED_NO);
        fullHouseDesignPlan.setRemark(null);
        // 创建全屋方案
        log.info("创建全屋方案，fullHouseDesignPlan:{}", gson.toJson(fullHouseDesignPlan));
        int influenced = fullHouseDesignPlanService.insertSelective(fullHouseDesignPlan);
        if (influenced <= 0) {
            throw new BizException("创建全屋方案失败");
        }
        FullHouseDesignPlan fullHouse = fullHouseDesignPlanService.selectFullHouseDesignPlanByUuid(uuid.toString());
        if (fullHouse == null) {
            throw new BizException("创建全屋方案失败,没有查到创建的全屋方案");
        }
        // 如果是从旧方案复制过来，复制detail数据
        if (oldFullHouseDesignPlanId != null) {
            List<FullHouseDesignPlanDetail> detailList = fullHouseDesignPlanDetailService.selectListByFullHouseDesignPlanId(oldFullHouseDesignPlanId);
            if (detailList != null && detailList.size() > 0) {
                for (FullHouseDesignPlanDetail fullHouseDesignPlanDetail : detailList) {
                    fullHouseDesignPlanDetail.setId(null);
                    fullHouseDesignPlanDetail.setUuid(UUID.randomUUID().toString());
                    fullHouseDesignPlanDetail.setFullHousePlanId(fullHouse.getId());
                    fullHouseDesignPlanDetail.setCreator(user.getUserName());
                    fullHouseDesignPlanDetail.setModifier(user.getUserName());
                    fullHouseDesignPlanDetail.setGmtCreate(date);
                    fullHouseDesignPlanDetail.setGmtModified(date);
                }
                int num = fullHouseDesignPlanDetailService.insertList(detailList);
                if (num != detailList.size()) {
                    throw new BizException("复制全屋方案详情数据失败");
                }
            }
        }
        return fullHouse.getId();
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public String copyFullHouseDesignPlan(FullHouseDesignPlanCopy fullHouseDesignPlanCopy, Integer userId) throws BizException {

        Integer fullHouseDesignPlanId = fullHouseDesignPlanCopy.getFullHouseDesignPlanId();
        //查询原方案
        FullHouseDesignPlan fullHouseDesignPlan = fullHouseDesignPlanService.selectByPrimaryKey(fullHouseDesignPlanId);
        if (null == fullHouseDesignPlan) {
            log.error("copyFullHouseDesignPlan 根据id查询全屋方案为空");
            throw new BizException("根据id查询全屋方案为空,fullHouseDesignPlanId=" + fullHouseDesignPlanId);
        }
        // ----------------------   创建全屋方案主方案start  ----------------------
        long startTime = System.currentTimeMillis();

        fullHouseDesignPlan.setId(null);
        String uuid = UUID.randomUUID().toString();
        fullHouseDesignPlan.setUuid(uuid);
        fullHouseDesignPlan.setPlanCode(generateCode(userId + System.currentTimeMillis()));

        // 用户，公司，品牌
        SysUser user = sysUserService.selectByPrimaryKey(userId.longValue());
        if (null == user) {
            throw new BizException("找不到用户信息,userId=" + userId);
        }
        fullHouseDesignPlan.setUserId(user.getId().intValue());
        if (null != user.getCompanyId() && 0 != user.getCompanyId()) {
            fullHouseDesignPlan.setCompanyId(user.getCompanyId());
            List<BaseBrand> brandList = baseBrandService.selectByCompanyId(user.getCompanyId().longValue());
            StringBuilder sb = new StringBuilder();
            brandList.forEach(baseBrand -> sb.append(baseBrand.getId() + ","));
            if (!StringUtils.isBlank(sb)) {
                fullHouseDesignPlan.setBrandIds(sb.toString().substring(0, sb.toString().length() - 1));
            }
        } else {
            fullHouseDesignPlan.setCompanyId(0);
        }
        // 系统信息
        Date date = new Date();
        fullHouseDesignPlan.setGmtCreate(date);
        fullHouseDesignPlan.setGmtModified(date);
        String nickName = user.getNickName();
        fullHouseDesignPlan.setCreator(nickName);
        fullHouseDesignPlan.setModifier(nickName);

        // 方案类型为复制，修改状态为否
        fullHouseDesignPlan.setSourceType(5);
        fullHouseDesignPlan.setIsUpdate(0);

        log.info("新增全屋方案主方案：{}", gson.toJson(fullHouseDesignPlan));
        int influenced = fullHouseDesignPlanService.insert(fullHouseDesignPlan);
        if (influenced <= 0) {
            throw new BizException("新增全屋方案主方案失败");
        }
        log.info("新增全屋方案主方案耗时：{}ms", System.currentTimeMillis() - startTime);
        // --------------------------   新增全屋方案主方案end    ---------------------

        // --------------------------   复制全屋方案子方案start  ---------------------
        startTime = System.currentTimeMillis();
        // 新全屋方案主方案
        fullHouseDesignPlan = fullHouseDesignPlanService.selectFullHouseDesignPlanByUuid(uuid);
        Integer newFullHouseDesignPlanId = fullHouseDesignPlan.getId();
        log.info("复制完成新的全屋方案主方案id：{}", newFullHouseDesignPlanId);

        List<FullHouseDesignPlanDetail> fullHouseDesignPlanDetails =
                fullHouseDesignPlanDetailService.selectListByFullHouseDesignPlanId(fullHouseDesignPlanId);
        if (null == fullHouseDesignPlanDetails || fullHouseDesignPlanDetails.size() <= 0) {
            throw new BizException("查询全屋方案子方案失败，fullHouseDesignPlanId=" + fullHouseDesignPlanId);
        }
        for (FullHouseDesignPlanDetail fullHouseDesignPlanDetail : fullHouseDesignPlanDetails) {
            fullHouseDesignPlanDetail.setId(null);
            fullHouseDesignPlanDetail.setUuid(UUID.randomUUID().toString());
            fullHouseDesignPlanDetail.setFullHousePlanId(newFullHouseDesignPlanId);

            // 系统字段
            date = new Date();
            fullHouseDesignPlanDetail.setGmtCreate(date);
            fullHouseDesignPlanDetail.setGmtModified(date);
            fullHouseDesignPlanDetail.setCreator(nickName);
            fullHouseDesignPlanDetail.setModifier(nickName);
        }

        influenced = fullHouseDesignPlanDetailService.insertList(fullHouseDesignPlanDetails);
        if (influenced != fullHouseDesignPlanDetails.size()) {
            throw new BizException("新增全屋方案子方案集合失败");
        }
        log.info("复制全屋方案子方案集合完成，耗时：{}ms", System.currentTimeMillis() - startTime);
        // -------------------------------  复制全屋方案子方案end  -----------------------

        // -------------------------------  生成720UUID并回填start   --------------------
        startTime = System.currentTimeMillis();
        // 生成720UUID
        String vrUuid = getVrUuid(fullHouseDesignPlanDetails, user, ResRenderPicConstant.FILE_KEY_DESIGN_DESIGNPLAN_RENDER_PIC, null);
        if (StringUtils.isEmpty(vrUuid)) {
            throw new BizException("制作720失败");
        }

        // 回填720uuid
        fullHouseDesignPlan = new FullHouseDesignPlan();
        fullHouseDesignPlan.setId(newFullHouseDesignPlanId);
        fullHouseDesignPlan.setVrResourceUuid(vrUuid);
        influenced = fullHouseDesignPlanService.updateByPrimaryKeySelective(fullHouseDesignPlan);
        if (influenced <= 0) {
            throw new BizException("回填720UUID失败,fullHouseDesignPlan=" + newFullHouseDesignPlanId + "vrUuid=" + vrUuid);
        }

        log.info("生成720UUID并回填，fullHouseDesignPlan={},vrUuid={},共耗时：{}", newFullHouseDesignPlanId, vrUuid, System.currentTimeMillis() - startTime);
        // ------------------------------   生成720UUID并回填end    -----------------------

        // ------------------------------   复制全屋方案渲染空间信息start   --------------------
        startTime = System.currentTimeMillis();
        // 查询原全屋方案渲染空间信息
        List<BaseHousePicFullHousePlanRel> baseHousePicFullHousePlanRelList =
                fullHouseDesignPlanService.getBaseHousePicFullHousePlanRel(fullHouseDesignPlanId);
        if (null == baseHousePicFullHousePlanRelList || baseHousePicFullHousePlanRelList.size() <= 0) {
            throw new BizException("根据全屋方案id查询已渲染空间数据为空，fullHouseDesignPlanId=" + fullHouseDesignPlanId);
        }

        for (BaseHousePicFullHousePlanRel baseHousePicFullHousePlanRel : baseHousePicFullHousePlanRelList) {
            // 修改相关属性
            baseHousePicFullHousePlanRel.setId(null);
            baseHousePicFullHousePlanRel.setFullHousePlanId(newFullHouseDesignPlanId);
            baseHousePicFullHousePlanRel.setMainTaskId(0);
            baseHousePicFullHousePlanRel.setTaskId(0);
            baseHousePicFullHousePlanRel.setCreator(userId + "");
            baseHousePicFullHousePlanRel.setModifier(userId + "");
            date = new Date();
            baseHousePicFullHousePlanRel.setGmtCreate(date);
            baseHousePicFullHousePlanRel.setGmtModified(date);
        }

        // 批量插入已渲染空间数据
        influenced = fullHouseDesignPlanService.insertBatchBaseHousePicFullHousePlanRel(baseHousePicFullHousePlanRelList);
        if (baseHousePicFullHousePlanRelList.size() != influenced) {
            throw new BizException("复制全屋方案渲染空间数据失败，influenced=" + influenced +
                    ",baseHousePicFullHousePlanRelList.size()=" + baseHousePicFullHousePlanRelList.size());
        }

        log.info("复制全屋方案渲染空间数据完成，耗时：{}ms", System.currentTimeMillis() - startTime);
        // ------------------------------   复制全屋方案渲染空间数据end   ------------------------

        // ------------------------------   复制主任务start  --------------------------------
        startTime = System.currentTimeMillis();
        Integer mainTaskId = fullHouseDesignPlanCopy.getMainTaskId();
        Integer supplyDemandId = fullHouseDesignPlanCopy.getSupplyDemandId();
        // 复制主任务
        AutoRenderTask autoRenderTask = autoRenderTaskService.getById(mainTaskId);
        autoRenderTask.setId(null);
        date = new Date();
        autoRenderTask.setGmtCreate(date);
        autoRenderTask.setGmtModified(date);
        autoRenderTask.setCreator(nickName);
        autoRenderTask.setModifier(nickName);
        autoRenderTask.setOperationUserId(userId);
        autoRenderTask.setOperationUserName(nickName);
        autoRenderTask.setMainTaskId(null);
        autoRenderTask.setFullHousePlanId(newFullHouseDesignPlanId);
        autoRenderTask.setNewFullHousePlanId(newFullHouseDesignPlanId);
        autoRenderTask.setSupplyDemandId(supplyDemandId);
        Integer newMainTaskId = autoRenderTaskService.insertSelective(autoRenderTask);
        log.info("复制全屋方案复制完新的主任务id为：{}",newMainTaskId);
        if (null == newMainTaskId || 0 >= newMainTaskId) {
            throw new BizException("复制主任务失败，mainTaskId="+mainTaskId);
        }

        // 复制主任务状态
        AutoRenderTaskState autoRenderTaskState = autoRenderTaskStateService.getMainTaskStateByTaskId(mainTaskId);
        autoRenderTaskState.setId(null);
        date = new Date();
        autoRenderTaskState.setGmtCreate(date);
        autoRenderTaskState.setGmtModified(date);
        autoRenderTaskState.setCreator(nickName);
        autoRenderTaskState.setModifier(nickName);
        autoRenderTaskState.setOrderNumber(null);
        autoRenderTaskState.setTaskId(newMainTaskId);
        autoRenderTaskState.setOperationUserId(userId);
        autoRenderTaskState.setFullHousePlanId(newFullHouseDesignPlanId);
        autoRenderTaskState.setMainTaskId(newMainTaskId);
        autoRenderTaskState.setNewFullHousePlanId(newFullHouseDesignPlanId);
        autoRenderTaskState.setFullHousePlanUUID(vrUuid);
        autoRenderTaskState.setSupplyDemandId(supplyDemandId);
        influenced = autoRenderTaskStateService.insertSelective(autoRenderTaskState);
        if (influenced != 1) {
            throw new BizException("复制主任务状态失败，newMainTaskId="+newMainTaskId);
        }
        log.info("复制主任务及状态数据完成，耗时：{}ms", System.currentTimeMillis() - startTime);
        //  --------------------------------    复制主任务及状态end     ------------------------------

        return newFullHouseDesignPlanId + "," + newMainTaskId;
    }

    /**
     * created by zhangchengda
     * 2018/8/18 17:04
     * 生成方案编码,由前缀FH + 日期 + 时间 + 4位随机数组成
     *
     * @param salt 用来生成随机编码的盐值
     * @return 方案编码
     */
    private String generateCode(long salt) {
        // 日期、时间
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyMMddHHmmss");
        LocalDateTime date = LocalDateTime.now();
        // 4位随机数
        Random random = new Random(salt);
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 4; i++) {
            int nextInt = random.nextInt(10);
            sb.append(nextInt);
        }
        // 返回生成的编码
        return "FH_" + formatter.format(date) + sb.toString();
    }

    /**
     * created by zhangchengda
     * 2018/8/18 15:38
     * 增加全屋方案详情到待插入集合中
     *
     * @param detailList              待插入集合
     * @param fullHouseDesignPlanId   全屋方案ID
     * @param designPlanRecommendedId 单空间推荐方案ID
     * @param spaceType               空间类型
     * @param user                    当前登录用户
     */
    private void addFullHouseDesignPlanDetail(List<FullHouseDesignPlanDetail> detailList,
                                              int fullHouseDesignPlanId,
                                              int designPlanRecommendedId,
                                              int spaceType,
                                              SysUser user) throws BizException {
        FullHouseDesignPlanDetail fullHouseDesignPlanDetail = new FullHouseDesignPlanDetail();
        // UUID
        UUID uuid = UUID.randomUUID();
        fullHouseDesignPlanDetail.setUuid(uuid.toString());
        // 全屋方案ID
        fullHouseDesignPlanDetail.setFullHousePlanId(fullHouseDesignPlanId);
        // 单空间推荐方案ID
        fullHouseDesignPlanDetail.setRecommendedPlanGroupPrimaryId(designPlanRecommendedId);
        // 推荐方案对应的效果图方案ID，推荐方案表中的plan_id就是效果图方案ID
        DesignPlanRecommended designPlanRecommended = designPlanRecommendedService.selectByPrimaryKey(designPlanRecommendedId);
        fullHouseDesignPlanDetail.setRenderScenePlanId(designPlanRecommended.getPlanId());
        // 空间类型
        fullHouseDesignPlanDetail.setSpaceType(spaceType);
        // 优先级
        // 查找当前集合中是否有同空间类型的全屋方案详情数据，第一条加进来的数据优先级最高，第二条其次，依次递减
        setPriorityLevel(detailList, spaceType, fullHouseDesignPlanDetail);
        // 效果图方案的720资源ID
        List<ResRenderPic> resRenderPicList = resRenderPicService.selectBySceneIdAndKeyAndRenderType(designPlanRecommended.getPlanId(),
                ResRenderPicConstant.FILE_KEY_DESIGN_DESIGNPLAN_RENDER_PIC,
                ResRenderPicConstant.RES_RENDER_PIC_REDERING_TYPE_720_SINGLE_POINT);
        if (resRenderPicList != null && resRenderPicList.size() > 0) {
            fullHouseDesignPlanDetail.setPlanRenderResourceId(resRenderPicList.get(0).getId());
        } else {
            fullHouseDesignPlanDetail.setPlanRenderResourceId(0);
        }
        // 推荐方案的720资源ID
        resRenderPicList = resRenderPicService.selectByRecommendedIdAndKeyAndRenderType(designPlanRecommended.getId(),
                ResRenderPicConstant.FILE_KEY_DESIGN_RECOMMENDED_RENDER_PIC,
                ResRenderPicConstant.RES_RENDER_PIC_REDERING_TYPE_720_SINGLE_POINT);
        if (resRenderPicList != null && resRenderPicList.size() > 0) {
            fullHouseDesignPlanDetail.setPlanRecommendedResourceId(resRenderPicList.get(0).getId());
        } else {
            fullHouseDesignPlanDetail.setPlanRecommendedResourceId(0);
        }
        // 系统信息
        Date date = new Date();
        fullHouseDesignPlanDetail.setCreator(user.getNickName());
        fullHouseDesignPlanDetail.setGmtCreate(date);
        fullHouseDesignPlanDetail.setModifier(user.getNickName());
        fullHouseDesignPlanDetail.setGmtModified(date);
        fullHouseDesignPlanDetail.setIsDeleted(FullHouseConstant.FULL_HOUSE_IS_DELETED_NO);
        fullHouseDesignPlanDetail.setRemark("");
        // 加入到集合中
        log.info("增加全屋方案详情到待插入集合中，fullHouseDesignPlanDetail:{}", gson.toJson(fullHouseDesignPlanDetail));
        detailList.add(fullHouseDesignPlanDetail);
    }

    /**
     * created by zhangchengda
     * 2018/8/20 16:53
     * 增加全屋方案详情到待更新集合中
     *
     * @param detailList              待更新集合
     * @param fullHouseDesignPlanId   全屋方案ID
     * @param designPlanRecommendedId 单空间方案ID
     * @param spaceType               空间类型
     * @param user                    当前登录用户
     */
    private void updateFullHouseDesignPlanDetail(List<FullHouseDesignPlanDetail> detailList,
                                                 int fullHouseDesignPlanId,
                                                 int designPlanRecommendedId,
                                                 int spaceType,
                                                 SysUser user) throws BizException {
        FullHouseDesignPlanDetail fullHouseDesignPlanDetail = new FullHouseDesignPlanDetail();
        // UUID
        UUID uuid = UUID.randomUUID();
        fullHouseDesignPlanDetail.setUuid(uuid.toString());
        // 全屋方案ID
        fullHouseDesignPlanDetail.setFullHousePlanId(fullHouseDesignPlanId);
        // 单空间推荐方案ID
        fullHouseDesignPlanDetail.setRecommendedPlanGroupPrimaryId(designPlanRecommendedId);
        // 推荐方案对应的效果图方案ID，推荐方案表中的plan_id就是效果图方案ID
        DesignPlanRecommended designPlanRecommended = designPlanRecommendedService.selectByPrimaryKey(designPlanRecommendedId);
        fullHouseDesignPlanDetail.setRenderScenePlanId(designPlanRecommended.getPlanId());
        // 空间类型
        fullHouseDesignPlanDetail.setSpaceType(spaceType);
        // 优先级
        // 查找当前集合中是否有同空间类型的全屋方案详情数据，第一条加进来的数据优先级最高，第二条其次，依次递减
        setPriorityLevel(detailList, spaceType, fullHouseDesignPlanDetail);
        // 效果图方案的720ID
        List<ResRenderPic> resRenderPicList = resRenderPicService.selectBySceneIdAndKeyAndRenderType(designPlanRecommended.getPlanId(),
                ResRenderPicConstant.FILE_KEY_DESIGN_DESIGNPLAN_RENDER_PIC,
                ResRenderPicConstant.RES_RENDER_PIC_REDERING_TYPE_720_SINGLE_POINT);
        if (resRenderPicList != null && resRenderPicList.size() > 0) {
            fullHouseDesignPlanDetail.setPlanRenderResourceId(resRenderPicList.get(0).getId());
        } else {
            fullHouseDesignPlanDetail.setPlanRenderResourceId(0);
        }
        // 推荐方案的720ID
        resRenderPicList = resRenderPicService.selectByRecommendedIdAndKeyAndRenderType(designPlanRecommended.getId(),
                ResRenderPicConstant.FILE_KEY_DESIGN_RECOMMENDED_RENDER_PIC,
                ResRenderPicConstant.RES_RENDER_PIC_REDERING_TYPE_720_SINGLE_POINT);
        if (resRenderPicList != null && resRenderPicList.size() > 0) {
            fullHouseDesignPlanDetail.setPlanRecommendedResourceId(resRenderPicList.get(0).getId());
        } else {
            fullHouseDesignPlanDetail.setPlanRecommendedResourceId(0);
        }
        // 系统信息
        Date date = new Date();
        fullHouseDesignPlanDetail.setModifier(user.getNickName());
        fullHouseDesignPlanDetail.setGmtModified(date);
        fullHouseDesignPlanDetail.setIsDeleted(FullHouseConstant.FULL_HOUSE_IS_DELETED_NO);
        // 加入到集合中
        log.info("增加全屋方案详情到待更新集合中，fullHouseDesignPlanDetail:{}", gson.toJson(fullHouseDesignPlanDetail));
        detailList.add(fullHouseDesignPlanDetail);
    }

    /**
     * created by zhangchengda
     * 2018/8/21 14:36
     * 增加效果图到全屋方案详情中
     *
     * @param detailList              插入集合
     * @param fullHouseDesignPlanId   全屋方案ID
     * @param designPlanRenderSceneId 效果图方案ID
     * @param spaceType               空间类型
     * @param user                    当前用户
     * @throws BizException
     */
    private void addFullHouseDesignPlanDetailRenderScene(List<FullHouseDesignPlanDetail> detailList,
                                                         int fullHouseDesignPlanId,
                                                         int designPlanRenderSceneId,
                                                         int spaceType,
                                                         SysUser user) throws BizException {
        FullHouseDesignPlanDetail fullHouseDesignPlanDetail = new FullHouseDesignPlanDetail();
        // UUID
        UUID uuid = UUID.randomUUID();
        fullHouseDesignPlanDetail.setUuid(uuid.toString());
        // 全屋方案ID
        fullHouseDesignPlanDetail.setFullHousePlanId(fullHouseDesignPlanId);
        // 单空间推荐方案ID
        fullHouseDesignPlanDetail.setRecommendedPlanGroupPrimaryId(0);
        // 推荐方案对应的效果图方案ID，推荐方案表中的plan_id就是效果图方案ID
        fullHouseDesignPlanDetail.setRenderScenePlanId(designPlanRenderSceneId);
        // 空间类型
        fullHouseDesignPlanDetail.setSpaceType(spaceType);
        // 优先级
        // 查找当前集合中是否有同空间类型的全屋方案详情数据，第一条加进来的数据优先级最高，第二条其次，依次递减
        setPriorityLevel(detailList, spaceType, fullHouseDesignPlanDetail);
        // 效果图方案的720ID
        List<ResRenderPic> resRenderPicList = resRenderPicService.selectBySceneIdAndKeyAndRenderType(designPlanRenderSceneId,
                ResRenderPicConstant.FILE_KEY_DESIGN_DESIGNPLAN_RENDER_PIC,
                ResRenderPicConstant.RES_RENDER_PIC_REDERING_TYPE_720_SINGLE_POINT);
        fullHouseDesignPlanDetail.setPlanRenderResourceId(resRenderPicList.get(0).getId());
        // 推荐方案的720ID
        fullHouseDesignPlanDetail.setPlanRecommendedResourceId(0);
        // 系统信息
        Date date = new Date();
        fullHouseDesignPlanDetail.setCreator(user.getNickName());
        fullHouseDesignPlanDetail.setGmtCreate(date);
        fullHouseDesignPlanDetail.setModifier(user.getNickName());
        fullHouseDesignPlanDetail.setGmtModified(date);
        fullHouseDesignPlanDetail.setIsDeleted(FullHouseConstant.FULL_HOUSE_IS_DELETED_NO);
        fullHouseDesignPlanDetail.setRemark("");
        // 加入到集合中
        log.info("增加全屋方案详情到待插入集合中，fullHouseDesignPlanDetail:{}", gson.toJson(fullHouseDesignPlanDetail));
        detailList.add(fullHouseDesignPlanDetail);
    }

    /**
     * created by zhangchengda
     * 2018/9/19 14:46
     * 设置全屋方案里的单空间方案的优先级:
     * 查找当前集合中是否有同空间类型的全屋方案详情数据，第一条加进来的数据优先级最高，第二条其次，依次递减
     *
     * @param detailList                全屋方案detail集合
     * @param spaceType                 空间类型
     * @param fullHouseDesignPlanDetail 当前全屋方案detail
     * @throws BizException
     */
    private void setPriorityLevel(List<FullHouseDesignPlanDetail> detailList, int spaceType, FullHouseDesignPlanDetail fullHouseDesignPlanDetail) throws BizException {
        int num = detailList.stream().filter(detail -> detail.getSpaceType().equals(spaceType)).collect(Collectors.toList()).size();
        int priorityLevel = FullHouseConstant.FULL_HOUSE_DETAIL_PRIORITY_LEVEL_HEIGHEST - FullHouseConstant.FULL_HOUSE_DETAIL_PRIORITY_LEVEL_STEP * num;
        if (priorityLevel < FullHouseConstant.FULL_HOUSE_DETAIL_PRIORITY_LEVEL_LOWEST) {
            throw new BizException("方案优先级异常，priorityLevel:" + priorityLevel);
        }
        fullHouseDesignPlanDetail.setPriorityLevel(priorityLevel);
    }

    /**
     * created by zhangchengda
     * 2018/9/20 11:07
     * 获取全屋的720UUID
     *
     * @param detailList 全屋方案详情数据集合
     * @param user       当前用户
     * @param fileKey    720资源fileKey(用于区分推荐方案和效果图方案)
     * @return 720UUID
     * @throws BizException
     */
    private String getVrUuid(List<FullHouseDesignPlanDetail> detailList, SysUser user, String fileKey, Integer houseId) throws BizException {
        // 720制作对象创建
        log.info("获取全屋的720UUID,detailList:{}", gson.toJson(detailList));
        DesignPlanStoreReleaseAdd designPlanStoreReleaseAdd = new DesignPlanStoreReleaseAdd();
        List<DesignPlanStoreReleaseDetailsAdd> detailsAddList = new ArrayList<>(detailList.size());
        designPlanStoreReleaseAdd.setShareTitle("全屋方案");
        designPlanStoreReleaseAdd.setShareType(VrMakeConstant.SHARE_TYPE_FULL_HOUSE);
        designPlanStoreReleaseAdd.setDesignPlanStoreReleaseDetailsAddList(detailsAddList);
        designPlanStoreReleaseAdd.setHouseId(houseId);
        // 填入数据
        detailList.forEach(fullHouseDetail -> {
            DesignPlanStoreReleaseDetailsAdd designPlanStoreReleaseDetailsAdd = new DesignPlanStoreReleaseDetailsAdd();
            designPlanStoreReleaseDetailsAdd.setDesignPlanId(fullHouseDetail.getRenderScenePlanId());
            designPlanStoreReleaseDetailsAdd.setRecommendDesignPlanId(fullHouseDetail.getRecommendedPlanGroupPrimaryId());
            // 装进我家时用的是效果图方案，全屋制作时用的是推荐方案
            if (ResRenderPicConstant.FILE_KEY_DESIGN_DESIGNPLAN_RENDER_PIC.equals(fileKey)) {
                designPlanStoreReleaseDetailsAdd.setResourceId(fullHouseDetail.getPlanRenderResourceId());
            } else if (ResRenderPicConstant.FILE_KEY_DESIGN_RECOMMENDED_RENDER_PIC.equals(fileKey)) {
                designPlanStoreReleaseDetailsAdd.setResourceId(fullHouseDetail.getPlanRecommendedResourceId());
            }
            designPlanStoreReleaseDetailsAdd.setDesignPlanType(fullHouseDetail.getSpaceType());
            designPlanStoreReleaseDetailsAdd.setRenderingType(VrMakeConstant.RENDER_TYPE_SINGLE_POINT_VR);
            designPlanStoreReleaseDetailsAdd.setIsMain(fullHouseDetail.getSpaceType() ==
                    FullHouseConstant.SPACE_TYPE_LIVING_DINING_ROOM ? 1 : 0);
            detailsAddList.add(designPlanStoreReleaseDetailsAdd);
        });
        LoginUser loginUser = new LoginUser();
        loginUser.setId(user.getId().intValue());
        loginUser.setLoginName(user.getUserName());
        // 调用720制作服务
        log.info("调用720制作服务,designPlanStoreReleaseAdd:{}, loginUser:{}, fileKey:{}",
                gson.toJson(designPlanStoreReleaseAdd),
                gson.toJson(loginUser),
                fileKey);
        MakeDesignPlanStoreReleaseResultVo back = designPlanStoreReleaseService.makePanorama(designPlanStoreReleaseAdd, loginUser);
        if (back != null) {
            String vrUuid = back.getUuid();
            return vrUuid;
        } else {
            throw new BizException("720制作失败,UUID为空");
        }
    }
}
