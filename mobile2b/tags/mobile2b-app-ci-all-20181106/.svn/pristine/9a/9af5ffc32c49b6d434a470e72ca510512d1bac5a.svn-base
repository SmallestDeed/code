package com.nork.decorateOrder.controller;

import com.nork.common.model.LoginUser;
import com.nork.common.model.ResponseEnvelope;
import com.nork.common.util.Utils;
import com.nork.decorateOrder.common.PageHelper;
import com.nork.decorateOrder.constant.DecorateOrderConstants;
import com.nork.decorateOrder.dao.DecorateOrderMapper;
import com.nork.decorateOrder.model.DecorateOrder;
import com.nork.decorateOrder.model.input.DecorateCustomerListQuery;
import com.nork.decorateOrder.model.input.DecorateOrderUpdate;
import com.nork.decorateOrder.model.input.RefundApplication;
import com.nork.decorateOrder.model.output.DecorateCustomerDetail;
import com.nork.decorateOrder.model.output.DecorateCustomerVO;
import com.nork.decorateOrder.model.output.NotBeenSelectedOrderVO;
import com.nork.decorateOrder.service.DecorateOrderService;
import com.nork.pay.common.IdGenerator;
import com.nork.pay.constant.PayAccountConstants;
import com.nork.pay.model.PayAccount;
import com.nork.pay.model.PayOrder;
import com.nork.pay.service.PayAccountService;
import com.nork.pay.service.PayOrderService;
import com.nork.system.config.SystemConfig;
import com.nork.system.model.SysUserMessage;
import com.nork.system.service.SysUserMessageService;
import com.sandu.common.LoginContext;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.transaction.Transactional;

/**
* @description： 客户订单信息接口
* @author : WangHaiLin
* @date : 2018/10/19 17:56
*
*/
@Controller
@RequestMapping("/{style}/mobile/decorateOrder")
public class DecorateOrderController {

    private static Logger logger = Logger.getLogger(DecorateOrderController.class);

    private final static String LOGPREFIX = "[客户订单模块]:";

    @Autowired
    private DecorateOrderService decorateOrderService;

    @Autowired
    private DecorateOrderMapper decorateOrderMapper;

    @Autowired
    private SysUserMessageService sysUserMessageService;

    @Autowired
    private PayAccountService payAccountService;

    @Autowired
    private PayOrderService payOrderService;

    /**
     * 客户订单列表查询接口：
     * 订单类型：0-客户店铺预约;1-抢单;2-平台自动派单;3-内部推荐，不传的时候查全部
     * @param query
     * @return
     */
    @RequestMapping(value = "/getList", method = RequestMethod.GET)
    @ResponseBody
    public ResponseEnvelope<DecorateCustomerVO> getCustomListInfo( DecorateCustomerListQuery query) {
        //校验参数
        LoginUser loginUser = LoginContext.getLoginUser(LoginUser.class);
		
        if(loginUser == null || loginUser.getId() == null) {
            logger.error(LOGPREFIX + "(loginUser == null || loginUser.getId() == null) = true");
            return new ResponseEnvelope<>(false, "请重新登录");
        }
        //获取当前登录用户Id
        query.setUserId(loginUser.getId());
        try{
            //查询客户订单数量
            int count = decorateOrderService.getCount(query);

            //分页处理
            PageHelper helper = PageHelper.getPage(count, query.getLimit(), query.getStart());
            query.setStart(helper.getStart());
            query.setLimit(helper.getPageSize());

            List<DecorateCustomerVO> list=null;
            //客户订单数量大于零时进行列表查询
            if (count>0){
                 list= decorateOrderService.getList(query);
            }
            return new ResponseEnvelope<>(true,"none" ,count,list);

        }catch (Exception e){
            logger.error(LOGPREFIX + "(客户订单列表查询--getCustomerList方法异常 ：)"+e);
            return new ResponseEnvelope<>(false,"系统异常");
        }
    }

    /**
     * 通过订单Id查询客户订单详细信息
     * @param orderId 订单Id
     * @return
     */
    @RequestMapping(value = "/getDetail", method = RequestMethod.GET)
    @ResponseBody
    public Object getCustomListInfo(Integer orderId) {
        //校验参数
        if( null==orderId) {
            logger.error(LOGPREFIX + "(orderId == null ) = true");
            return new ResponseEnvelope<DecorateCustomerDetail>(false, "请传递orderId");
        }
        try{
            //查询客户订单详情
            DecorateCustomerDetail customerDetail = decorateOrderService.getCustomerDetail(orderId);
            if (null==customerDetail){
                return new ResponseEnvelope<DecorateCustomerDetail>("查无此信息");
            }
            return new ResponseEnvelope<DecorateCustomerDetail>(true ,customerDetail);

        }catch (Exception e){
            logger.error(LOGPREFIX + "(客户订单详情查--getDetail方法询异常 ：)"+e);
            return new ResponseEnvelope<DecorateCustomerDetail>(false,"系统异常");
        }
    }


    /**
     * 修改订单信息
     * @param update 入参
     * @return
     */
    @Transactional
    @RequestMapping(value = "/update", method = RequestMethod.POST)
    @ResponseBody
    public ResponseEnvelope updateInfo(@RequestBody DecorateOrderUpdate update) {
        //校验参数
        if(null==update.getOrderId()) {
            logger.error(LOGPREFIX + "(orderId == null ) = true");
            return new ResponseEnvelope<>(false, "订单Id为空");
        }
        //获取当前登录用户信息40610
        LoginUser loginUser = LoginContext.getLoginUser(LoginUser.class);
        if(loginUser == null || loginUser.getId() == null) {
            logger.error(LOGPREFIX + "(loginUser == null || loginUser.getId() == null) = true");
            return new ResponseEnvelope<>(false, "请重新登录");
        }
        //构造修改入参
        DecorateOrder order = this.paramTransform(update, loginUser);
        logger.error(LOGPREFIX + "(修改客户订单状态---入参--)"+order.toString());
        try{
            //修改订单信息
            boolean result = decorateOrderService.updateOrder(order);
            if (result){
                /**
                 * 如果修改成功，并且修改的状态是“已签约”，appoint_user_id 不为空，插入sys_user_message表
                 * 修改的状态是“已签约”，则另外两家未选中的需要退还度币
                 * **/
                //处理用户消息  开始
                if (null!=update.getOrderStatus()&&update.getOrderStatus().equals(DecorateOrderConstants.DECORATEORDER_ORDERSTATUS_HAVE_HAS_SIGNED)){
                    logger.error(LOGPREFIX + "(修改客户订单状态（已签约）成功---添加消息--start)");
                    DecorateCustomerDetail detail = decorateOrderMapper.getById(update.getOrderId().intValue());
                    logger.error(LOGPREFIX + "(修改客户订单状态（已签约）成功---查询预约用户Id)"+detail.getAppointUserId());
                    //预约用户Id不为空，则向sys_user_message表添加信息
                    if (null!=detail.getAppointUserId()){
                        //添加客户消息
                        SysUserMessage message = createMessages(detail.getAppointUserId(), loginUser.getLoginName(), order.getId(),
                                "恭喜您签约成功，赶快去评价一下吧。", "B端修改订单状态---已签约", "签约成功消息");
                        int add = sysUserMessageService.add(message);
                        if (add<0){
                            return new ResponseEnvelope<>(false,"订单状态修改成功，添加客户消息失败");
                        }
                        //添加选中装企消息
                        SysUserMessage message2=createMessages(loginUser.getId().longValue(), loginUser.getLoginName(), order.getId(),
                                "恭喜您签约成功，为不影响您后续接单，请在24小时内上传合同。", "B端修改订单状态---已签约", "签约成功消息");
                        logger.error(LOGPREFIX + "(修改客户订单状态（已签约）成功---添加消息--)"+message.toString());
                        int add2 = sysUserMessageService.add(message2);
                        if (add2<0){
                            return new ResponseEnvelope<>(false,"订单状态修改成功，添加装企消息失败");
                        }
                        logger.error(LOGPREFIX + "(修改客户订单状态（已签约）成功---添加消息--end)");

                        /**退度币开始**/
                        logger.error(LOGPREFIX + "(修改客户订单状态（已签约）成功---自动退款--start)");
                        ResponseEnvelope refund = this.refund(detail.getAppointUserId());
                        if (!refund.isSuccess()){
                            return refund;
                        }
                        logger.error(LOGPREFIX + "(修改客户订单状态（已签约）成功---自动退款--end)");
                        /**退度币结束**/
                    }
                    return new ResponseEnvelope<>(false ,"修改成功,但是签约用户id为空，退款和处理用户消息失败");
                }
               // 处理用户消息结束
                return new ResponseEnvelope<>(true ,"修改成功");
            }
            return new ResponseEnvelope<>(false,"修改失败");
        }catch (Exception e){
            logger.error(LOGPREFIX + "(修改客户订单--updateInfo方法异常 ：)"+e);
            return new ResponseEnvelope<>(false,"系统异常");
        }
    }


    /**
     * 提交退款申请
     * @param refund
     * @return
     */
    @RequestMapping(value = "/refund/application", method = RequestMethod.POST)
    @ResponseBody
    public ResponseEnvelope refundApplication(@RequestBody RefundApplication refund) {
        //校验参数--start
        if(null==refund.getOrderId()) {
            logger.error(LOGPREFIX + "(orderId == null ) = true");
            return new ResponseEnvelope<>(false, "订单Id为空");
        }
        if (null==refund.getRefundReason()){
            logger.error(LOGPREFIX + "(refundReason == null ) = true");
            return new ResponseEnvelope<>(false, "申请退款原因为空");
        }
        //校验参数--end
        //获取当前登录用户信息
        LoginUser loginUser = LoginContext.getLoginUser(LoginUser.class);
        if(loginUser == null || loginUser.getId() == null) {
            logger.error(LOGPREFIX + "(loginUser == null || loginUser.getId() == null) = true");
            return new ResponseEnvelope<>(false, "请重新登录");
        }
        //构造退款申请service层入参
        DecorateOrder order = this.getInfoFromRefund(refund, loginUser);
        try{
            //提交退款申请
            boolean result = decorateOrderService.updateOrder(order);
            if (!result){
                return new ResponseEnvelope<>(false,"添加退款申请失败");
            }
            return new ResponseEnvelope<>(true ,"提交退款申请成功");

        }catch (Exception e){
            logger.error(LOGPREFIX + "(退款申请--refundApplication方法异常 ：)"+e);
            return new ResponseEnvelope<>(false,"系统异常");
        }
    }


    /**
     *构造退款申请入参
     *
     * 退款申请实际是修改DecorateOrder表中跟退款相关的数据
     * @param refund
     * @param loginUser
     * @return
     */
    private DecorateOrder getInfoFromRefund(RefundApplication refund, LoginUser loginUser) {
        DecorateOrder order=new DecorateOrder();
        order.setId(refund.getOrderId());
        order.setRefundReason(refund.getRefundReason());
        //退款类型---用户申请
        order.setRefundType(DecorateOrderConstants.REFUND_TYPE_BY_USER);
        //退款状态---待审核
        order.setRefundStatus(DecorateOrderConstants.REFUND_STATUS_WAITING);
        order.setRefundApplyTime(new Date());
        order.setGmtModified(new Date());
        order.setModifier(loginUser.getLoginName());
        return order;
    }


    /**
     * 参数转换，构造修改操作服务层入参
     * @param update 接口入参
     * @param loginUser 当前用户
     * @return
     */
    private DecorateOrder paramTransform(DecorateOrderUpdate update, LoginUser loginUser) {
        DecorateOrder order=new DecorateOrder();
        order.setId(update.getOrderId());
        if (null!=update.getOrderStatus()){
            order.setOrderStatus(update.getOrderStatus());//订单状态
            //如果是将订单状态修改为“已签约”，则加上签约时间
            if(update.getOrderStatus().equals(DecorateOrderConstants.DECORATEORDER_ORDERSTATUS_HAVE_HAS_SIGNED)){
                order.setSignTime(new Date(System.currentTimeMillis()));
                order.setContractStatus(0);//待上传合同
            }
        }
       if (null!=update.getRemark()){
           order.setRemark2(update.getRemark());
       }
        order.setModifier(loginUser.getLoginName()!=null?loginUser.getLoginName():"noName");
        order.setGmtModified(new Date());
        return order;
    }


    /**
     * 构造用户消息
     * @param userId 用户Id
     * @param creator 创建者
     * @param orderId 订单Id
     * @param content 内容
     * @param remark 备注
     * @param title 标题
     * @return
     */
    private SysUserMessage createMessages(Long userId,String creator,Long orderId,String content,String remark,String title){
        SysUserMessage message=new SysUserMessage();
        message.setUserId(userId.intValue());
        message.setContent(content);
        message.setNeedComment(1);//需要评价
        message.setCommentFlag(0);//未评价
        message.setMessageType(2);//系统消息
        message.setIsRead(0);
        message.setStatus(1);//成功
        message.setCreator(creator);
        message.setRemark(remark);
        message.setTitle(title);
        message.setTaskId(orderId.intValue());//taskId=orderId
        return message;
    }


    /**
     * 未选中装企自动退款
     * @param customerId 客户Id
     * @return
     */
    private ResponseEnvelope refund(Long customerId){
        List<NotBeenSelectedOrderVO> orderInfo = decorateOrderService.getNotBeenSelectedOrder(customerId);
        logger.info(LOGPREFIX + " 修改客户订单状态（已签约）成功---自动退款对象信息:"+orderInfo);
        if (null!=orderInfo&&orderInfo.size()>0){
            //循环需要退款的订单
            for (NotBeenSelectedOrderVO info:orderInfo) {
                //校验退款用户Id
                if (null==info.getUserId()){
                    return new ResponseEnvelope(false,"查询退款用户Id为空");
                }
                //校验退款金额
                if (null==info.getPrice()){
                    return new ResponseEnvelope(false,"退款用户退款金额为空");
                }
                //通过退款用户Id和平台获取退款用户的支付信息表
                PayAccount payAccount = payAccountService.get(info.getUserId(), PayAccountConstants.PAYACCOUNT_PLATFORMBUSSINESSTYPE_2B);
                if (payAccount==null){
                    return new ResponseEnvelope(false,"查询退款用户--支付账户信息失败");
                }
                //取退款信息Id和余额
                Integer id=payAccount.getId();
                Double balanceAmount=payAccount.getBalanceAmount();
                //赋新值(退款时消费金额减少，余额增加)
                payAccount.setBalanceAmount(payAccount.getBalanceAmount()+(info.getPrice()*10*10));
                payAccount.setConsumAmount(payAccount.getConsumAmount()-(info.getPrice()*10*10));
                payAccount.setModifier("B端系统退款");
                payAccount.setGmtModified(new Date());
                //调取服务进行退款
                int result = payAccountService.updateBalance(payAccount, id, balanceAmount);
                if (result<0){
                    return new ResponseEnvelope(false,"退款失败，失败用户Id: "+info.getUserId());
                }
                //退款成功，写入记录
                PayOrder payOrder=buildPayOrder(info.getUserId().intValue());
                payOrderService.add(payOrder);
                //退款成功，修改订单退款状态
                boolean b = this.updateRefundStatus(info.getOrderId());
                if (!b){
                    return new ResponseEnvelope(false,"退款成功，修改订单退款状态失败 ");
                }
                //退款成功，未选中装企消息
                SysUserMessage messages = this.createMessages(info.getUserId(), "Admin-B端系统字段生成", info.getOrderId(),
                        "很遗憾客户未选中您，客单扣款已原路返回", "B端系统退款", "退款成功");
                sysUserMessageService.add(messages);
            }
            return new ResponseEnvelope(true,"退款完成");
        }
        return new ResponseEnvelope(false,"无装企用户需要退款");
    }


    /**
     *系统退款成功自动修改订单状态
     */
    private boolean updateRefundStatus(Long orderId){
        DecorateOrder decorateOrder=new DecorateOrder();
        decorateOrder.setId(orderId);
        decorateOrder.setRefundType(DecorateOrderConstants.REFUND_TYPE_BY_SYSTEM);//系统自动退款
        decorateOrder.setRefundStatus(DecorateOrderConstants.REFUND_STATUS_PASS);//审核通过
        decorateOrder.setRefundApplyTime(new Date());
        decorateOrder.setOrderStatus(DecorateOrderConstants.DECORATEORDER_ORDERSTATUS_FINISH);
        return decorateOrderService.updateOrder(decorateOrder);
    }


    /**
     * 生成退款单
     * @param UserId 用户Id
     * @return
     */
    private PayOrder buildPayOrder(Integer UserId) {
        Date now = new Date();
        PayOrder payOrder = new PayOrder();
        payOrder.setUserId(UserId);
        payOrder.setProductType("refund");
        payOrder.setProductId(0);
        payOrder.setProductName("签约成功B端自动退未选中的装企客单费");
        payOrder.setProductDesc("签约成功B端自动退未选中的装企客单费");
        payOrder.setPayType("refund");
        payOrder.setOrderNo(IdGenerator.generateNo());
        payOrder.setPayState("SUCCESS");
        payOrder.setOrderDate(now);
        payOrder.setAdjustFee(0);
        payOrder.setSysCode(Utils.getCurrentDateTime(Utils.DATETIMESSS) + "_" + Utils.generateRandomDigitString(6));
        payOrder.setCreator("Admin-B端自动退款");
        payOrder.setGmtCreate(now);
        payOrder.setModifier("Admin-B端自动退款");
        payOrder.setGmtModified(now);
        payOrder.setIsDeleted(0);
        payOrder.setPlatformId(1);
        return payOrder;
    }


}
