package com.nork.mobile.service.impl;

import com.google.gson.Gson;
import com.nork.common.model.LoginUser;
import com.nork.common.model.ResponseEnvelope;
import com.nork.common.util.Utils;
import com.nork.design.model.DesignPlanRecommended;
import com.nork.design.model.PlanRecommendedListModel;
import com.nork.design.service.DesignPlanRecommendedServiceV2;
import com.nork.mobile.model.search.DesignPlanRecommendedModel;
import com.nork.mobile.service.MobileDesignPlanRecommendedService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service("mobileDesignPlanRecommendedService")
public class MobileDesignPlanRececommendedServiceImpl implements MobileDesignPlanRecommendedService {

    private Gson gson = new Gson();
    @Autowired
    private DesignPlanRecommendedServiceV2 designPlanRecommendedServiceV2;

    /**
     * 获取设计方案推荐列表
     */
    @Override
    public Object getPlanRecommendedList(String creator, String brandName, String houseType,
                                         String livingName, String areaValue, String designRecommendedStyleId, String displayType, String msgId,
                                         LoginUser loginUser, Integer limit, Integer start, Integer templateId,
                                         String planName, Integer platformId, Long companyId) {

        PlanRecommendedListModel model = new PlanRecommendedListModel();
        model.setCreator(creator);
        model.setBrandName(brandName);
        model.setHouseType(houseType);
        model.setLivingName(livingName);
        model.setAreaValue(areaValue);
        model.setDesignRecommendedStyleId(designRecommendedStyleId);
        model.setDisplayType(displayType);
        model.setMsgId(msgId);
        model.setLoginUser(loginUser);
        model.setLimit(limit);
        model.setStart(start);
        model.setTemplateId(templateId);
        model.setPlanName(planName);
        model.setPlatformId(platformId);
        model.setCompanyId(companyId);

        return designPlanRecommendedServiceV2.getPlanRecommendedList(model);
    }

    @Override
    public DesignPlanRecommended getMatchPlan(DesignPlanRecommendedModel designPlanRecommendedModel) {
        Integer planRecommendedId = designPlanRecommendedModel.getPlanRecommendedId();
        Integer templateId = designPlanRecommendedModel.getTemplateId();

        String result = getMatchPlanResult(planRecommendedId, templateId);
        if (result == null || "".equals(result)) {
            return null;
        }
        ResponseEnvelope responseEnvelope = gson.fromJson(result, ResponseEnvelope.class);
        if (!responseEnvelope.isSuccess()) {
            return null;
        }
        if (responseEnvelope.getObj() == null) {
            return null;
        }
        planRecommendedId = ((Double) responseEnvelope.getObj()).intValue();
        if (null == planRecommendedId || planRecommendedId.intValue() == 0) {
            return null;
        }
//        planRecommendedId = Integer.parseInt(obj.toString());
        DesignPlanRecommended designPlanRecommended = designPlanRecommendedServiceV2.get(planRecommendedId);

        return designPlanRecommended;
    }

    /**
     * 调用http请求
     *
     * @param planRecommendedId
     * @param templateId
     * @return
     */
    private String getMatchPlanResult(Integer planRecommendedId, Integer templateId) {
        String domainName = Utils.getPropertyName("app", "app.onekey.url", "");
        String url = domainName + "/online/web/design/intelligenceDecoration/getBestMatchInPlanGroup.htm?designTemplateId=" + templateId + "&recommendedPlanId=" + planRecommendedId;

//        HashMap<String, Integer> params = new HashMap<>();
//        params.put("designTemplateId",templateId);
//        params.put("recommendedPlanId",planRecommendedId);

//        return Utils.doPostMethod(url, params);
        return Utils.doGetMethod(url);
    }

}
