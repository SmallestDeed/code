package com.nork.task.controller;

import com.nork.common.util.FileUploadUtils;
import com.nork.common.util.ThumbnailUtil;
import com.nork.common.util.Tools;
import com.nork.common.util.Utils;
import com.nork.system.model.ResRenderPic;
import com.nork.task.dao.SysTaskMapper;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.InputStream;
import java.net.URL;
import java.util.List;


/**
 * @Author Gao Jun
 * @Description
 * @Date:Created Administrator in 下午 7:41 2018/6/5 0005
 * @Modified By:
 */
@Component
public class RefreshPicThread extends Thread {

    private static Logger logger = LoggerFactory.getLogger(RefreshPicThread.class);
    public final static String RESOURCE_URL = Utils.getValue("app.resources.url", "https://show.sanduspace.com").trim();

    private Integer start;
    private Integer limit;
    private ApplicationContext applicationContext;

    public void setStartAndLimit(Integer start, Integer limit) {
        this.start = start;
        this.limit = limit;
    }

    public RefreshPicThread(ApplicationContext applicationContext) {
        this.applicationContext = applicationContext;
    }

    public void run() {

        SysTaskMapper sysTaskMapper = applicationContext.getBean(SysTaskMapper.class);

        logger.info("我获取到参数了！！！-------------mapper = " + sysTaskMapper + ", start = " + start + ", limit = " + limit);
        //获取图片集合
        List<ResRenderPic> smallPicList = sysTaskMapper.getOriginalSmallPic(start, limit);
        logger.info("获取到所有缩略图了。。。。。。。");
        if (smallPicList == null || smallPicList.size() <= 0) {
            return;
        }
        List<ResRenderPic> largePicList = sysTaskMapper.getOriginalLargePic(smallPicList);
        logger.info("我获取到原图集合了！！！------------------");
        //遍历压缩图片
        for (ResRenderPic smallPic : smallPicList) {
            for (ResRenderPic largePic : largePicList) {

                //参数校验
                if (largePic == null || smallPic == null) {
                    logger.error("RefreshPicThread : run ---- pic have null !!! largePic=" + largePic + ", smallPic=" + smallPic);
                    continue;
                }
                //获取id并参数校验
                Integer largePicId = largePic.getId();
                Integer smallPicPid = smallPic.getPid();
                if (largePicId == null || smallPicPid == null) {
                    logger.error("RefreshPicThread : run ---- picId have null !!! largePicId=" + largePicId + ", smallPicPid=" + smallPicPid,
                            "largePic=" + largePic + ", smallPic=" + smallPic);
                    continue;
                }
                //pid和id是否相同
                if (largePicId.equals(smallPicPid)) {
//                    logger.info("我遇到id相同的了！！！--------------------largePicId = " + largePicId);
                    //获取路径
                    String largePicPath = largePic.getPicPath();
                    String smallPicPath = smallPic.getPicPath();
                    //参数判断
                    if (StringUtils.isEmpty(largePicPath) || StringUtils.isEmpty(smallPicPath)) {
                        logger.error("RefreshPicThread : run ---- picPath have null !!! " +
                                "largePicId=" + largePicId + ", largePicPath=" + largePicPath + ", smallPicPid=" + smallPicPid + ", smallPicPath=" + smallPicPath);
                        continue;
                    }

                    largePicPath = RESOURCE_URL + largePicPath;

                    //获取新缩略图存储路径
                    String storePath = Utils
                            .getPropertyName("config/res", "auto.design.designPlan.render.upload.path", "/auto/design/designPlan/render/")
                            .trim();
                    /* 渲染图存放绝对路径 */
                    storePath = ("linux".equals(FileUploadUtils.SYSTEM_FORMAT) ? storePath : storePath.replace("/", "\\"));
                    String uploadRoot = Tools.getRootPath(storePath, "D:\\nork\\Resource");
                    String storeRealPath = uploadRoot + storePath;
                    String smallFileName = smallPicPath.substring(smallPicPath.lastIndexOf("/") + 1);
                    String targetSmallFilePath = Utils.replaceDate(storeRealPath) + "small/" + smallFileName;
                    try {
                        URL fileUrl = new URL(largePicPath);
                        InputStream is = fileUrl.openConnection().getInputStream();

                        ThumbnailUtil.refreshPicData(fileUrl, targetSmallFilePath);
                        logger.info("refreshPic success!!!  largePicId=" + largePicId);
                    } catch (Exception e) {
                        logger.error("RefreshPicThread : run ---- exception=" + e +
                                "------- largePicId=" + largePicId + ", largePicPath=" + largePicPath + ", smallPicPid=" + smallPicPid + ", smallPicPath=" + smallPicPath);
                    }

                    File smallFile = new File(targetSmallFilePath);
                    String dbFilePath = Utils.getRelativeUrlByAbsolutePath(smallFile.getAbsolutePath());
                    ResRenderPic smallRenderPic = new ResRenderPic();
                    smallRenderPic.setPicPath(dbFilePath);
                    smallRenderPic.setId(smallPic.getId());
                    try {
                        sysTaskMapper.updatePicPath(smallRenderPic);
                    } catch (Exception e) {
                        logger.error("RefreshPicThread : run ---- exception=" + e + "--------smallPicId=" + smallPic.getId());
                    }
                }
            }
        }
        logger.info("我全部执行完了！！！--------------------------");

    }
}
