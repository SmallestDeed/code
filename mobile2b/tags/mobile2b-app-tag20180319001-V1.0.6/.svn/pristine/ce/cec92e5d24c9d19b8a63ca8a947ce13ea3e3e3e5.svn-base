package com.nork.task.controller;

import com.nork.common.util.ThumbnailUtil;
import com.nork.system.model.ResRenderPic;
import com.nork.task.dao.SysTaskMapper;
import net.coobird.thumbnailator.Thumbnails;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import java.io.File;
import java.util.List;


/**
 * @Author Gao Jun
 * @Description
 * @Date:Created Administrator in 下午 7:41 2018/6/5 0005
 * @Modified By:
 */
public class RefreshPicThread extends Thread {

    private static Logger logger = LoggerFactory.getLogger(RefreshPicThread.class);

    @Autowired
    private SysTaskMapper sysTaskMapper;

    private Integer start;

    private Integer limit;

    public RefreshPicThread(Integer start, Integer limit) {
        this.start = start;
        this.limit = limit;
    }

    public void run() {
        //获取图片集合
        List<ResRenderPic> smallPicList = sysTaskMapper.getOriginalSmallPic(start, limit);
        List<ResRenderPic> largePicList = sysTaskMapper.getOriginalLargePic(smallPicList);
        //遍历压缩图片
        for (ResRenderPic smallPic : smallPicList) {
            for (ResRenderPic largePic : largePicList) {
                //参数校验
                if (largePic == null || smallPic == null) {
                    logger.error("RefreshPicThread : run ---- pic have null !!! largePic=" + largePic + ", smallPic=" + smallPic);
                    continue;
                }
                //获取id并参数校验
                Integer largePicId = largePic.getId();
                Integer smallPicPid = smallPic.getPid();
                if (largePicId == null || smallPicPid == null) {
                    logger.error("RefreshPicThread : run ---- picId have null !!! largePicId=" + largePicId + ", smallPicPid=" + smallPicPid,
                            "largePic=" + largePic + ", smallPic=" + smallPic);
                    continue;
                }
                //pid和id是否相同
                if (largePicId.equals(smallPicPid)) {
                    //获取路径
                    String largePicPath = largePic.getPicPath();
                    String smallPicPath = smallPic.getPicPath();
                    //参数判断
                    if (StringUtils.isEmpty(largePicPath) || StringUtils.isEmpty(smallPicPath)) {
                        logger.error("RefreshPicThread : run ---- picPath have null !!! " +
                                "largePicId=" + largePicId + ", largePicPath=" + largePicPath + ", smallPicPid=" + smallPicPid + ", smallPicPath=" + smallPicPath);
                        continue;
                    }

                    //压缩图片
                    try {
                        Thumbnails.of(new File(largePicPath))
                                .size(ThumbnailUtil.PIC_WIDTH, ThumbnailUtil.PIC_HIGHT)
                                .toFile(new File(smallPicPath));
                        logger.info("refreshPic success!!!  largePicId="+largePicId+", smallPicPid="+smallPicPid);
                    } catch (Exception e) {
                        logger.error("RefreshPicThread : run ---- exception" + e,
                                "largePicId=" + largePicId + ", largePicPath=" + largePicPath + ", smallPicPid=" + smallPicPid + ", smallPicPath=" + smallPicPath);
                    }

                }
            }
        }


    }
}
