package com.nork.task.controller;

import com.nork.common.model.ResponseEnvelope;
import com.nork.task.dao.SysTaskMapper;
import net.coobird.thumbnailator.Thumbnails;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import java.io.File;
import java.io.InputStream;
import java.net.URL;

/**
 * @Author Gao Jun
 * @Description
 * @Date:Created Administrator in 下午 4:08 2018/6/5 0005
 * @Modified By:
 */
@Controller
@RequestMapping("/{style}/refreshpic")
public class RefreshPicController {

    private static Logger logger = LoggerFactory.getLogger(RefreshPicController.class);

    @Autowired
    private SysTaskMapper sysTaskMapper;
    private ApplicationContext applicationContext;

    @Autowired
    public RefreshPicController(ApplicationContext applicationContext) {
        this.applicationContext = applicationContext;
    }

    @RequestMapping("/refreshpicdata")
    @ResponseBody
    public ResponseEnvelope refreshPicData(HttpServletRequest request) {
//        LoginUser loginUser = LoginContext.getLoginUser(LoginUser.class);
//        if (loginUser == null) {
//            return new ResponseEnvelope(false, "请登录");
//        }
        logger.info("我进来controller了！！！---------------");

//        RefreshPicThread refreshPicThread1 = new RefreshPicThread(applicationContext);
//        refreshPicThread1.setStartAndLimit(0,10000);
//        RefreshPicThread refreshPicThread2 = new RefreshPicThread(applicationContext);
//        refreshPicThread2.setStartAndLimit(10000,10000);
//        RefreshPicThread refreshPicThread3 = new RefreshPicThread(applicationContext);
//        refreshPicThread3.setStartAndLimit(20000,10000);
//        RefreshPicThread refreshPicThread4 = new RefreshPicThread(applicationContext);
//        refreshPicThread4.setStartAndLimit(30000,10000);
//        RefreshPicThread refreshPicThread5 = new RefreshPicThread(applicationContext);
//        refreshPicThread5.setStartAndLimit(40000,10000);
//        RefreshPicThread refreshPicThread6 = new RefreshPicThread(applicationContext);
//        refreshPicThread6.setStartAndLimit(50000,10000);

        RefreshPicThread refreshPicThread1 = new RefreshPicThread(applicationContext);
        refreshPicThread1.setStartAndLimit(0, 10);
        RefreshPicThread refreshPicThread2 = new RefreshPicThread(applicationContext);
        refreshPicThread2.setStartAndLimit(10, 10);
        RefreshPicThread refreshPicThread3 = new RefreshPicThread(applicationContext);
        refreshPicThread3.setStartAndLimit(20, 10);
        RefreshPicThread refreshPicThread4 = new RefreshPicThread(applicationContext);
        refreshPicThread4.setStartAndLimit(30, 10);
        RefreshPicThread refreshPicThread5 = new RefreshPicThread(applicationContext);
        refreshPicThread5.setStartAndLimit(40, 10);
        RefreshPicThread refreshPicThread6 = new RefreshPicThread(applicationContext);
        refreshPicThread6.setStartAndLimit(50, 10);

        refreshPicThread1.start();
        refreshPicThread2.start();
        refreshPicThread3.start();
        refreshPicThread4.start();
        refreshPicThread5.start();
        refreshPicThread6.start();


        logger.info("我准备返回了！！！---------------------------------------");
        return new ResponseEnvelope(true, "已完成");
    }


    @RequestMapping(value = "/demo", method = RequestMethod.GET)
    @ResponseBody
    public ResponseEnvelope demo(Integer picId) {
//        ResRenderPic largePic = sysTaskMapper.selectByPicId(picId);
//        ResRenderPic smallPic = sysTaskMapper.selectByPid(picId);

//        String largePicPath = largePic.getPicPath();
//        String smallPicPath = smallPic.getPicPath();

//        largePicPath = "show.dev.sanduspace.com" + largePicPath;
//        smallPicPath = "show.dev.sanduspace.com" + smallPicPath;
        String largePicPath = "show.dev.sanduspace.com/AA/c_basedesign/2017/08/17/20/design/designPlanRecommended/render/493794_1502971553865.jpg";
        String smallPicPath = "C:\\Users\\Administrator\\Desktop\\888.jpg";

        try {
            URL fileUrl = new URL(largePicPath);
            Thumbnails.of(fileUrl)
                    .outputQuality(0.9)
                    .size(1080, 1080)
                    .toFile(new File(smallPicPath));
        } catch (Exception e) {
            logger.error("报错了。。。。。。。。。。。。。e:" + e);
            return new ResponseEnvelope(false, "exception:" + e);
        }
        return new ResponseEnvelope(true, "ok");
    }

    public static void main(String[] args) {

        String largePicPath = "http://show.dev.sanduspace.com/AA/c_basedesign/2017/08/17/20/design/designPlanRecommended/render/369018_1502973270657.jpg";
        String smallPicPath = "C:\\Users\\Administrator\\Desktop\\888.jpg";

        try {
            URL fileUrl = new URL(largePicPath);
            InputStream is = fileUrl.openConnection().getInputStream();
            Thumbnails.of(fileUrl)
                    .outputQuality(0.9)
                    .size(1080, 1080)
                    .toFile(new File(smallPicPath));
        } catch (Exception e) {
            logger.error("报错了。。。。。。。。。。。。。e:" + e);
            e.printStackTrace();
        }
    }
}
