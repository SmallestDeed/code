<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nork.decorateOrder.dao.DecoratePriceMapper">
    <resultMap id="BaseResultMap" type="com.nork.decorateOrder.model.DecoratePrice">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="company_id" jdbcType="BIGINT" property="companyId"/>
        <result column="customer_id" jdbcType="BIGINT" property="customerId"/>
        <result column="proprietor_info_id" jdbcType="INTEGER" property="proprietorInfoId"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="bid_user_id" jdbcType="BIGINT" property="bidUserId"/>
        <result column="material_fee" jdbcType="DECIMAL" property="materialFee"/>
        <result column="check_fee" jdbcType="DECIMAL" property="checkFee"/>
        <result column="labour_fee" jdbcType="DECIMAL" property="labourFee"/>
        <result column="design_fee" jdbcType="DECIMAL" property="designFee"/>
        <result column="submit_time" jdbcType="TIMESTAMP" property="submitTime"/>
        <result column="start_time" jdbcType="TIMESTAMP" property="startTime"/>
        <result column="end_time" jdbcType="TIMESTAMP" property="endTime"/>
        <result column="creator" jdbcType="VARCHAR" property="creator"/>
        <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate"/>
        <result column="modifier" jdbcType="VARCHAR" property="modifier"/>
        <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified"/>
        <result column="is_deleted" jdbcType="INTEGER" property="isDeleted"/>
        <result column="price" jdbcType="DECIMAL" property="price"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, company_id, customer_id, proprietor_info_id, status, bid_user_id, material_fee, 
    check_fee, labour_fee, design_fee, submit_time, start_time, end_time, creator, gmt_create, 
    modifier, gmt_modified, is_deleted, price
  </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from decorate_price
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from decorate_price
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <insert id="insert" parameterType="com.nork.decorateOrder.model.DecoratePrice">
    insert into decorate_price (id, company_id, customer_id, 
      proprietor_info_id, status, bid_user_id, 
      material_fee, check_fee, labour_fee, 
      design_fee, submit_time, start_time, 
      end_time, creator, gmt_create, 
      modifier, gmt_modified, is_deleted
      )
    values (#{id,jdbcType=BIGINT}, #{companyId,jdbcType=BIGINT}, #{customerId,jdbcType=BIGINT}, 
      #{proprietorInfoId,jdbcType=INTEGER}, #{status,jdbcType=TINYINT}, #{bidUserId,jdbcType=BIGINT}, 
      #{materialFee,jdbcType=DECIMAL}, #{checkFee,jdbcType=DECIMAL}, #{labourFee,jdbcType=DECIMAL}, 
      #{designFee,jdbcType=DECIMAL}, #{submitTime,jdbcType=TIMESTAMP}, #{startTime,jdbcType=TIMESTAMP}, 
      #{endTime,jdbcType=TIMESTAMP}, #{creator,jdbcType=VARCHAR}, #{gmtCreate,jdbcType=TIMESTAMP}, 
      #{modifier,jdbcType=VARCHAR}, #{gmtModified,jdbcType=TIMESTAMP}, #{isDeleted,jdbcType=INTEGER}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.nork.decorateOrder.model.DecoratePrice">
        insert into decorate_price
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="companyId != null">
                company_id,
            </if>
            <if test="customerId != null">
                customer_id,
            </if>
            <if test="proprietorInfoId != null">
                proprietor_info_id,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="bidUserId != null">
                bid_user_id,
            </if>
            <if test="materialFee != null">
                material_fee,
            </if>
            <if test="checkFee != null">
                check_fee,
            </if>
            <if test="labourFee != null">
                labour_fee,
            </if>
            <if test="designFee != null">
                design_fee,
            </if>
            <if test="submitTime != null">
                submit_time,
            </if>
            <if test="startTime != null">
                start_time,
            </if>
            <if test="endTime != null">
                end_time,
            </if>
            <if test="creator != null">
                creator,
            </if>
            <if test="gmtCreate != null">
                gmt_create,
            </if>
            <if test="modifier != null">
                modifier,
            </if>
            <if test="gmtModified != null">
                gmt_modified,
            </if>
            <if test="isDeleted != null">
                is_deleted,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="companyId != null">
                #{companyId,jdbcType=BIGINT},
            </if>
            <if test="customerId != null">
                #{customerId,jdbcType=BIGINT},
            </if>
            <if test="proprietorInfoId != null">
                #{proprietorInfoId,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                #{status,jdbcType=TINYINT},
            </if>
            <if test="bidUserId != null">
                #{bidUserId,jdbcType=BIGINT},
            </if>
            <if test="materialFee != null">
                #{materialFee,jdbcType=DECIMAL},
            </if>
            <if test="checkFee != null">
                #{checkFee,jdbcType=DECIMAL},
            </if>
            <if test="labourFee != null">
                #{labourFee,jdbcType=DECIMAL},
            </if>
            <if test="designFee != null">
                #{designFee,jdbcType=DECIMAL},
            </if>
            <if test="submitTime != null">
                #{submitTime,jdbcType=TIMESTAMP},
            </if>
            <if test="startTime != null">
                #{startTime,jdbcType=TIMESTAMP},
            </if>
            <if test="endTime != null">
                #{endTime,jdbcType=TIMESTAMP},
            </if>
            <if test="creator != null">
                #{creator,jdbcType=VARCHAR},
            </if>
            <if test="gmtCreate != null">
                #{gmtCreate,jdbcType=TIMESTAMP},
            </if>
            <if test="modifier != null">
                #{modifier,jdbcType=VARCHAR},
            </if>
            <if test="gmtModified != null">
                #{gmtModified,jdbcType=TIMESTAMP},
            </if>
            <if test="isDeleted != null">
                #{isDeleted,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.nork.decorateOrder.model.DecoratePrice">
        update decorate_price
        <set>
            <if test="companyId != null">
                company_id = #{companyId,jdbcType=BIGINT},
            </if>
            <if test="customerId != null">
                customer_id = #{customerId,jdbcType=BIGINT},
            </if>
            <if test="proprietorInfoId != null">
                proprietor_info_id = #{proprietorInfoId,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=TINYINT},
            </if>
            <if test="bidUserId != null">
                bid_user_id = #{bidUserId,jdbcType=BIGINT},
            </if>
            <if test="materialFee != null">
                material_fee = #{materialFee,jdbcType=DECIMAL},
            </if>
            <if test="checkFee != null">
                check_fee = #{checkFee,jdbcType=DECIMAL},
            </if>
            <if test="labourFee != null">
                labour_fee = #{labourFee,jdbcType=DECIMAL},
            </if>
            <if test="designFee != null">
                design_fee = #{designFee,jdbcType=DECIMAL},
            </if>
            <if test="submitTime != null">
                submit_time = #{submitTime,jdbcType=TIMESTAMP},
            </if>
            <if test="startTime != null">
                start_time = #{startTime,jdbcType=TIMESTAMP},
            </if>
            <if test="endTime != null">
                end_time = #{endTime,jdbcType=TIMESTAMP},
            </if>
            <if test="creator != null">
                creator = #{creator,jdbcType=VARCHAR},
            </if>
            <if test="gmtCreate != null">
                gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
            </if>
            <if test="modifier != null">
                modifier = #{modifier,jdbcType=VARCHAR},
            </if>
            <if test="gmtModified != null">
                gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
            </if>
            <if test="isDeleted != null">
                is_deleted = #{isDeleted,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.nork.decorateOrder.model.DecoratePrice">
    update decorate_price
    set company_id = #{companyId,jdbcType=BIGINT},
      customer_id = #{customerId,jdbcType=BIGINT},
      proprietor_info_id = #{proprietorInfoId,jdbcType=INTEGER},
      status = #{status,jdbcType=TINYINT},
      bid_user_id = #{bidUserId,jdbcType=BIGINT},
      material_fee = #{materialFee,jdbcType=DECIMAL},
      check_fee = #{checkFee,jdbcType=DECIMAL},
      labour_fee = #{labourFee,jdbcType=DECIMAL},
      design_fee = #{designFee,jdbcType=DECIMAL},
      submit_time = #{submitTime,jdbcType=TIMESTAMP},
      start_time = #{startTime,jdbcType=TIMESTAMP},
      end_time = #{endTime,jdbcType=TIMESTAMP},
      creator = #{creator,jdbcType=VARCHAR},
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      modifier = #{modifier,jdbcType=VARCHAR},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      is_deleted = #{isDeleted,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>

    <select id="getMyOrderCount" resultType="int"
            parameterType="com.nork.decorateOrder.model.search.DecoratePriceSearch">
		select 
		count(distinct(dp.id)) from decorate_price dp
		left join decorate_order dorder on dp.id = dorder.decorate_price_id
		<where>
			<if test="bidUserId != null">
				and dp.bid_user_id = #{bidUserId}
			</if>
			<if test="now != null">
				and (
				(dp.status = 0 and dp.end_time &gt; #{now})
				or 
				(dp.status = 1 and dorder.order_status = 0 and dorder.order_timeout &gt; #{now})
				)
			</if>
			<if test="companyId != null">
				and dp.company_id = #{companyId}
			</if>
		</where>
	</select>

    <!--查询平台派单列表create by WangHaiLin-->
    <select id="selectList" parameterType="com.nork.decorateOrder.model.input.DecoratePriceListQuery"
            resultType="com.nork.decorateOrder.model.output.DecoratePriceVO">
        SELECT dp.id as priceId,dp.status as priceStatus,dp.end_time as endTime,
                pi.user_name as userName,
                pi.mobile as mobile,
                pi.province_code AS  provinceCode,
                pi.city_code AS  cityCode,
                pi.area_name AS areaName,
                pi.house_acreage AS houseAcreage,
                pi.house_type AS houseType,
                pi.address AS address,
                pi.bedroom_num AS bedroomNum,
                pi.living_room_num AS livingRoomNum,
                pi.toilet_num AS toiletNum,
                pi.decorate_type AS  decorateType,
                pi.decorate_budget AS decorateBudget,
                pi.decorate_style AS  decorateStyle,
                pi.decorate_house_type AS  decorateHouseType,
                pi.customer_type AS  customerType,
                pi.designplan_type AS designplanType,
                pi.designplan_id AS designplanId
        FROM decorate_price dp
        LEFT JOIN proprietor_info pi ON dp.proprietor_info_id = pi.id
        WHERE dp.company_id = #{companyId}
        AND dp.is_deleted = 0
        <if test="statusList != null and statusList.size > 0">
            AND dp.status IN
            <foreach collection="statusList" item="item" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
        order by dp.gmt_create desc
        <if test="start !=-1 and limit !=-1">
            LIMIT #{start}, #{limit}
        </if>
    </select>

    <!--查询平台派单详情create by WangHaiLin-->
    <select id="getDetail" parameterType="java.lang.Long"
            resultType="com.nork.decorateOrder.model.output.DecoratePriceDetail">
        SELECT dp.id as priceId,dp.status as priceStatus,dp.material_fee AS materialFee,dp.check_fee as checkFee,
               dp.labour_fee as labourFee,dp.design_fee as designFee,dp.end_time as endTime,
               dor.id as orderId,dor.order_status as orderStatus,dor.price as price,dor.order_type as orderType,
                pi.user_name as userName,
                pi.mobile as mobile,
                pi.province_code AS  provinceCode,
                pi.city_code AS  cityCode,
                pi.area_name AS areaName,
                pi.house_acreage AS houseAcreage,
                pi.house_type AS houseType,
                pi.address AS address,
                pi.bedroom_num AS bedroomNum,
                pi.living_room_num AS livingRoomNum,
                pi.toilet_num AS toiletNum,
                pi.decorate_type AS  decorateType,
                pi.decorate_budget AS decorateBudget,
                pi.decorate_style AS  decorateStyle,
                pi.decorate_house_type AS  decorateHouseType,
                pi.customer_type AS  customerType,
                pi.designplan_type AS designplanType,
                pi.designplan_id AS designplanId,
                dc.remark as remark1
        FROM decorate_price dp
        LEFT JOIN decorate_order dor on dp.id = dor.decorate_price_id
        LEFT JOIN proprietor_info pi ON dp.proprietor_info_id = pi.id
        LEFT JOIN decorate_customer dc ON  pi.id=dc.proprietor_info_id
        WHERE dp.id = #{priceId}
        AND dp.is_deleted=0
    </select>

    <!--查询平台派单数量create by WangHaiLin-->
    <select id="getCount" parameterType="com.nork.decorateOrder.model.input.DecoratePriceListQuery" resultType="java.lang.Integer">
        SELECT COUNT(distinct(dp.id)) FROM decorate_price dp
        LEFT JOIN proprietor_info pi ON dp.proprietor_info_id = pi.id
        WHERE dp.company_id = #{companyId}
        AND dp.is_deleted = 0
        <if test="statusList != null and statusList.size > 0">
            AND dp.status IN
            <foreach collection="statusList" item="item" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
    </select>

	<select id="selectCountBySearch" 
	parameterType="com.nork.decorateOrder.model.search.DecoratePriceSearch"
	resultType="int">
		select count(1)
		from decorate_price dp
		<where>
			<if test="status != null">
				and dp.status = #{status}
			</if>
			<if test="customerId">
				and dp.customer_id = #{customerId}
			</if>
		</where>
	</select>

	<select id="selectListBySearch" resultMap="BaseResultMap">
		select <include refid="Base_Column_List"></include>
		from decorate_price
		<where>
			<if test="customerId != null">
				and customer_id = #{customerId}
			</if>
			<if test="isDeleted != null">
				and is_deleted = #{isDeleted}
			</if>
		</where>
	</select>

</mapper>