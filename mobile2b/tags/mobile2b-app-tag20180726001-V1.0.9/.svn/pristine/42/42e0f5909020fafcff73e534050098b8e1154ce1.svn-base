<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       ">
	<!-- <bean name="house_write_dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="name" value="house_write_dataSource" />
		<property name="driverClassName" value="${jdbc.connection.ReplicationDriverClassName}"></property>
		<property name="url" value="${write.connection.url}" />
		<property name="username" value="${write.connection.username}" />
		<property name="password" value="${write.connection.password}" />

		<property name="initialSize" value="10" />
		<property name="maxActive" value="500" />
		<property name="minIdle" value="10" />
		<property name="maxWait" value="60000" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxOpenPreparedStatements" value="100" />
		<property name="validationQuery" value="SELECT 1" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<property name="timeBetweenEvictionRunsMillis" value="10000" />
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		超过时间限制是否回收
		<property name="removeAbandoned" value="true" />
		超时时间；单位为秒。180秒=3分钟
		<property name="removeAbandonedTimeout" value="600" />
		关闭abanded连接时输出错误日志
		<property name="logAbandoned" value="true" />
		<property name="filters" value="stat,wall" />
	</bean>
	
	<bean name="house_read_dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="name" value="house_read_dataSource" />
		<property name="driverClassName" value="${jdbc.connection.ReplicationDriverClassName}"></property>
		<property name="url" value="${read.connection.url}" />
		<property name="username" value="${read.connection.username}" />
		<property name="password" value="${read.connection.password}" />

		<property name="initialSize" value="10" />
		<property name="maxActive" value="500" />
		<property name="minIdle" value="10" />
		<property name="maxWait" value="60000" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxOpenPreparedStatements" value="100" />
		<property name="validationQuery" value="SELECT 1" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<property name="timeBetweenEvictionRunsMillis" value="10000" />
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		超过时间限制是否回收
		<property name="removeAbandoned" value="true" />
		超时时间；单位为秒。180秒=3分钟
		<property name="removeAbandonedTimeout" value="600" />
		关闭abanded连接时输出错误日志
		<property name="logAbandoned" value="true" />
		<property name="filters" value="stat,wall" />
	</bean> 

	<bean id="house_rw_dataSource" class="com.nork.common.datasource.ReadWriteDataSource">
		<property name="writeDataSource" ref="house_write_dataSource" />
		<property name="readDataSourceMap">
			<map>
				<entry key="house_read_1" value-ref="house_read_dataSource" />
				<entry key="house_read_2" value-ref="house_read_dataSource" />
			</map>
		</property>
	</bean>

	<bean id="house_DataSourceTransactionProcessor" class="com.nork.common.datasource.ReadWriteDataSourceProcessor">
		<property name="forceChoiceReadWhenWrite" value="false" />
	</bean> -->
	
	<bean id="house_sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="common_write_dataSource" p:configLocation="classpath:spring/mybatis-config.xml"
	 >
	<property name="mapperLocations">
		<array>
			<value>classpath:com/nork/home/mapper/*.xml</value>
		</array>
	</property>
      </bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="annotationClass" value="org.springframework.stereotype.Repository" />
		<property name="basePackage" value="com.nork.home.dao" />
		<property name="sqlSessionFactoryBeanName" value="house_sqlSessionFactory" />
	</bean>

	<!-- <bean id="house_txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="common_write_dataSource" />
	</bean>

	<tx:advice id="house_txAdvice" transaction-manager="house_txManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="merge*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />

			<tx:method name="put*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="check*" read-only="true" />
			<tx:method name="use*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="count*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="select*" read-only="true" />
			<tx:method name="list*" read-only="true" />

			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	
	<aop:config proxy-target-class="true">
		<aop:pointcut id="house_transactionPointcut"
			expression="execution(* com.nork.*.service..*.*(..))" />
		<aop:advisor pointcut-ref="house_transactionPointcut" advice-ref="house_txAdvice" />
		通过AOP切面实现读/写库选择
		<aop:aspect order="-2147483648" ref="common_DataSourceTransactionProcessor">
			<aop:around pointcut-ref="house_transactionPointcut" method="determineReadOrWriteDB" />
		</aop:aspect>
	</aop:config>
   -->
</beans>