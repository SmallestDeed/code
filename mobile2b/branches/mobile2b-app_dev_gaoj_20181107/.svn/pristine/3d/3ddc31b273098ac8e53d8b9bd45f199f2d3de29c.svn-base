<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nork.pay.dao.PayAccountMapper">

	<resultMap id="BaseResultMap" type="com.nork.pay.model.PayAccount">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="consum_amount" jdbcType="DOUBLE" property="consumAmount" />
		<result column="balance_amount" jdbcType="DOUBLE" property="balanceAmount" />
		<result column="user_id" jdbcType="INTEGER" property="userId" />
		<result column="platform_id" jdbcType="INTEGER" property="platformId" />
		<result column="is_deleted" jdbcType="INTEGER" property="isDeleted" />
		<result column="creator" jdbcType="VARCHAR" property="creator" />
		<result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate" />
		<result column="modifier" jdbcType="VARCHAR" property="modifier" />
		<result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified" />
		<result column="platform_bussiness_type" jdbcType="VARCHAR"
			property="platformBussinessType" />
	</resultMap>
	
	<sql id="Base_Column_List">
		id, consum_amount, balance_amount, user_id, platform_id, is_deleted,
		creator, gmt_create,
		modifier, gmt_modified, platform_bussiness_type
	</sql>
	
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from pay_account
		where id = #{id,jdbcType=INTEGER}
	</select>
	
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from pay_account
		where id = #{id,jdbcType=INTEGER}
	</delete>
	
	<insert id="insert" parameterType="com.nork.pay.model.PayAccount">
		insert into pay_account (id, consum_amount, balance_amount,
		user_id, platform_id, is_deleted,
		creator, gmt_create, modifier,
		gmt_modified, platform_bussiness_type)
		values (#{id,jdbcType=INTEGER}, #{consumAmount,jdbcType=DOUBLE},
		#{balanceAmount,jdbcType=DOUBLE},
		#{userId,jdbcType=INTEGER}, #{platformId,jdbcType=INTEGER}, #{isDeleted,jdbcType=INTEGER},
		#{creator,jdbcType=VARCHAR}, #{gmtCreate,jdbcType=TIMESTAMP},
		#{modifier,jdbcType=VARCHAR},
		#{gmtModified,jdbcType=TIMESTAMP}, #{platformBussinessType,jdbcType=VARCHAR})
	</insert>
	
	<insert id="insertSelective" parameterType="com.nork.pay.model.PayAccount">
		insert into pay_account
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="consumAmount != null">
				consum_amount,
			</if>
			<if test="balanceAmount != null">
				balance_amount,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="platformId != null">
				platform_id,
			</if>
			<if test="isDeleted != null">
				is_deleted,
			</if>
			<if test="creator != null">
				creator,
			</if>
			<if test="gmtCreate != null">
				gmt_create,
			</if>
			<if test="modifier != null">
				modifier,
			</if>
			<if test="gmtModified != null">
				gmt_modified,
			</if>
			<if test="platformBussinessType != null">
				platform_bussiness_type,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="consumAmount != null">
				#{consumAmount,jdbcType=DOUBLE},
			</if>
			<if test="balanceAmount != null">
				#{balanceAmount,jdbcType=DOUBLE},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=INTEGER},
			</if>
			<if test="platformId != null">
				#{platformId,jdbcType=INTEGER},
			</if>
			<if test="isDeleted != null">
				#{isDeleted,jdbcType=INTEGER},
			</if>
			<if test="creator != null">
				#{creator,jdbcType=VARCHAR},
			</if>
			<if test="gmtCreate != null">
				#{gmtCreate,jdbcType=TIMESTAMP},
			</if>
			<if test="modifier != null">
				#{modifier,jdbcType=VARCHAR},
			</if>
			<if test="gmtModified != null">
				#{gmtModified,jdbcType=TIMESTAMP},
			</if>
			<if test="platformBussinessType != null">
				#{platformBussinessType,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	
	<update id="updateByPrimaryKeySelective" parameterType="com.nork.pay.model.PayAccount">
		update pay_account
		<set>
			<if test="consumAmount != null">
				consum_amount = #{consumAmount,jdbcType=DOUBLE},
			</if>
			<if test="balanceAmount != null">
				balance_amount = #{balanceAmount,jdbcType=DOUBLE},
			</if>
			<if test="userId != null">
				user_id = #{userId,jdbcType=INTEGER},
			</if>
			<if test="platformId != null">
				platform_id = #{platformId,jdbcType=INTEGER},
			</if>
			<if test="isDeleted != null">
				is_deleted = #{isDeleted,jdbcType=INTEGER},
			</if>
			<if test="creator != null">
				creator = #{creator,jdbcType=VARCHAR},
			</if>
			<if test="gmtCreate != null">
				gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
			</if>
			<if test="modifier != null">
				modifier = #{modifier,jdbcType=VARCHAR},
			</if>
			<if test="gmtModified != null">
				gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
			</if>
			<if test="platformBussinessType != null">
				platform_bussiness_type = #{platformBussinessType,jdbcType=VARCHAR},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	
	<update id="updateByPrimaryKey" parameterType="com.nork.pay.model.PayAccount">
		update pay_account
		set consum_amount = #{consumAmount,jdbcType=DOUBLE},
		balance_amount = #{balanceAmount,jdbcType=DOUBLE},
		user_id = #{userId,jdbcType=INTEGER},
		platform_id = #{platformId,jdbcType=INTEGER},
		is_deleted = #{isDeleted,jdbcType=INTEGER},
		creator = #{creator,jdbcType=VARCHAR},
		gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
		modifier = #{modifier,jdbcType=VARCHAR},
		gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
		platform_bussiness_type = #{platformBussinessType,jdbcType=VARCHAR}
		where id = #{id,jdbcType=INTEGER}
	</update>

	<select id="selectBySearch" parameterType="com.nork.pay.model.search.PayAccountSearch" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from pay_account
		<where>
			<if test="userId">
				and user_id = #{userId}
			</if>
			<if test="platformBussinessType != null">
				and platform_bussiness_type = #{platformBussinessType}
			</if>
		</where>
		<if test="start != null and limit != null">
			limit #{start}, #{limit}
		</if>
	</select>

	<update id="updateBalance" parameterType="com.nork.pay.model.PayAccount">
		update pay_account
		<set>
			<if test="payAccount.consumAmount != null">
				consum_amount = #{payAccount.consumAmount,jdbcType=DOUBLE},
			</if>
			<if test="payAccount.balanceAmount != null">
				balance_amount = #{payAccount.balanceAmount,jdbcType=DOUBLE},
			</if>
			<if test="payAccount.userId != null">
				user_id = #{payAccount.userId,jdbcType=INTEGER},
			</if>
			<if test="payAccount.platformId != null">
				platform_id = #{payAccount.platformId,jdbcType=INTEGER},
			</if>
			<if test="payAccount.isDeleted != null">
				is_deleted = #{payAccount.isDeleted,jdbcType=INTEGER},
			</if>
			<if test="payAccount.creator != null">
				creator = #{payAccount.creator,jdbcType=VARCHAR},
			</if>
			<if test="payAccount.gmtCreate != null">
				gmt_create = #{payAccount.gmtCreate,jdbcType=TIMESTAMP},
			</if>
			<if test="payAccount.modifier != null">
				modifier = #{payAccount.modifier,jdbcType=VARCHAR},
			</if>
			<if test="payAccount.gmtModified != null">
				gmt_modified = #{payAccount.gmtModified,jdbcType=TIMESTAMP},
			</if>
			<if test="payAccount.platformBussinessType != null">
				platform_bussiness_type = #{payAccount.platformBussinessType,jdbcType=VARCHAR},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
		and balance_amount = #{balanceAmount}
	</update>

</mapper>